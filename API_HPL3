template <typename T>
class array {
void insertAt(uint, const T&in);
void removeAt(uint);
void insertLast(const T&in);
void insertBack(const T&in);
void removeFirst();
void removeLast();
uint length() const;
void resize(uint);
void sortAsc();
void sortAsc(uint, uint);
void sortDesc();
void sortDesc(uint, uint);
void reverse();
int find(const T&in) const;
int find(uint, const T&in) const;
void push_back(const T&in);
void push_front(const T&in);
void pop_back();
void pop_front();
uint size() const;
}

class cBillboardGroup
{
	void AddBillboard(cBillboard@ apBillboard);
	void RemoveBillboard(cBillboard@ apBillboard);


}

class cRopeEntityBillboard
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	iPhysicsRope@ GetPhysicsRope();
	void SetMaterial(cMaterial@ apMaterial);
	void SetColor(const cColor &in aColor);
	const cColor& GetColor();
	void SetMultiplyAlphaWithColor(bool abX);
	bool GetMultiplyAlphaWithColor();
	void SetRadius(float afX);
	float GetRadius();
	int GetMaxSegments();
	void SetLengthTileAmount(float afX);
	float GetLengthTileAmount();
	void SetLengthTileSize(float afX);
	float GetLengthTileSize();


}

class cWidgetCheckBox
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetChecked(bool abX,  bool abGenCallback=true);
	bool IsChecked();


}

class cPhysicsContactData
{

	float mfMaxContactNormalSpeed;
	float mfMaxContactTangentSpeed;
	cVector3f mvContactNormal;
	cVector3f mvContactPosition;

}

class cScriptVar
{


}

class cImGuiButtonData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	bool mbUseFrame;
	cImGuiFrameGfx mGfxFrame;
	bool mbUseInFocusColor;
	cColor mColorInFocus;
	bool mbUseInFocusGfx;
	cImGuiGfx mGfxInFocus;
	bool mbUseTriggeredColor;
	cColor mColorTriggered;
	bool mbUseTriggeredGfx;
	cImGuiGfx mGfxTriggered;
	bool mbUseTriggeredAndInFocusColor;
	cColor mColorTriggeredAndInFocus;
	bool mbClipText;
	float mfClipAreaPaddingLeft;
	float mfClipAreaPaddingRight;
	float mfScrollSpeed;
	float mfScrollStartDelay;
	float mfScrollResetDelay;

}

class iCharacterBody
{
	const tString& GetName();
	tID GetID();
	void Update(float afTimeStep);
	void SetForce(const cVector3f &in avForce);
	void AddForce(const cVector3f &in avForce);
	cVector3f GetForce();
	void Move(eCharDir aDir,  float afMul);
	void StopMovement();
	int AddExtraSize(const cVector3f&in avSize);
	void SetActiveSize(int alNum);
	int GetActiveSize();
	bool CheckCharacterFits(const cVector3f &in avPosition,  bool abFeetPosition,  int alSizeIdx,  cVector3f &out avOutPushBackVec);
	bool CheckRayIntersection(const cVector3f &in avStart,  const cVector3f &in avEnd,  float &out afOutDistance,  cVector3f &out avOutNormalVec);
	void SetActive(bool abX);
	bool IsActive();
	float GetMass();
	void SetMass(float afMass);
	const cVector3f& GetSize();
	iCollideShape@ GetCurrentShape();
	iCollideShape@ GetShape(int alIdx);
	iPhysicsBody@ GetCurrentBody();
	void SetCollideCharacter(bool abX);
	bool GetCollideCharacter();
	void SetTestCollision(bool abX);
	bool GetTestCollision();
	void SetPhysicsBodyActive(bool abX);
	bool GetPhysicsBodyActive();
	void SetMaxPositiveMoveSpeed(eCharDir aDir,  float afX);
	float GetMaxPositiveMoveSpeed(eCharDir aDir);
	void SetMaxNegativeMoveSpeed(eCharDir aDir,  float afX);
	float GetMaxNegativeMoveSpeed(eCharDir aDir);
	void SetMoveSpeed(eCharDir aDir,  float afX);
	float GetMoveSpeed(eCharDir aDir);
	void SetMoveAcc(eCharDir aDir,  float afX);
	float GetMoveAcc(eCharDir aDir);
	void SetMoveDeacc(eCharDir aDir,  float afX);
	float GetMoveDeacc(eCharDir aDir);
	void SetMoveOppositeDirAccMul(eCharDir aDir,  float afX);
	float GetMoveOppositeDirAccMul(eCharDir aDir);
	void SetDeaccelerateMoveSpeedInAir(bool abX);
	bool GetDeaccelerateMoveSpeedInAir();
	cVector3f GetVelocity(float afFrameTime);
	void SetPosition(const cVector3f&in avPos,  bool abSmooth);
	const cVector3f& GetPosition();
	const cVector3f& GetLastPosition();
	void SetFeetPosition(const cVector3f&in avPos,  bool abSmooth);
	cVector3f GetFeetPosition();
	void SetYaw(float afX);
	void AddYaw(float afX);
	float GetYaw();
	void SetPitch(float afX);
	void AddPitch(float afX);
	float GetPitch();
	void SetRoll(float afX);
	void AddRoll(float afX);
	float GetRoll();
	const cVector3f& GetForward();
	const cVector3f& GetRight();
	const cVector3f& GetUp();
	const cMatrixf& GetMoveMatrix();
	void SetGravityActive(bool abX);
	bool GravityIsActive();
	void SetMaxGravitySpeed(float afX);
	float GetMaxGravitySpeed();
	bool GetCustomGravityActive();
	void SetCustomGravityActive(bool abX);
	void SetCustomGravity(const cVector3f&in avCustomGravity);
	cVector3f GetCustomGravity();
	void AddForceVelocity(const cVector3f&in avVel);
	void SetForceVelocity(const cVector3f&in avVel);
	cVector3f GetForceVelocity();
	bool IsOnGround();
	void SetMaxOnGroundCount(int alX);
	int GetMaxOnGroundCount();
	void SetCollideFlags(uint alX);
	uint GetCollideFlags( const);
	void SetGroundFriction(float afX);
	float GetGroundFriction();
	void SetAirFriction(float afX);
	float GetAirFriction();
	void SetDisableDiagSpeedBoost(bool abX);
	bool GetDisableDiagSpeedBoost();
	bool GetMovedLastUpdate();
	void SetMaxPushMass(float afX);
	void SetMaxPushForce(float afX);
	void SetPushImpulse(float afX);
	float GetMaxPushMass();
	float GetMaxPushForce();
	float GetPushImpulse();
	bool GetPushIn2D();
	void SetPushIn2D(bool abX);
	void SetCharacterMaxPushMass(float afX);
	void SetCharacterPushForce(float afX);
	float GetCharacterMaxPushMass();
	float GetCharacterPushForce();
	bool GetCharacterPushIn2D();
	void SetCharacterPushIn2D(bool abX);
	void SetConstantContactForceMul(float afX);
	float GetConstantContactForceMul();
	void SetVelocityContactForceMul(float afX);
	float GetVelocityContactForceMul();
	void SetMaxContactForcePerMassUnit(float afX);
	float GetMaxContactForcePerMassUnit();
	void SetMaxNoSlideSlopeAngle(float afAngle);
	float GetMaxNoSlideSlopeAngle();
	void SetStickToSlope(bool abX);
	bool GetStickToSlope();
	float GetMaxStepSize();
	void SetMaxStepSize(float afSize);
	float GetMaxStepSizeInAir();
	void SetMaxStepSizeInAir(float afSize);
	void SetStepClimbSpeed(float afX);
	float GetStepClimbSpeed();
	void SetAccurateClimbing(bool abX);
	bool GetAccurateClimbing();
	void SetClimbForwardMul(float afX);
	float GetClimbForwardMul();
	void SetClimbHeightAdd(float afX);
	float GetClimbHeightAdd();
	bool IsClimbing();
	void ResetClimbing();
	void SetGroundAngleMin(float afX);
	float GetGroundAngleMin();
	const cVector3f& GetLastGroundNormal();
	void SetRotateYawWhenGravityAttached(bool abX);
	bool GetRotateYawWhenGravityAttached();
	iPhysicsBody@ GetGravityAttachedBody();
	iPhysicsMaterial@ GetGravityCollideMaterial();
	void SetCamera(cCamera@ apCam);
	cCamera@ GetCamera();
	void SetCameraPosAdd(const cVector3f &in avAdd);
	cVector3f GetCameraPosAdd();
	void SetCameraSmoothPosNum(int alNum);
	int GetCameraSmoothPosNum();
	void SetUpdateCameraYaw(bool abX);
	bool GetUpdateCameraYaw();
	void SetUpdateCameraVelocity(bool abX);
	bool GetUpdateCameraVelocity();
	void SetCameraUseSmoothing(bool abX);
	bool GetCameraUseSmoothing();
	void SetCameraUpdateActive(bool abX);
	bool GetCameraUpdateActive();
	void SetEntity(iEntity3D@ apEntity);
	iEntity3D@ GetEntity();
	void SetEntityPitchAmount(float afX);
	float GetEntityPitchAmount();
	void SetEntityOffset(const cMatrixf &in a_mtxOffset);
	const cMatrixf & GetEntityOffset();
	void SetEntityPostOffset(const cMatrixf &in a_mtxOffset);
	const cMatrixf & GetEntityPostOffset();
	void SetEntitySmoothPosNum(int alNum);
	int GetEntitySmoothPosNum();
	void SetEntityUseSmoothing(bool abX);
	bool GetEntityUseSmoothing();
	void SetUseEntitySmoothYPos(bool abX);
	void SetEntitySmoothYPosNum(int alX);
	bool GetUseEntitySmoothYPos();
	int GetEntitySmoothYPosNum();


}

class cLuxEntityConnection
{


}

class cLightSpot
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	eLightType GetLightType();
	void SetGoboTexture(iTexture @apTexture);
	iTexture@ GetGoboTexture();
	void SetGoboAnimMode(eTextureAnimMode aMode);
	eTextureAnimMode GetGoboAnimMode();
	void SetGoboAnimFrameTime(float afX);
	float GetGoboAnimFrameTime();
	void SetGoboAnimStartTime(float afX);
	float GetGoboAnimStartTime();
	int GetGoboNextFrame();
	void SetMask(cLightMaskBox @apMask);
	cLightMaskBox@ GetMask();
	void AttachBillboard(cBillboard @apBillboard,  const cColor &in aBaseColor,  float afBaseBrightness);
	void RemoveBillboard(cBillboard @apBillboard);
	void AttachParticleSystem(cParticleSystem @apPS);
	void RemoveParticleSystem(cParticleSystem @apPS);
	void FadeTo(const cColor&in aCol,  float afRadius,  float afTime);
	void StopFading();
	bool IsFading();
	const cColor& GetDestColor();
	float GetDestRadius();
	void SetFlickerActive(bool abX);
	bool GetFlickerActive();
	void SetFlicker(const cColor&in aOffCol,  float afOffRadius, float afOnMinLength,  float afOnMaxLength, const tString &in asOnSound, const tString &in asOnPS,  float afOffMinLength,  float afOffMaxLength, const tString &in asOffSound, const tString &in asOffPS,  bool abFade, 	float afOnFadeMinLength,  float afOnFadeMaxLength,  float afOffFadeMinLength,  float afOffFadeMaxLength);
	const tString& GetFlickerOffSound();
	const tString& GetFlickerOnSound();
	const tString& GetFlickerOffPS();
	const tString& GetFlickerOnPS();
	float GetFlickerOnMinLength();
	float GetFlickerOffMinLength();
	float GetFlickerOnMaxLength();
	float GetFlickerOffMaxLength();
	const cColor& GetFlickerOffColor();
	float GetFlickerOffRadius();
	bool GetFlickerFade();
	float GetFlickerOnFadeMinLength();
	float GetFlickerOnFadeMaxLength();
	float GetFlickerOffFadeMinLength();
	float GetFlickerOffFadeMaxLength();
	const cColor& GetFlickerOnColor();
	float GetFlickerOnRadius();
	const cColor& GetDiffuseColor();
	void SetDiffuseColor(const cColor&in aColor);
	const cColor& GetDefaultDiffuseColor();
	void SetDefaultDiffuseColor(const cColor&in aColor);
	const cColor& GetSpecularColor();
	void SetSpecularColor(cColor aColor);
	bool GetCastShadows();
	void SetCastShadows(bool afX);
	int GetShadowCastersAffected();
	void SetShadowCastersAffected(int alX);
	eShadowMapResolution GetShadowMapResolution( const);
	void SetShadowMapResolution(eShadowMapResolution aQuality);
	float GetShadowMapBlurAmount( const);
	void SetShadowMapBlurAmount(float afX);
	bool GetOcclusionCullShadowCasters( const);
	void SetOcclusionCullShadowCasters(bool abX);
	float GetShadowMapBiasMul();
	float GetShadowMapSlopeScaleBiasMul();
	void SetShadowMapBiasMul(float afX);
	void SetShadowMapSlopeScaleBiasMul(float afX);
	void SetRadius(float afX);
	float GetRadius();
	void SetFalloffPow(float afX);
	float GetFalloffPow();
	float GetSourceRadius();
	void SetSourceRadius(float afX);
	void SetBrightness(float afX);
	float GetBrightness();
	void SetCastTerrainShadow(bool abX);
	bool GetCastTerrainShadow();
	float GetTranslucency();
	void SetTranslucency(float afX);
	const cMatrixf& GetViewMatrix();
	const cMatrixf& GetProjectionMatrix();
	const cMatrixf& GetViewProjMatrix();
	void SetFOV(float afAngle);
	float GetFOV( const);
	float GetTanHalfFOV( const);
	float GetCosHalfFOV( const);
	void SetAspect(float afAngle);
	float GetAspect();
	void SetNearClipPlane(float afX);
	float GetNearClipPlane();
	cFrustum@+ GetFrustum();
	void SetSpotFalloffPow(float afX);
	float GetSpotFalloffPow();


}

class cImGuiWindowData
{
	void SetLabelPadding(float afTop,  float afRight,  float afBottom,  float afLeft);
	void SetPadding(float afTop,  float afRight,  float afBottom,  float afLeft);

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	eImGuiWindowHeader mHeaderType;
	cImGuiFrameGfx mGfxWindowData;
	bool mbUseHeader;
	cVector3f mvLabelOffset;
	float mfCaptionSizeMul;
	cImGuiFrameGfx mGfxLabelData;
	float mfLabelPaddingTop;
	float mfLabelPaddingRight;
	float mfLabelPaddingBottom;
	float mfLabelPaddingLeft;
	float mfLabelMinWidth;
	float mfPaddingTop;
	float mfPaddingRight;
	float mfPaddingBottom;
	float mfPaddingLeft;

}

class iRenderableEntity
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);


}

class cGuiGfxElement
{
	void SetOffset(const cVector3f&in avOffset);
	const cVector3f& GetOffset();
	void SetActiveSize(const cVector2f&in avSize);
	const cVector2f& GetActiveSize();
	cGuiGfxAnimation@ CreateAnimtion(const tString&in asName);
	void PlayAnimation(int alNum);
	int GetAnimationNum();
	cGuiGfxAnimation@ GetAnimation(int alIdx);
	void SetAnimationTime(float afTime);
	void SetAnimationPaused(bool abX);
	bool GetAnimationPaused();
	void SetMaterial(iGuiMaterial @apMat);
	void SetColor(const cColor &in aColor);
	void SetFlipUvYAxis(bool abX);
	bool GetFlipUvYAxis();
	const cVector2f& GetImageSize();


}

class cEventTrigger
{
	const tString& GetName(const);
	int GetId(const);


}

class cWidgetTextBox
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetCallbackOnLostFocus(bool abX);
	bool GetCallbackOnLostFocus();
	void SetForceCallBackOnEnter(bool abX);
	bool GetForceCallBackOnEnter();
	void SetMaxTextLength(int alLength);
	int GetMaxTextLength();
	void SetSelectedText(int alStart=0,  int alCount=-1);
	cVector2f GetBackgroundSize();
	void SetMaxTextSizeNeg(float afX);
	void SetCanEdit(bool abX);
	bool GetCanEdit();
	void SetShowButtons(bool abX);
	void SetNumericAdd(float afX);
	float GetNumericAdd();
	void SetNumericValue(float afX);
	float GetNumericValue();
	void SetLowerBound(bool abX,  float afValue=0);
	float GetLowerBound();
	void SetUpperBound(bool abX,  float afValue=0);
	float GetUpperBound();
	void SetDecimals(int alX);
	int GetDecimals();
	void SetIllegalChars(const tWString&in asIllegalChars);
	const tWString& GetIllegalChars();
	void SetLegalCharCodeLimitEnabled(bool abX);
	bool GetLegalCharCodeLimitEnabled();


}

class cLensFlare
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	void FadeIn(float afTime);
	void FadeOut(float afTime);
	void SetFlareSourceSize(cVector3f avSize);
	cVector3f GetFlareSourceSize();
	void SetOuterFieldOfView(float afAngle);
	float GetOuterFieldOfView();
	void SetInnerFieldOfView(float afAngle);
	float GetInnerFieldOfView();
	void SetMultiIrisTextureAtlasGrid(cVector2l avMultiIrisGrid);
	cVector2l GetMultiIrisTextureAtlasGrid();
	void SetMultiIrisSeed(int alSeed);
	int GetMultiIrisSeed();
	void SetMultiIrisCount(int alCount);
	int GetMultiIrisCount();
	void SetRangeMax(float afRangeMaxStart,  float afRangeMaxEnd);
	void DisableRangeMax();
	float GetRangeMaxStart();
	float GetRangeMaxEnd();
	void SetRangeMin(float afRangeMinStart,  float afRangeMinEnd);
	void DisableRangeMin();
	float GetRangeMinStart();
	float GetRangeMinEnd();
	void SetGlareBrightness(float afBrightness);
	float GetGlareBrightness();
	void SetGlareFieldOfView(float afAngle);
	float GetGlareFieldOfView();
	void SetGlareStareAt(float afGlare);
	void SetGlareRange(float afRangeMaxStart,  float afRangeMaxEnd);
	float GetGlareRangeMaxStart();
	float GetGlareRangeMaxEnd();
	void SetSizeChangeBasedOnDistance(float afPercent);
	float GetSizeChangeBasedOnDistance();
	void SetFlareSize(eLensFlareType aType,  cVector2f avSize);
	cVector2f GetFlareSize(eLensFlareType aType);
	void SetFlareColor(eLensFlareType aType,  cColor aValue);
	cColor GetFlareColor(eLensFlareType aType);
	void SetFlareActive(eLensFlareType aType,  bool abValue);
	bool IsFlareActive(eLensFlareType aType);
	void SetUseParentMeshForOcclusion(bool abValue);
	bool GetUseParentMeshForOcclusion();
	void SetShrinkWhenOccluded(bool abValue);
	bool GetShrinkWhenOccluded();
	void SetMultiplyGlareWithMultiIris(bool abValue);
	bool GetMultiplyGlareWithMultiIris();
	void SetBrightness(float afX);
	float GetBrightness();
	eLensFlareType GetFirstActiveType();
	void SetAsPointLight();
	void SetMaterial(eLensFlareType aType,  cMaterial@ apMaterial);


}

class cImGuiGfx
{
	void SetFile(const tString&in asFile);
	const tString& GetFile(const);
	uint64 GetId();
	void CopyFrom(const cImGuiGfx &in aGfx);

	eGuiMaterial mMaterial;
	cColor mColor;
	eImGuiGfx mType;
	eImGuiWrapMode mWrapMode;
	cVector3f mvOffset;
	float mfAnimationTime;
	bool mbCrossfadeAnimation;
	cVector2f mvUVMin;
	cVector2f mvUVMax;
	bool mbUVFlipH;
	bool mbUVFlipV;
	cColor mColorCornerTopLeft;
	cColor mColorCornerTopRight;
	cColor mColorCornerBotRight;
	cColor mColorCornerBotLeft;

}

class cQuaternion
{
	void Normalize();
	void FromRotationMatrix(const cMatrixf &in);
	void FromAngleAxis(float afAngle,  const cVector3f &in);
	float Length();
	float LengthXYZ();
	float SqrLength();
	float SqrLengthXYZ();
	void SetXYZ(const cVector3f &in avVec);

	float w;
	float x;
	float y;
	float z;

}

class cLuxEntityMessageData
{

	cVector3f mvX;
	cVector3f mvY;
	int mlX;
	int mlY;
	tID mID;
	tString msX;

}

class cLuxEffectHandler
{
	iScrEffect_Interface@ GetEffect(int alId);
	void FadeIn(float afTime);
	void FadeOut(float afTime);
	bool IsFading();
	float GetFadeAlpha();
	void AddGlowObject(iLuxEntity@ apEntity,  float afAlpha,  float afY);
	void AddEdgeGlowObject(iLuxEntity@ apEntity,  const cColor &in aColor,  float afAlpha,  float afEdgeThickness,  float afLightLimit);


}

class cFogArea
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	const cColor& GetColor();
	void SetColor(const cColor&in aCol);
	const cVector3f& GetSize();
	void SetSize(const cVector3f&in avSize);
	void SetStart(float afX);
	void SetEnd(float afX);
	float GetStart();
	float GetEnd();
	void SetFalloffExp(float afX);
	float GetFalloffExp();
	void SetShowBacksideWhenOutside(bool abX);
	void SetShowBacksideWhenInside(bool abX);
	bool GetShowBacksideWhenOutside();
	bool GetShowBacksideWhenInside();


}

class iSoundEventData
{
	const tString& GetName();
	void IncUserCount();
	void DecUserCount();
	bool HasUsers();
	uint GetTimeStamp( const);
	int GetParamNum();
	cSoundEventParamInfo@ GetParam(int alIdx);
	cSoundEventParamInfo@ GetParamFromName(const tString&in asName);
	bool Is3D();
	bool IsOneShot();
	bool IsHeadRelative();
	float GetMinDistance();
	float GetMaxDistance();
	void SetDefaultPosition(const cVector3f &in avPostion);
	void SetDefaultVolume(float afVolume);
	void SetDefaultOrientation(const cVector3f &in avOrientation);


}

class cPidControllerf
{
	float Output(const float&in afError,  float afTimeStep);
	void SetErrorNum(int alErrorNum);
	void Reset();
	float GetLastError();
	float GetLastDerivative();
	float GetLastIntegral();

	float p;
	float i;
	float d;

}

class cParticleSystemIterator
{
	bool HasNext();
	cParticleSystem@ Next();
	cParticleSystem@ PeekNext();


}

class cFactStateContainer
{
	void SetFact(const tString &in asFactName);
	void SetFactString(const tString &in asFactName,  const tString &in asValue);
	void SetFactFloat(const tString &in asFactName,  float afValue);
	void SetFactInt(const tString &in asFactName,  int alValue);
	void RemoveFact(const tString &in asFactName);
	int GetSize();
	void Clear();


}

class cScriptStringSet
{
	void Add(const tString &in asStr);
	void Erase(const tString &in asStr);
	bool Exists(const tString &in asStr);
	int Count(const tString &in asStr);
	void Clear();
	int Size();
	void ElementsToArray(array<tString> &out avOutElements);


}

class cWidgetItem
{
	void SetIndex(int alIdx);
	int GetIndex();
	const tWString& GetText(const);
	void AddProperty(const tWString&in asText);
	void AddProperty(const cGuiGfxElement@ apGfx);
	int GetPropertyNum();
	bool IsSelectable();
	void SetSelectable(bool abX);
	bool IsSelected();
	void SetSelected(bool abX);
	void SetText(const tWString&in asText);
	void SetUserValue(int alValue);
	int GetUserValue();


}

class cGuiGlobalShortcut
{
	const cKeyPress& GetKey();
	bool IsEnabled();
	void SetEnabled(bool abX);
	bool ProcessKeyPress(const cKeyPress&in aKey);
	bool Exec();
	tString ToString();


}

class cLightPoint
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	eLightType GetLightType();
	void SetGoboTexture(iTexture @apTexture);
	iTexture@ GetGoboTexture();
	void SetGoboAnimMode(eTextureAnimMode aMode);
	eTextureAnimMode GetGoboAnimMode();
	void SetGoboAnimFrameTime(float afX);
	float GetGoboAnimFrameTime();
	void SetGoboAnimStartTime(float afX);
	float GetGoboAnimStartTime();
	int GetGoboNextFrame();
	void SetMask(cLightMaskBox @apMask);
	cLightMaskBox@ GetMask();
	void AttachBillboard(cBillboard @apBillboard,  const cColor &in aBaseColor,  float afBaseBrightness);
	void RemoveBillboard(cBillboard @apBillboard);
	void AttachParticleSystem(cParticleSystem @apPS);
	void RemoveParticleSystem(cParticleSystem @apPS);
	void FadeTo(const cColor&in aCol,  float afRadius,  float afTime);
	void StopFading();
	bool IsFading();
	const cColor& GetDestColor();
	float GetDestRadius();
	void SetFlickerActive(bool abX);
	bool GetFlickerActive();
	void SetFlicker(const cColor&in aOffCol,  float afOffRadius, float afOnMinLength,  float afOnMaxLength, const tString &in asOnSound, const tString &in asOnPS,  float afOffMinLength,  float afOffMaxLength, const tString &in asOffSound, const tString &in asOffPS,  bool abFade, 	float afOnFadeMinLength,  float afOnFadeMaxLength,  float afOffFadeMinLength,  float afOffFadeMaxLength);
	const tString& GetFlickerOffSound();
	const tString& GetFlickerOnSound();
	const tString& GetFlickerOffPS();
	const tString& GetFlickerOnPS();
	float GetFlickerOnMinLength();
	float GetFlickerOffMinLength();
	float GetFlickerOnMaxLength();
	float GetFlickerOffMaxLength();
	const cColor& GetFlickerOffColor();
	float GetFlickerOffRadius();
	bool GetFlickerFade();
	float GetFlickerOnFadeMinLength();
	float GetFlickerOnFadeMaxLength();
	float GetFlickerOffFadeMinLength();
	float GetFlickerOffFadeMaxLength();
	const cColor& GetFlickerOnColor();
	float GetFlickerOnRadius();
	const cColor& GetDiffuseColor();
	void SetDiffuseColor(const cColor&in aColor);
	const cColor& GetDefaultDiffuseColor();
	void SetDefaultDiffuseColor(const cColor&in aColor);
	const cColor& GetSpecularColor();
	void SetSpecularColor(cColor aColor);
	bool GetCastShadows();
	void SetCastShadows(bool afX);
	int GetShadowCastersAffected();
	void SetShadowCastersAffected(int alX);
	eShadowMapResolution GetShadowMapResolution( const);
	void SetShadowMapResolution(eShadowMapResolution aQuality);
	float GetShadowMapBlurAmount( const);
	void SetShadowMapBlurAmount(float afX);
	bool GetOcclusionCullShadowCasters( const);
	void SetOcclusionCullShadowCasters(bool abX);
	float GetShadowMapBiasMul();
	float GetShadowMapSlopeScaleBiasMul();
	void SetShadowMapBiasMul(float afX);
	void SetShadowMapSlopeScaleBiasMul(float afX);
	void SetRadius(float afX);
	float GetRadius();
	void SetFalloffPow(float afX);
	float GetFalloffPow();
	float GetSourceRadius();
	void SetSourceRadius(float afX);
	void SetBrightness(float afX);
	float GetBrightness();
	void SetCastTerrainShadow(bool abX);
	bool GetCastTerrainShadow();
	float GetTranslucency();
	void SetTranslucency(float afX);


}

class cLuxDialogResponseEvent
{


}

class cConfigFile
{
	bool Load();
	bool Save();
	void SetFileLocation(const tWString&in asFile);
	const tWString& GetFileLocation();
	void EraseSetting(const tString&in  asLevel);
	void EraseValue(const tString&in  asLevel,  const tString&in  asName);
	void EraseAll();
	void SetString(const tString&in  asLevel,  const tString&in  asName,  const tString&in  asVal);
	void SetInt(const tString&in  asLevel,  const tString&in  asName,  int alVal);
	void SetFloat(const tString&in  asLevel,  const tString&in  asName,  float afVal);
	void SetBool(const tString&in  asLevel,  const tString&in  asName,  bool abVal);
	void SetVector2f(const tString&in  asLevel,  const tString&in  asName,  const cVector2f&in  avVal);
	void SetVector3f(const tString&in  asLevel,  const tString&in  asName,  const cVector3f&in  avVal);
	void SetVector2l(const tString&in  asLevel,  const tString&in  asName,  const cVector2l&in  avVal);
	void SetVector3l(const tString&in  asLevel,  const tString&in  asName,  const cVector3l&in  avVal);
	void SetColor(const tString&in  asLevel,  const tString&in  asName,  const cColor&in  aVal);
	tString GetString(const tString&in  asLevel,  const tString&in  asName,  const tString&in  asDefault);
	tWString GetStringW(const tString&in  asLevel,  const tString&in  asName,  const tWString&in  asDefault);
	int GetInt(const tString&in  asLevel,  const tString&in  asName,  int alDefault);
	float GetFloat(const tString&in  asLevel,  const tString&in  asName,  float afDefault);
	bool GetBool(const tString&in  asLevel,  const tString&in  asName,  bool abDefault);
	cVector2f GetVector2f(const tString&in  asLevel,  const tString&in  asName,  const cVector2f&in  avDefault);
	cVector3f GetVector3f(const tString&in  asLevel,  const tString&in  asName,  const cVector3f&in  avDefault);
	cVector2l GetVector2l(const tString&in  asLevel,  const tString&in  asName,  const cVector2l&in  avDefault);
	cVector3l GetVector3l(const tString&in  asLevel,  const tString&in  asName,  const cVector3l&in  avDefault);
	cColor GetColor(const tString&in  asLevel,  const tString&in  asName,  const cColor&in  aDefault);


}

class cMeshEntityIterator
{
	bool HasNext();
	cMeshEntity@ Next();
	cMeshEntity@ PeekNext();


}

class cWidgetCollapsiblePaneContainer
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	cWidgetCollapsiblePane@ AddPane(const tWString&in asLabel);


}

class cVector2f
{
	float GetElement(uint64 alIdx,  const);
	void SetElement(uint64 alIdx, float,  const);
	float SqrLength( const);
	float Length( const);
	float Normalize();

	float x;
	float y;

}

class cWidgetTreeItem
{
	cWidgetTreeItem@ GetParent();
	cWidgetTreeItem@ GetRoot();
	cWidgetTreeItem@ AddChild(const tWString&in asText);
	bool HasChildren();
	int GetNumChildren();
	cWidgetTreeItem@ GetChild(int alIdx);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	bool IsSelectable();
	void SetSelectable(bool abX);
	bool IsSelected();
	void SetSelected(bool abX);
	void SetExpanded(bool abX);
	bool IsExpanded();
	void SetUserValue(int alValue);
	int GetUserValue();


}

class cLuxScreenTextIcon
{


}

class cLuxDialogCharacter
{


}

class iGuiPopUp
{
	void SetKillOnEscapeKey(bool abX);
	bool GetKillOnEscapeKey();
	void SetNextFocusWidget(iWidget@ apNewFocused);


}

class cResourceVarsObject
{
	void AddVarBool(const tString&in asName,  bool abDefault);
	void AddVarInt(const tString&in asName,  int alDefault);
	void AddVarFloat(const tString&in asName,  float afDefault=0);
	void AddVarVector2f(const tString&in asName,  const cVector2f&in avDefault);
	void AddVarVector3f(const tString&in asName,  const cVector3f&in avDefault);
	void AddVarColor(const tString&in asName,  const cColor&in aDefault);
	void AddVarString(const tString&in asName,  const tString&in alDefault);
	bool GetVarBool(const tString&in asName,  bool abDefault);
	int GetVarInt(const tString&in asName,  int alDefault);
	float GetVarFloat(const tString&in asName,  float afDefault);
	cVector2f GetVarVector2f(const tString&in asName,  const cVector2f&in avDefault);
	cVector3f GetVarVector3f(const tString&in asName,  const cVector3f&in avDefault);
	cColor GetVarColor(const tString&in asName,  const cColor&in aDefault);
	tString GetVarString(const tString&in asName,  const tString&in asDefault);


}

class cBillboardIterator
{
	bool HasNext();
	cBillboard@ Next();
	cBillboard@ PeekNext();


}

class cRopeEntity3D
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	iPhysicsRope@ GetPhysicsRope();
	void SetMaterial(cMaterial@ apMaterial);
	void SetColor(const cColor &in aColor);
	const cColor& GetColor();
	void SetRadius(float afX);
	float GetRadius();
	int GetMaxSegmentNum();
	void SetMaxSegmentNum(int alX);
	int GetRingSegmentNum();
	void SetRingSegmentNum(int alX);
	void SetUVScale(float afX);
	float GetUVScale();
	void SetTextureSize(cVector2f avX);
	cVector2f GetTextureSize();


}

class iWidgetMenu
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	cWidgetMenuItem@ AddMenuItem(const tWString&in asText);
	void AddSeparator();
	void ClearMenuItems();
	void SetParentItem( cWidgetMenuItem@ apParentItem );
	cWidgetMenuItem@ GetParentItem();
	iWidgetMenu@ GetParentMenu();
	void SetPrevAttention(iWidget@ apWidget);
	void SetHighlightedItem( cWidgetMenuItem@ apItem );
	cWidgetMenuItem@ GetHighlightedItem();
	void Hide();
	void SetMustHide(bool abX);
	bool IsSubmenuOpen();
	iWidgetMenu@ GetTopMostMenu();
	void SetTextPos(const cVector3f&in avPos);
	void SetArrowPos(const cVector3f&in avPos);
	void SetCheckPos(const cVector3f&in avPos);
	const cVector3f& GetTextOffset();
	const cVector3f& GetArrowOffset();
	const cVector3f& GetCheckOffset();
	float GetMenuItemWidth();


}

class cLinearOscillation
{
	void SetUp(float afMin,  float afMax,  float afVal,  float afUpSpeed, float afDownSpeed);
	void Update(float afTimeStep);

	float max;
	float min;
	float val;
	float up_speed;
	float down_speed;

}

class cLuxScreenTextFormatParameters
{

	float mfOutputLineWidth;
	float mfIconGamepadHeight;
	float mfIconKeyHeight;
	float mfIconMouseHeight;
	cImGuiLabelData mLabelText;

}

class cLuxStateTimer
{


}

class cLightBox
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	eLightType GetLightType();
	void SetGoboTexture(iTexture @apTexture);
	iTexture@ GetGoboTexture();
	void SetGoboAnimMode(eTextureAnimMode aMode);
	eTextureAnimMode GetGoboAnimMode();
	void SetGoboAnimFrameTime(float afX);
	float GetGoboAnimFrameTime();
	void SetGoboAnimStartTime(float afX);
	float GetGoboAnimStartTime();
	int GetGoboNextFrame();
	void SetMask(cLightMaskBox @apMask);
	cLightMaskBox@ GetMask();
	void AttachBillboard(cBillboard @apBillboard,  const cColor &in aBaseColor,  float afBaseBrightness);
	void RemoveBillboard(cBillboard @apBillboard);
	void AttachParticleSystem(cParticleSystem @apPS);
	void RemoveParticleSystem(cParticleSystem @apPS);
	void FadeTo(const cColor&in aCol,  float afRadius,  float afTime);
	void StopFading();
	bool IsFading();
	const cColor& GetDestColor();
	float GetDestRadius();
	void SetFlickerActive(bool abX);
	bool GetFlickerActive();
	void SetFlicker(const cColor&in aOffCol,  float afOffRadius, float afOnMinLength,  float afOnMaxLength, const tString &in asOnSound, const tString &in asOnPS,  float afOffMinLength,  float afOffMaxLength, const tString &in asOffSound, const tString &in asOffPS,  bool abFade, 	float afOnFadeMinLength,  float afOnFadeMaxLength,  float afOffFadeMinLength,  float afOffFadeMaxLength);
	const tString& GetFlickerOffSound();
	const tString& GetFlickerOnSound();
	const tString& GetFlickerOffPS();
	const tString& GetFlickerOnPS();
	float GetFlickerOnMinLength();
	float GetFlickerOffMinLength();
	float GetFlickerOnMaxLength();
	float GetFlickerOffMaxLength();
	const cColor& GetFlickerOffColor();
	float GetFlickerOffRadius();
	bool GetFlickerFade();
	float GetFlickerOnFadeMinLength();
	float GetFlickerOnFadeMaxLength();
	float GetFlickerOffFadeMinLength();
	float GetFlickerOffFadeMaxLength();
	const cColor& GetFlickerOnColor();
	float GetFlickerOnRadius();
	const cColor& GetDiffuseColor();
	void SetDiffuseColor(const cColor&in aColor);
	const cColor& GetDefaultDiffuseColor();
	void SetDefaultDiffuseColor(const cColor&in aColor);
	const cColor& GetSpecularColor();
	void SetSpecularColor(cColor aColor);
	bool GetCastShadows();
	void SetCastShadows(bool afX);
	int GetShadowCastersAffected();
	void SetShadowCastersAffected(int alX);
	eShadowMapResolution GetShadowMapResolution( const);
	void SetShadowMapResolution(eShadowMapResolution aQuality);
	float GetShadowMapBlurAmount( const);
	void SetShadowMapBlurAmount(float afX);
	bool GetOcclusionCullShadowCasters( const);
	void SetOcclusionCullShadowCasters(bool abX);
	float GetShadowMapBiasMul();
	float GetShadowMapSlopeScaleBiasMul();
	void SetShadowMapBiasMul(float afX);
	void SetShadowMapSlopeScaleBiasMul(float afX);
	void SetRadius(float afX);
	float GetRadius();
	void SetFalloffPow(float afX);
	float GetFalloffPow();
	float GetSourceRadius();
	void SetSourceRadius(float afX);
	void SetBrightness(float afX);
	float GetBrightness();
	void SetCastTerrainShadow(bool abX);
	bool GetCastTerrainShadow();
	float GetTranslucency();
	void SetTranslucency(float afX);
	void SetSize(const cVector3f&in avSize);
	const cVector3f& GetSize();
	void SetBlendFunc(eLightBoxBlendFunc aFunc);
	eLightBoxBlendFunc GetBlendFunc();
	void SetAmbientColorSky(const cColor &in aColor);
	void SetAmbientColorGround(const cColor &in aColor);
	const cColor& GetAmbientColorSky();
	const cColor& GetAmbientColorGround();
	void SetWeight(float afX);
	float GetWeight();
	void SetBevel(float afX);
	float GetBevel();
	void SetUseSphericalHarmonics(bool abX);
	bool GetUseSphericalHarmonics();
	void SetProbeOffset(const cVector3f&in avPosition);
	const cVector3f& GetProbeOffset();
	void FadeIrradianceSet(const tString&in asSetName,  float afTime);


}

class cXmlElement
{
	const tString& GetValue();
	void SetValue(const tString&in asValue);
	eXmlNodeType GetType();
	iXmlNode@ GetParent();
	cXmlElement@ ToElement();
	cXmlElement@ GetFirstElement();
	cXmlElement@ GetFirstElement(const tString&in asName);
	cXmlElement@ CreateChildElement(const tString&in asName);
	cXmlText@ ToText();
	cXmlText@ GetFirstText();
	cXmlText@ GetFirstText(const tString&in asText);
	cXmlText@ CreateChildText(const tString&in asText);
	cXmlNodeListIterator@ GetChildIterator();
	tString GetAttributeString(const tString&in  asName,  const tString&in  asDefault);
	float GetAttributeFloat(const tString&in  asName,  float afDefault);
	int GetAttributeInt(const tString&in  asName,  int alDefault);
	bool GetAttributeBool(const tString&in  asName,  bool abDefault);
	cVector2f GetAttributeVector2f(const tString&in  asName,  const cVector2f&in  avDefault);
	cVector3f GetAttributeVector3f(const tString&in  asName,  const cVector3f&in  avDefault);
	cColor GetAttributeColor(const tString&in  asName,  const cColor&in  aDefault);
	void SetAttributeString(const tString&in  asName,  const tString&in  asVal);
	void SetAttributeFloat(const tString&in  asName,  float afVal);
	void SetAttributeInt(const tString&in  asName,  int alVal);
	void SetAttributeBool(const tString&in  asName,  bool abVal);
	void SetAttributeVector2f(const tString&in  asName,  const cVector2f&in  avVal);
	void SetAttributeVector3f(const tString&in  asName,  const cVector3f&in  avVal);
	void SetAttributeColor(const tString&in  asName,  const cColor&in  aVal);


}

class cGuiPopUpColorPicker
{
	void SetKillOnEscapeKey(bool abX);
	bool GetKillOnEscapeKey();
	void SetNextFocusWidget(iWidget@ apNewFocused);
	void SetColor(const cColor&in aX);
	const cColor& GetColor();
	const cVector3f& GetHSB();
	const cColor& GetOldColor();
	void SetShowTransPreview(bool abX);


}

class cPlanef
{
	void FromNormalPoint(const cVector3f &in avNormal,  const cVector3f &in avPoint);
	void FromPoints(const cVector3f &in avPoint0, const cVector3f &in avPoint1,  const cVector3f &in avPoint2);
	void Normalize();
	cVector3f GetNormal( const);

	float a;
	float b;
	float c;
	float d;

}

class cAINodeIterator
{
	bool HasNext();
	cAINode@ Next();


}

class cGuiPopUpMessageBox
{
	void SetKillOnEscapeKey(bool abX);
	bool GetKillOnEscapeKey();
	void SetNextFocusWidget(iWidget@ apNewFocused);


}

class cSmoothInterpolationf
{
	void SetMaxValues(int alMax);
	void Add(const float&in aNewVal);
	void Clear();
	float GetOutput();


}

class iPhysicsJointHinge
{
	const tString& GetName();
	tID GetID();
	int GetUniqueID();
	iPhysicsBody@ GetParentBody();
	iPhysicsBody@ GetChildBody();
	void RemoveBody(iPhysicsBody @apBody);
	const cVector3f& GetPivotPoint();
	const cVector3f& GetPinDir();
	ePhysicsJointType GetType();
	void SetCollideBodies(bool abX);
	bool GetCollideBodies();
	void SetStiffness(float afX);
	float GetStiffness();
	cVector3f GetVelocity();
	cVector3f GetAngularVelocity();
	float GetForceSize();
	float GetDistance();
	float GetAngle();
	void SetBreakable(bool abX);
	bool IsBreakable();
	void SetLimitAutoSleep(bool abX);
	bool GetLimitAutoSleep();
	void SetStickyMinLimit(bool abX);
	void SetStickyMaxLimit(bool abX);
	bool GetStickyMinLimit();
	bool GetStickyMaxLimit();
	void Break();
	bool IsBroken();
	void SetMoveSound(tString&in asName);
	void SetMoveSpeedType(ePhysicsJointSpeed aType);
	void SetMinMoveSpeed(float afX);
	void SetAllowPositionReset(bool abX);
	bool GetAllowPositionReset();
	void SetMinLimitSound(const tString&in asSound,  float afMinSpeed);
	void SetMaxLimitSound(const tString&in asSound,  float afMinSpeed);
	void SetMaxAngle(float afAngle);
	void SetMinAngle(float afAngle);
	float GetMaxAngle();
	float GetMinAngle();


}

class iVertexBuffer
{
	const cVector3f& GetAABBMin();
	const cVector3f& GetAABBMax();


}

class cParticleSystem
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetRemoveWhenDead();
	void SetRemoveWhenDead(bool abX);
	void Kill();
	void KillInstantly();
	void SetColor(const cColor&in aColor);
	void SetFadeAtDistance(bool abX);
	void SetMinFadeDistanceStart(float afX);
	void SetMinFadeDistanceEnd(float afX);
	void SetMaxFadeDistanceStart(float afX);
	void SetMaxFadeDistanceEnd(float afX);
	void SetBrightness(float afX);
	const cColor& GetColor();
	bool GetFadeAtDistance();
	float GetMinFadeDistanceStart();
	float GetMinFadeDistanceEnd();
	float GetMaxFadeDistanceStart();
	float GetMaxFadeDistanceEnd();
	float GetBrightness();


}

class cMatrixf
{
	float GetElement(uint64,  uint64,  const);
	cVector3f GetRight( const);
	void SetRight(const cVector3f&in  avVec);
	cVector3f GetUp( const);
	void SetUp(const cVector3f&in  avVec);
	cVector3f GetForward( const);
	void SetForward(const cVector3f&in  avVec);
	cVector3f GetTranslation( const);
	void SetTranslation(const cVector3f&in avTrans);
	void SetRotation(float afXX,  float afXY,  float afXZ,  float afYX,  float afYY,  float afYZ,  float afZX,  float afZY,  float afZZ);
	void SetRotation(const cMatrixf&in a_mtxRot);
	cMatrixf GetRotation( const);
	cMatrixf GetTranspose( const);


}

class cImGuiFrameGfx
{
	void CopyFrom(const cImGuiFrameGfx &in aFrame);

	cImGuiGfx mGfxBackground;
	cImGuiGfx mGfxCornerTopRight;
	cImGuiGfx mGfxCornerBottomRight;
	cImGuiGfx mGfxCornerBottomLeft;
	cImGuiGfx mGfxCornerTopLeft;
	cImGuiGfx mGfxBorderTop;
	cImGuiGfx mGfxBorderRight;
	cImGuiGfx mGfxBorderBottom;
	cImGuiGfx mGfxBorderLeft;
	cColor mColorCornerTopLeft;
	cColor mColorCornerTopRight;
	cColor mColorCornerBotRight;
	cColor mColorCornerBotLeft;

}

class cLuxSoundExtraData
{

	float mfMinDistance;
	float mfMaxDistance;
	float mfVolume;
	cSoundEntry @mpSoundEntry;

}

class iDepthStencilBuffer
{


}

class cWidgetMainMenu
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	cWidgetMenuItem@ AddMenuItem(const tWString&in asText);
	void AddSeparator();
	void ClearMenuItems();
	void SetParentItem( cWidgetMenuItem@ apParentItem );
	cWidgetMenuItem@ GetParentItem();
	iWidgetMenu@ GetParentMenu();
	void SetPrevAttention(iWidget@ apWidget);
	void SetHighlightedItem( cWidgetMenuItem@ apItem );
	cWidgetMenuItem@ GetHighlightedItem();
	void Hide();
	void SetMustHide(bool abX);
	bool IsSubmenuOpen();
	iWidgetMenu@ GetTopMostMenu();
	void SetTextPos(const cVector3f&in avPos);
	void SetArrowPos(const cVector3f&in avPos);
	void SetCheckPos(const cVector3f&in avPos);
	const cVector3f& GetTextOffset();
	const cVector3f& GetArrowOffset();
	const cVector3f& GetCheckOffset();
	float GetMenuItemWidth();


}

class cGuiMessageData
{

	cVector2f mvPos;
	cVector2f	mvRel;
	int mlVal;
	cKeyPress mKeyPress;
	float	mfVal;
	eGuiMessage mMessage;

}

class cMesh
{
	cSubMesh@ CreateSubMesh(const tString &in asName);
	cSubMesh@ GetSubMesh(uint alIdx);
	int GetSubMeshIndex(const tString &in asName);
	cSubMesh@ GetSubMeshName(const tString &in asName);
	int GetSubMeshNum();
	int GetTriangleCount();
	void SetSkeleton(cSkeleton@ apSkeleton);
	cSkeleton@ GetSkeleton();
	void AddAnimation(cAnimation @apAnimation);
	cAnimation@ GetAnimation(int alIndex);
	cAnimation@ GetAnimationFromName(const tString&in asName);
	int GetAnimationIndex(const tString&in asName);
	void ClearAnimations(bool abDeleteAll);
	int GetAnimationNum();
	void CompileBonesAndSubMeshes();
	float GetBoneBoundingRadius(int alIdx);
	cNode3D@ GetRootNode();
	void AddNode(cNode3D@ apNode);
	int GetNodeNum();
	cNode3D@ GetNode(int alIdx);
	cNode3D@ GetNodeByName(const tString &in asName);


}

class cLuxVoiceCharacterCallback
{


}

class iEntity3D
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();


}

class iLuxUsersHandler
{
	bool IsCurrentUser();
	tString GetCurrentUser();
	bool ChangeCurrentUser();
	int GetChangeUserStatus();
	void ObtainFirstUser();
	bool IsFirstUserObtained();
	int GetResetUserReason();


}

class cSoundEntityIterator
{
	bool HasNext();
	cSoundEntity@ Next();
	cSoundEntity@ PeekNext();


}

class cGuiSkinFont
{
	void SetFontData(iFontData@ apX);
	iFontData@ GetFontData();
	void SetMaterial(iGuiMaterial@ apMaterial);
	iGuiMaterial@ GetMaterial();


}

class iGuiMaterial
{
	const tString& GetName();


}

class cBinaryBuffer
{


}

class cWidgetTabFrame
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	cWidgetTab@ AddTab(const tWString&in asTabCaption);
	void ClearTabs();
	int GetTabNum();
	cWidgetTab@ GetTab(int alIdx);
	cWidgetTab@ GetTab(const tWString&in asTabCaption);
	cWidgetTab@ GetFocusedTab();
	void SetBackgroundZ(float afZ);
	float GetBackgroundZ();
	void SetForegroundZ(float afZ);
	float GetForegroundZ();
	int GetTabOnTopIndex();
	void SetFocusedTab(cWidgetTab@ apTab);
	void SetFocusedTabByIndex(int alIdx);


}

class iXmlNode
{
	const tString& GetValue();
	void SetValue(const tString&in asValue);
	eXmlNodeType GetType();
	iXmlNode@ GetParent();
	cXmlElement@ ToElement();
	cXmlElement@ GetFirstElement();
	cXmlElement@ GetFirstElement(const tString&in asName);
	cXmlElement@ CreateChildElement(const tString&in asName);
	cXmlText@ ToText();
	cXmlText@ GetFirstText();
	cXmlText@ GetFirstText(const tString&in asText);
	cXmlText@ CreateChildText(const tString&in asText);
	cXmlNodeListIterator@ GetChildIterator();


}

class cWidgetFrame
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetDrawFrame(bool abX);
	bool GetDrawFrame();
	void SetDrawBackground(bool abX);
	bool GetDrawBackground();
	void SetBackgroundZ(float afZ);
	float GetBackgroundZ();
	void SetBackGroundColor(const cColor&in aColor);
	const cColor& GetBackGroundColor();
	void ScrollToPosition(const cVector2f&in avPos);


}

class cBeamEnd
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	void SetColor(const cColor &in aColor);
	const cColor& GetColor();


}

class iXmlDocument
{
	bool CreateFromFile(const tWString&in asPath);
	bool Save();
	bool SaveToFile(const tWString&in asPath);
	int GetErrorRow();
	int GetErrorCol();
	const tString& GetValue();
	void SetValue(const tString&in asValue);
	eXmlNodeType GetType();
	iXmlNode@ GetParent();
	cXmlElement@ ToElement();
	cXmlElement@ GetFirstElement();
	cXmlElement@ GetFirstElement(const tString&in asName);
	cXmlElement@ CreateChildElement(const tString&in asName);
	cXmlText@ ToText();
	cXmlText@ GetFirstText();
	cXmlText@ GetFirstText(const tString&in asText);
	cXmlText@ CreateChildText(const tString&in asText);
	cXmlNodeListIterator@ GetChildIterator();
	tString GetAttributeString(const tString&in  asName,  const tString&in  asDefault);
	float GetAttributeFloat(const tString&in  asName,  float afDefault);
	int GetAttributeInt(const tString&in  asName,  int alDefault);
	bool GetAttributeBool(const tString&in  asName,  bool abDefault);
	cVector2f GetAttributeVector2f(const tString&in  asName,  const cVector2f&in  avDefault);
	cVector3f GetAttributeVector3f(const tString&in  asName,  const cVector3f&in  avDefault);
	cColor GetAttributeColor(const tString&in  asName,  const cColor&in  aDefault);
	void SetAttributeString(const tString&in  asName,  const tString&in  asVal);
	void SetAttributeFloat(const tString&in  asName,  float afVal);
	void SetAttributeInt(const tString&in  asName,  int alVal);
	void SetAttributeBool(const tString&in  asName,  bool abVal);
	void SetAttributeVector2f(const tString&in  asName,  const cVector2f&in  avVal);
	void SetAttributeVector3f(const tString&in  asName,  const cVector3f&in  avVal);
	void SetAttributeColor(const tString&in  asName,  const cColor&in  aVal);


}

class cLuxMoveVector
{


}

class cLuxMusicHandler
{
	void Play(const tString &in asFile,  bool abLoop, float afVolume,  float afFreq,  float afVolumeFadeTime,  float afFreqFadeTime,  int alPrio,  bool abResume,  bool abSpecialEffect);
	void Stop(float afFadeTime,  int alPrio);
	void AddDynamicTrack(tID a_idEntity,  int alTrackPrio,  int alMusicPrio,  const tString&in asFile,  float afVolume,  float afFadeInTime,  float afFadeOutTime);
	void RemoveDynamicTrack(tID a_idEntity);


}

class cWidgetGroup
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();


}

class iFontData
{
	float GetHeight();
	void GetWordWrapRows(float afLength, const cVector2f&in avSize, const tWString&in asString,  array<tWString> &inout avRows);
	float GetLength(const cVector2f&in avSize, const tWString&in asString);


}

class cPostEffect_RadialBlur
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();
	void GetParams(float &out afSize,  float &out afAlpha,  float &out afBlurStartDist);
	void SetParams(float afSize,  float afAlpha,  float afBlurStartDist);


}

class cLuxScriptImGui
{

	cImGui@ mpImGui;

}

class cPostEffect_VideoDistortion
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();
	void GetParams(float &out afAmount,  float&out afRandomSeed,  float&out afLineDensity,  float&out afOffsetMul,  cVector2f&out avScreenOffset,  cVector2f&out avScreenBendAmount);
	void SetParams(float afAmount,  float afRandomSeed,  float afLineDensity,  float afOffsetMul,  const cVector2f&in avScreenOffset,  const cVector2f&in avScreenBendAmount);


}

class cMaterial
{
	bool GetForceFullScaleTextures();
	const tString& GetName();


}

class cImGuiWidgetState
{


}

class cRenderSettings
{


}

class tID
{


}

class cPostEffect_ImageTrail
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();
	void GetParams(float &out afAmount);
	void SetParams(float afAmount);


}

class cPostEffect_ImageFadeFX
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();
	void GetParams(float &out afAmount);
	void SetParams(float afAmount,  iTexture@ apFadeTexture,  iTexture@ apColorTexture,  iTexture@ apOffsetTexture);


}

class cLuxScriptClassTimer
{


}

class cFractalNoiseParams
{

	int mlNumOfOctaves;
	float mfStartFrequency;
	float mfStartAmplitude;
	bool mbUseAbsResult;
	eNoiseType mNoiseType;
	float mfOctaveMul;

}

class cXmlNodeListIterator
{
	bool HasNext();
	iXmlNode@ Next();
	iXmlNode@ PeekNext();


}

class cWidgetTab
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	int GetIndex();
	void SetLabelPosX(float afPosX);
	void SetIcon(cGuiGfxElement@ apIcon);
	cWidgetTabFrame@ GetParentTabFrame();
	void SetFocusedTab(bool abX);
	bool IsFocusedTab();


}

class iSoundEvent
{
	const tString& GetName();
	iSoundEventData@ GetData();
	void Start();
	void Stop(bool abPlayEnd);
	bool IsPlaying();
	bool IsLoading();
	void SetPaused(bool abX);
	void SetSpeed(float afSpeed);
	void SetVolume(float afVolume);
	void SetPostionIsHeadRelative(bool abX);
	void SetPosition(const cVector3f &in avPos);
	void SetVelocity(const cVector3f &in avVel);
	void SetReverbActive(bool abX);
	void SetReverbAmount(float afX);
	void SetSpeakerSpread(float afX);
	float GetSpeakerSpread();
	void SetMinDistance(float fMin);
	void SetMaxDistance(float fMax);
	bool Is3D();
	bool IsPriorityReleased();
	bool IsOneShot();
	float GetAudibility();
	float GetElapsedTime();
	float GetTotalTime();
	void SetParam(int alIdx,  float afValue);
	void SetParam(const tString&in asName,  float afValue);
	float GetParam(int alIdx);
	float GetParam(const tString&in asName);
	bool GetPostionIsHeadRelative();
	const cVector3f& GetPosition();
	const cVector3f& GetVelocity();
	bool GetReverbActive();
	float GetReverbAmount();
	float GetMinDistance();
	float GetMaxDistance();
	bool GetPaused();
	float GetSpeed();
	float GetVolume();


}

class cImGuiSliderData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	bool mbUseButtonGfx;
	cImGuiGfx mGfxButton;
	cVector2f mvButtonSize;
	bool mbUseBaseInFocusGfx;
	cImGuiGfx mGfxBaseInFocus;
	bool mbUseButtonInFocusGfx;
	cImGuiGfx mGfxButtonInFocus;
	bool mbUseButtonTriggeredGfx;
	cImGuiGfx mGfxButtonTriggered;
	float mfRepeatDelay;
	float mfDefaultStepSize;

}

class cBillboardGroupIterator
{
	bool HasNext();
	cBillboardGroup@ Next();
	cBillboardGroup@ PeekNext();


}

class cLuxSaveHandler
{
	void SaveGameToFile(const tWString&in asSaveFile);
	void LoadGameFromFile(const tWString&in asSaveFile);
	bool AutoSave(bool abSaveCheckpoint,  bool abDelayed=true);
	bool GetSaveThreadActive();
	bool HasLoadError(tString&out asError);
	void DelayedLoadGameFromFile(const tWString&in asSaveFile,  const tString&in asCallbackObject,  const tString&in asCallbackFunction,  bool abWaitAfterHeader,  bool abWaitAfterLoad);
	void DelayedSaveGameToFile(const tWString&in asSaveFile,  bool abSaveAsCheckpoint);
	bool GetSaveFiles(array<tWString> &inout avNames,  array<tString> &inout avDates,  array<tWString> &inout avFiles);
	void DeleteSaveFile(const tWString&in asSaveFile);
	bool IsDoneLoadingHeader();
	void ContinueLoading(bool abDisableWaits);
	bool IsDoneLoadingSavedGame();
	void StartLoadedGame();


}

class cImGui
{
	void Begin(float afTimeStep);
	void End();
	void DestroyAssets();
	void ClearStates();
	void SendMousePosition(const cVector2l&in avPos,  const cVector2l&in avRel);
	void SendMouseVirtualPosition(const cVector2f&in avPos,  const cVector2f&in avRel);
	void SendAction(eImGuiAction aAction,  bool abDown,  bool abTriggered);
	bool ActionTriggered(eImGuiAction aAction,  bool abCheckIfUsed=false);
	bool ActionIsDown(eImGuiAction aAction,  bool abCheckIfUsed=false);
	const cVector2f& GetMouseRel();
	cVector3f GetMouseRel3D();
	const cVector2f& GetMousePosition();
	cVector3f GetMousePosition3D();
	bool CheckMouseHasMoved();
	void SetFocus(const tString&in asWidgetName);
	void SetAlignment(eImGuiAlign aAlign);
	void SetUIMoveGroupFlags(int alGroupFlags);
	void SetUIMoveWrapMode(eImGuiWrap aWrap);
	int GetStateInt(uint64 alId,  int alDefault=0);
	int GetStateInt(const tString&in asVarName,  int alDefault=0);
	float GetStateFloat(uint64 alId,  float afDefault=0.0f);
	float GetStateFloat(const tString&in asVarName,  float afDefault=0.0f);
	cVector3f GetStateVector3f(uint64 alId,  const cVector3f&in avDefault=0.0f);
	cVector3f GetStateVector3f(const tString&in asVarName,  const cVector3f&in avDefault=cVector3f, 0.0f);
	cColor GetStateColor(uint64 alId,  const cColor&in aDefault=cColor, 1, 1);
	cColor GetStateColor(const tString&in asVarName,  const cColor&in aDefault=cColor, 1, 1);
	void SetStateInt(uint64 alId,  int alVal);
	void SetStateInt(const tString&in asVarName ,  int alVal);
	void SetStateFloat(uint64 alId,  float afVal);
	void SetStateFloat(const tString&in asVarName ,  float afVal);
	void SetStateVector3f(uint64 alId,  const cVector3f&in avVal);
	void SetStateVector3f(const tString&in asVarName ,  const cVector3f&in avVal);
	void SetStateColor(uint64 alId,  const cColor&in aVal);
	void SetStateColor(const tString&in asVarName ,  const cColor&in aVal);
	void IncStateInt(uint64 alId,  int alVal);
	void IncStateInt(const tString&in asVarName ,  int alVal);
	void IncStateFloat(uint64 alId,  float afVal);
	void IncStateFloat(const tString&in asVarName ,  float afVal);
	void IncStateVector3f(uint64 alId,  const cVector3f&in avVal);
	void IncStateVector3f(const tString&in asVarName ,  const cVector3f&in avVal);
	void IncStateColor(uint64 alId,  const cColor&in aVal);
	void IncStateColor(const tString&in asVarName ,  const cColor&in aVal);
	void FadeStateFloat(const tString&in asVarName,  float afGoalVal, float afTime,  eEasing aType=eEasing_QuadInOut,  bool abReplaceIfExist=true);
	void FadeStateVector3f(const tString&in asVarName,  const cVector3f&in avGoalVal, float afTime,  eEasing aType=eEasing_QuadInOut,  bool abReplaceIfExist=true);
	void FadeStateColor(const tString&in asVarName,  const cColor&in aGoalVal, float afTime,  eEasing aType=eEasing_QuadInOut,  bool abReplaceIfExist=true);
	void StopFade(const tString&in asVarName);
	bool FadeOver(const tString&in asVarName);
	bool IsFading(const tString&in asVarName);
	float FadeOscillateFloat(const tString&in asVarName,  float afStart,  float afGoal,  float afTime,  eEasing aType=eEasing_QuadInOut);
	cVector3f FadeOscillateVector3f(const tString&in asVarName,  const cVector3f&in avStart,  const cVector3f&in avGoal,  float afTime,  eEasing aType=eEasing_QuadInOut);
	cColor FadeOscillateColor(const tString&in asVarName,  const cColor&in aStart,  const cColor&in aGoal,  float afTime,  eEasing aType=eEasing_QuadInOut);
	void AddTimer(const tString&in asName,  float afTime);
	bool RepeatTimer(const tString&in asName,  float afTime);
	void StopTimer(const tString&in asName);
	bool TimerOver(const tString&in asName);
	bool TimerExists(const tString&in asName);
	void SetModColorMul(const cColor&in aCol);
	void SetModTextColorMul(const cColor&in aCol);
	void SetModUseUIPos(bool abX);
	void SetModUseInput(bool abX);
	void SetModUISizeHoriExpansion(float afNeg,  float afPos);
	void SetModUISizeVertExpansion(float afNeg,  float afPos);
	void SetModRotateAngle(float afX);
	void SetModRotateCustomPivot(bool abX);
	void SetModRotatePivot(const cVector2f&in avPivot);
	void SetModGfx(const cImGuiGfx&in aGfx);
	void ResetModifiers();
	void PushModifiers();
	void PopModifiers();
	bool PrevPressed();
	bool PrevBecamePressed();
	bool PrevInFocus();
	const cVector3f& PrevPosition();
	const cVector2f& PrevSize();
	bool PrevBecameInFocus();
	bool PrevWasInFocus();
	bool PrevMouseOver();
	bool PrevUpdated();
	void ClearPrevData();
	void GroupBegin(const cVector3f&in avPos,  const cVector2f&in avSize=0,  bool abClip=false);
	void GroupEnd();
	const cVector3f& GetCurrentGroupPos();
	const cVector2f& GetCurrentGroupSize();
	void ClipAreaBegin(const cVector3f&in avPos,  const cVector2f&in avSize);
	void ClipAreaEnd();
	void LayoutBegin(eImGuiLayout aType,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1,  const cVector2f&in avSpacing=0);
	void LayoutEnd();
	void AddLayoutHorizontalSpace(float afWidth,  float afHeight=0);
	void AddLayoutVerticalSpace(float afHeight);
	void AddItemString(const tWString&in asStr);
	void AddItemStringList(const tWString&in asStrList);
	void AddItemGfx(const cImGuiGfx&in aGfx);
	void ClearItems();
	void DoMouse(const cImGuiGfx &in aGfx,  const cVector3f&in avOffset=0,  const cVector2f&in avSize=-1);
	bool DoButton(const tString&in asName, const tWString&in asText,  const cImGuiButtonData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	bool DoButton(const tString&in asName, const tWString&in asText,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	bool DoRepeatButton(const tString&in asName, const tWString&in asText,  const cImGuiButtonData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	bool DoRepeatButton(const tString&in asName, const tWString&in asText,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	bool DoToggleButton(const tString&in asName, const tWString&in asText,  bool abDefaultChecked,  const cImGuiButtonData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	bool DoToggleButton(const tString&in asName, const tWString&in asText,  bool abDefaultChecked,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	float DoSliderHorizontal(const tString&in asName,  float afDefaultValue,  float afMin,  float afMax,  float afStepSize,  const cImGuiSliderData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	float DoSliderHorizontal(const tString&in asName,  float afDefaultValue,  float afMin,  float afMax,  float afStepSize=-1,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	float DoSliderVertical(const tString&in asName,  float afDefaultValue,  float afMin,  float afMax,  float afStepSize,  const cImGuiSliderData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	float DoSliderVertical(const tString&in asName,  float afDefaultValue,  float afMin,  float afMax,  float afStepSize=-1,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	void DoLabel(const tWString&in asText,  const cImGuiLabelData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1,  float afFontSizeMul=1);
	void DoLabel(const tWString&in asText,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1,  float afFontSizeMul=1);
	void DoImage(const cImGuiGfx&in aGfxImage,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	int DoMultiToggle(const tString&in asName,  int alDefaultSelectedItem,  uint alColumnNum,  const cVector2f&in avSpacing,  const cImGuiButtonData &in aData,  const cVector3f&in avPos,  const cVector2f&in avSize);
	int DoMultiToggle(const tString&in asName,  int alDefaultSelectedItem,  uint alColumnNum,  const cVector2f&in avSpacing,  const cVector3f&in avPos,  const cVector2f&in avSize);
	bool DoCheckBox(const tString&in asName,  const tWString&in asText,  bool abDefaultChecked,  const cImGuiCheckBoxData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	bool DoCheckBox(const tString&in asName,  const tWString&in asText,  bool abDefaultChecked,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	float DoTextFrame(const tWString&in asText, const cVector2f&in avEdgeSpacing,  float afRowSpace,  float afStartRowOffset,  const cImGuiTextFrameData &in aData,  const cVector3f&in avPos,  const cVector2f&in avSize);
	float DoTextFrame(const tWString&in asText, const cVector2f&in avEdgeSpacing,  float afRowSpace,  float afStartRowOffset,  const cVector3f&in avPos,  const cVector2f&in avSize);
	int DoMultiSelect(const tString&in asName,  int alDefaultSelectedItem,  const cImGuiMultiSelectData &in aData,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	int DoMultiSelect(const tString&in asName,  int alDefaultSelectedItem,  const cVector3f&in avPos=0,  const cVector2f&in avSize=-1);
	void DoFrame(const cImGuiFrameData &in aData,  const cVector3f &in avPos=0,  const cVector2f &in avSize=-1);
	void DoFrame(const cVector3f &in avPos=0,  const cVector2f &in avSize=-1);
	void DoWindowStart(const tWString &in asCaption,  const cImGuiWindowData &in aData,  const cVector3f &in avPos=0,  const cVector2f &in avSize=-1,  bool abClip=true);
	void DoWindowStart(const tWString &in asCaption,  const cVector3f &in avPos=0,  const cVector2f &in avSize=-1,  bool abClip=true);
	void DoWindowEnd();
	void DoGauge(const cImGuiGaugeData &in aData,  float afFillAmount,  const cVector3f &in avPos=0,  const cVector2f &in avSize=-1);
	void DoGauge(float afFillAmount,  const cVector3f &in avPos=0,  const cVector2f &in avSize=-1);
	void SetDefaultButton(const cImGuiButtonData &in aData);
	const cImGuiButtonData& GetDefaultButton();
	void SetDefaultSliderHorizontal(const cImGuiSliderData &in aData);
	const cImGuiSliderData& GetDefaultSliderHorizontal();
	void SetDefaultSliderVertical(const cImGuiSliderData &in aData);
	const cImGuiSliderData& GetDefaultSliderVertical();
	void SetDefaultLabel(const cImGuiLabelData &in aData);
	const cImGuiLabelData& GetDefaultLabel();
	void SetDefaultCheckBox(const cImGuiCheckBoxData &in aData);
	const cImGuiCheckBoxData& GetDefaultCheckBox();
	void SetDefaultTextFrame(const cImGuiTextFrameData &in aData);
	const cImGuiTextFrameData& GetDefaultTextFrame();
	void SetDefaultMultiSelect(const cImGuiMultiSelectData &in aData);
	const cImGuiMultiSelectData& GetDefaultMultiSelect();
	void SetDefaultFrame(const cImGuiFrameData &in aData);
	const cImGuiFrameData& GetDefaultFrame();
	void SetDefaultWindow(const cImGuiWindowData &in aData);
	const cImGuiWindowData& GetDefaultWindow();
	void SetDefaultGauge(const cImGuiGaugeData &in aData);
	const cImGuiGaugeData& GetDefaultGauge();
	const tString& GetName();
	cGuiSet@ GetSet();
	void SetShowMouseAutomatically(bool abX);
	bool GetShowMouseAutomatically();
	void SetShowMouse(bool abX);
	bool GetShowMouse();
	bool IsFirstRun();
	void SetDefaultMouse(const cImGuiGfx&in aGfx);
	void SetDefaultFont(const cImGuiFont&in aFont);
	float GetTimeStep();
	float GetTimeCount();
	void SetDrawUIDebugBoxes(bool abX);
	void DrawLine(const cVector2f&in avStart,  const cVector2f&in avEnd, float afZ,  float afThickness=1.0f,  const cColor&in aCol=cColor, 1, 1,  const cImGuiGfx &in aGfx=cImGuiGfx);
	void DrawGfx(const cImGuiGfx &in aGfx,  const cVector3f&in avPos,  const cVector2f&in avSize=-1,  const cColor&in aCol=cColor, 1, 1,  const cColor&in aColTopLeft=cColor, 1, 1,  const cColor&in aColTopRight=cColor, 1, 1,  const cColor&in aColBotRight=cColor, 1, 1,  const cColor&in aColBotLeft=cColor, 1, 1);
	void DrawAlignedGfx(const cImGuiGfx &in aGfx,  const cVector3f &in avPos,  eImGuiAlign aAlignment,  const cVector2f&in avSize=-1,  const cColor &in aCol=cColor, 1, 1,  const cColor&in aColTopLeft=cColor, 1, 1,  const cColor&in aColTopRight=cColor, 1, 1,  const cColor&in aColBotRight=cColor, 1, 1,  const cColor&in aColBotLeft=cColor, 1, 1);
	void DrawFont(const tWString&in asText,  const cImGuiFont &in aFont,  const cVector3f&in avPos,  eFontAlign aAlign,  const cVector2f&in avSizeMul=1,  const cColor&in aColMul=cColor, 1, 1);
	void DrawFrame(const cImGuiFrameGfx &in aGfx,  const cVector3f&in avPos,  const cVector2f&in avSize=-1,  const cColor&in aCol=cColor, 1, 1);
	void AddLineStripVertex(const cVector2f &in avVertex);
	void DrawAndClearLineStrip(float afZ,  float afThickness,  const cColor &in aCol=cColor_White,  const cImGuiGfx &in aGfx=cImGuiGfx);
	bool CheckCurrentWidgetBecamePressed(const tString&in asName,  bool abCheckConfirm,  bool abCheckMouseLeft);
	bool CheckCurrentWidgetIsPressed(const tString&in asName,  bool abCheckConfirm,  bool abCheckMouseLeft);
	bool CheckIsPressedAction(bool abCheckConfirm,  bool abCheckMouseLeft);
	bool CheckBecamePressedAction(bool abCheckConfirm,  bool abCheckMouseLeft);
	int GetDefaultOrCurrentInt(uint64 alDefaultVarId,  uint64 alCurrentVarId,  int alDefaultValue);
	float GetDefaultOrCurrentFloat(uint64 alDefaultVarId,  uint64 alCurrentVarId,  float afDefaultValue);
	void LockMouseFocus();
	bool MouseFocusIsLocked();
	cVector2f CalcWidgetSize(const cVector2f&in avArgSize,  const cVector2f&in avDefaultSize);
	void SetupWidgetRect(const cVector3f&in avInPos,  const cVector2f&in avInSize,  cVector3f&out avOutPos,  cVector2f&out avOutSize,  const cVector2f&in avDefaultSize,  const cImGuiGfx &in aGfx);
	void SetUpAlignment(const cVector3f &in avPos,  const cVector2f &in avSize,  cVector3f &out avAlignedPos,  eImGuiAlign aAlignment);
	bool CheckMouseOver(const cVector3f&in avPos,  const cVector2f &in avSize);
	cVector2f GetUsedGfxSize(const cImGuiGfx&in aGfx,  const cVector2f&in avCustomSize);
	cVector2f GetGfxSize(const cImGuiGfx&in aGfx);
	float GetFontLength(const cImGuiFont&in aFont,  float afSizeMul,  const tWString&in asText);
	void GetFontWordWrapRows(const cImGuiFont&in aFont,  float afSizeMul,  const tWString&in asText,  float afLineWidth,  array<tWString> &out avLines,  array<bool> &out avRowEndedWithNewLine=array<bool>);
	const cVector2f& GetUsedFontSize(const cImGuiFont&in aFont);
	uint64 GetIdFromNameAndCheckCollision(const tString&in asName,  int alTableIdx);
	void DrawAll();


}

class cPrepParserVarContainer
{


}

class cLuxForceEmitter
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void SetActive(bool abX);
	bool IsActive();
	void SetCharacterBody(iCharacterBody @apCharBody,  const cVector3f &in avOffset,  bool abAtFoot);
	void SetRadius(float afX);
	void SetForce(float afX);
	void SetFreq(float afX);
	void FadeIn(float afTime);
	void FadeOut(float afTime);
	void SetMinForceSpeed(float afX);
	void SetMaxForceSpeed(float afX);


}

class cImGuiFade
{


}

class cRendererCallbackFunctions
{
	void SetFlatProjection(const cVector2f &in avSize=1, float afMin=-100, float afMax=100);
	void SetFlatProjectionMinMax(const cVector3f &in avMin, const cVector3f &in avMax);
	void SetNormalFrustumProjection();
	void SetFrameBuffer(iFrameBuffer @apFrameBuffer,  bool abUsePosAndSize=false);
	void ClearFrameBuffer(uint aFlags,  bool abUsePosAndSize);
	void DrawQuad(	const cVector3f&in  aPos,  const cVector2f&in  avSize,  const cVector2f&in  avMinUV=0,  const cVector2f&in  avMaxUV=1,  bool abInvertY=false,  const cColor&in  aColor=cColor, 1, 1,  );
	bool SetDepthTest(bool abX);
	bool SetDepthWrite(bool abX);
	bool SetDepthTestFunc(eDepthTestFunc aFunc);
	bool SetCullActive(bool abX);
	bool SetCullMode(eCullMode aMode);
	bool SetStencilActive(bool abX);
	bool SetScissorActive(bool abX);
	bool SetScissorRect(const cVector2l&in  avPos,  const cVector2l&in  avSize,  bool abAutoEnabling);
	bool SetScissorRect(const cRect2l&in  aClipRect,  bool abAutoEnabling);
	bool SetChannelMode(eMaterialChannelMode aMode);
	bool SetBlendMode(eMaterialBlendMode aMode);
	bool SetProgram(iGpuProgram @apProgram);
	void SetTexture(int alUnit,  iTexture @apTexture);
	void SetTextureRange(iTexture @apTexture,  int alFirstUnit,  int alLastUnit = kMaxTextureUnits-1);
	void SetVertexBuffer(iVertexBuffer @apVtxBuffer);
	void SetMatrix(const cMatrixf&in apMatrix);
	void SetModelViewMatrix(const cMatrixf&in  a_mtxModelView);
	void DrawCurrent(eVertexBufferDrawType aDrawType = eVertexBufferDrawType_LastEnum,  int alStart=0,  int alCount=-1);
	void DrawWireFrame(iVertexBuffer @apVtxBuffer,  const cColor &in aColor,  int alStart=0,  int alCount=-1);
	iLowLevelGraphics@ GetLowLevelGfx();


}

class iLuxRichPresenceHandler
{
	void CreateRichPresence(int alID,  const tString&in asName);
	void RegisterRichPresences();
	void SetCurrentRichPresence(int alID);
	int GetCurrentRichPresence();
	tString GetRichPresenceDescription(int alID);
	tString GetRichPresenceName(int alID);


}

class cLuxVoiceSceneInstance
{


}

class cScriptStringIntMap
{
	void Set(const tString &in asStr,  int alVal);
	int Get(const tString &in asStr);
	void Erase(const tString &in asStr);
	bool Exists(const tString &in asStr);
	void Clear();
	int Size();
	void ElementValuesToArray(array<int> &out avOutValues);
	void ElementNamesToArray(array<tString> &out avOutNames);


}

class cLuxDialogResponseCondition
{


}

class cVerletParticle
{
	void SetPosition(const cVector3f&in avPos,  bool abSetPrevPos);
	void AddPosition(const cVector3f&in avAdd,  bool abSetPrevPos);
	const cVector3f& GetPosition( const);
	void SetPrevPosition(const cVector3f&in avPos);
	const cVector3f& GetPrevPosition( const);
	void SetSmoothPosition(const cVector3f&in avPos);
	const cVector3f& GetSmoothPosition( const);
	void AddForce(const cVector3f&in avForce);
	void SetInvMass(float afInvMass);
	float GetInvMass( const);


}

class iRopeEntity
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	iPhysicsRope@ GetPhysicsRope();
	void SetMaterial(cMaterial@ apMaterial);
	void SetColor(const cColor &in aColor);
	const cColor& GetColor();
	void SetRadius(float afX);
	float GetRadius();


}

class cEnvironmentParticles_ClipArea
{


}

class cImGuiTimer
{


}

class cTerrain
{
	bool GetWorldPosHeightAndNormal(const cVector3f&in avPosition,  float &out afHeight,  cVector3f &out avNormal);
	void GetStartAndSizeInTextureGrid(const cVector2f&in avStart,  const cVector2f&in avSize,  cVector2l&out avGridStart,  cVector2l&out avGridSize);
	void SetCheapMaterial(const tString&in asCheapMaterial,  float afCheapMaterialMul);
	void SetGeometryPatchSize(int alX);
	int GetGeometryPatchSize();
	void SetTexturePatchSize(int alX);
	int GetTexturePatchSize();
	int GetGeometryGridNum();
	int GetTextureGridNum();
	void SetUnitSize(float afX);
	float GetUnitSize();
	void SetMaxHeight(float afX);
	float GetMaxHeight();
	void SetChangePatchLevelDist(float afX);
	float GetChangePatchLevelDist();
	int GetHeightMapSize();
	float GetMaterialSpecularPower();


}

class cPostEffectComposite
{
	void AddPostEffect(iPostEffect@ apPostEffect,  int alPrio);
	int GetPostEffectNum();
	iPostEffect@ GetPostEffect(int alIdx);
	void RemovePostEffect(iPostEffect@ apPostEffect);
	iPostEffect@ GetPostEffectFromType(const tString&in asType);
	bool HasActiveEffects();


}

class iPhysicsJointSlider
{
	const tString& GetName();
	tID GetID();
	int GetUniqueID();
	iPhysicsBody@ GetParentBody();
	iPhysicsBody@ GetChildBody();
	void RemoveBody(iPhysicsBody @apBody);
	const cVector3f& GetPivotPoint();
	const cVector3f& GetPinDir();
	ePhysicsJointType GetType();
	void SetCollideBodies(bool abX);
	bool GetCollideBodies();
	void SetStiffness(float afX);
	float GetStiffness();
	cVector3f GetVelocity();
	cVector3f GetAngularVelocity();
	float GetForceSize();
	float GetDistance();
	float GetAngle();
	void SetBreakable(bool abX);
	bool IsBreakable();
	void SetLimitAutoSleep(bool abX);
	bool GetLimitAutoSleep();
	void SetStickyMinLimit(bool abX);
	void SetStickyMaxLimit(bool abX);
	bool GetStickyMinLimit();
	bool GetStickyMaxLimit();
	void Break();
	bool IsBroken();
	void SetMoveSound(tString&in asName);
	void SetMoveSpeedType(ePhysicsJointSpeed aType);
	void SetMinMoveSpeed(float afX);
	void SetAllowPositionReset(bool abX);
	bool GetAllowPositionReset();
	void SetMinLimitSound(const tString&in asSound,  float afMinSpeed);
	void SetMaxLimitSound(const tString&in asSound,  float afMinSpeed);
	void SetMaxDistance(float afX);
	void SetMinDistance(float afX);
	float GetMaxDistance();
	float GetMinDistance();


}

class cVector4f
{
	float GetElement(uint64 alIdx,  const);
	void SetElement(uint64 alIdx, float,  const);
	float SqrLength( const);
	float Length( const);
	float Normalize();

	float x;
	float y;
	float z;
	float w;

}

class cGuiPopUpFilePicker
{
	void SetKillOnEscapeKey(bool abX);
	bool GetKillOnEscapeKey();
	void SetNextFocusWidget(iWidget@ apNewFocused);
	void Init();
	void SetSaveFileDest( tWString&in asFileName );


}

class cWidgetCollapsiblePane
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	bool IsExpanded();
	void SetExpanded(bool abX);


}

class cAINode
{
	const cVector3f& GetPosition();
	const tString& GetName();
	int GetID();


}

class iPhysicsController
{


}

class cLuxSoundscapeHandler
{
	const tString& GetCurrentSoundPrefix();


}

class cFrameSubImage
{


}

class cWidgetButton
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetImage(cGuiGfxElement@ apImage,  bool abDestroyImage=true);
	cGuiGfxElement@ GetImage();
	void SetRepeatActive(bool abX);
	bool GetRepeatActive();
	void SetRepeatFreq(float afFreq);
	void SetToggleable(bool abX);
	bool IsToggleable();
	void SetPressed(bool abX,  bool abGenCallback=true);
	bool IsPressed();


}

class cBoundingVolume
{
	cVector3f GetMax();
	cVector3f GetMin();
	const cVector3f& GetLocalMax();
	const cVector3f& GetLocalMin();
	void SetLocalMinMax(const cVector3f&in mvMin, const cVector3f&in mvMax,  bool abUpdateSize = true);
	void SetPosition(const cVector3f&in avPos);
	cVector3f GetPosition();
	void SetSize(const cVector3f&in avSize,  bool abUpdateSize = true);
	cVector3f GetSize();
	void SetTransform(const cMatrixf &in a_mtxTransform,  bool abUpdateSize = true);
	const cMatrixf& GetTransform();
	cVector3f GetLocalCenter();
	cVector3f GetWorldCenter();
	float GetRadius();


}

class cProcAnimationTrack
{
	int GetEntityIndex();
	void SetType(eProcAnimType aType);
	void SetAxes(uint alAxisFlags);
	void SetOffsetMin(float afX);
	void SetOffsetMax(float afX);
	void SetReverseMotion(bool abX);
	void SetEasing(eEasing aFunc);
	void SetCycles(int alX);
	void SetNoiseAmount(float afX);
	void SetNoiseFreq(int alX);
	void SetApplyNoiseBefore(bool abX);
	eProcAnimType GetType();
	uint GetAxes();
	float GetOffsetMin();
	float GetOffsetMax();
	bool GetReverseMotion();
	eEasing GetEasing();
	int GetCycles(int alX);
	int GetNoiseAmount();
	float GetNoiseFreq();
	bool GetApplyNoiseBefore();


}

class iEyeTracker
{
	cVector2f GetGazePosition();
	cVector2f GetFixationPosition();
	cVector3f GetLeftEyePosition();
	cVector3f GetRightEyePosition();
	bool IsUserPresent();
	bool IsTracking();
	bool IsTrackingGaze();
	bool IsFixating();
	bool HasBlinked();
	cVector2f GetDisplaySize();
	cVector2f GetScreenBounds();


}

class cWidgetComboBox
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetSelectedItem(int alX, bool abMoveList=false,  bool abGenCallback=true);
	int GetSelectedItem();
	void SetCanEdit(bool abX);
	bool GetCanEdit();
	void SetMaxShownItems(int alX);
	int GetMaxShownItems();


}

class iMaterialType
{


}

class cLightMaskBoxListIterator
{
	bool HasNext();
	cLightMaskBox@ Next();
	cLightMaskBox@ PeekNext();


}

class cNode3D
{
	bool AddEntity(iEntity3D@ apEntity);
	bool RemoveEntity(iEntity3D@ apEntity);
	void ClearEntities();
	cNode3D@ GetParent();
	cNode3DIterator@ GetChildIterator();
	cNode3D@ CreateChild(const tString &in asName=,  bool abAutoDeleteChildren = true);
	void RemoveChild(cNode3D@ apNode);
	void SetParent(cNode3D@ apNode);
	void AddChild(cNode3D@ apChild);
	const tString& GetName();
	void SetActive(bool abX);
	bool IsActive();
	int SetVisible(bool abX,  bool abCascade);
	cVector3f GetLocalPosition();
	const cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	const cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform,  bool abSetChildrenUpdated=true);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	void AddRotation(const cVector3f&in avRot,  eEulerRotationOrder aOrder);
	void AddRotation(const cQuaternion&in aqRotation,  bool abNormalize = true);
	void NormalizeRotation();
	void AddScale(const cVector3f&in avScale);
	void AddTranslation(const cVector3f&in avTrans);
	bool GetUsePreAnimTransform();
	bool GetUsePostAnimTransform();
	const cMatrixf& GetPreAnimTransform();
	const cMatrixf& GetPostAnimTransform();
	void SetUsePreTransform(bool abX);
	void SetUsePostTransform(bool abX);
	void SetPreTransform(const cMatrixf&in a_mtxTransform);
	void SetPostTransform(const cMatrixf&in a_mtxTransform);
	void ApplyPreAnimTransform(bool abSetChildrenUpdated);
	void ApplyPostAnimTransform(bool abSetChildrenUpdated);
	void SetCustomFlags(int alX);
	int GetCustomFlags();
	void UpdateMatrix(bool abSetChildrenUpdated);
	void UpdateEntityChildren();


}

class cWidgetListBox
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();


}

class cLuxArea
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void MoveLinearTo(const cVector3f&in avGoal,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed,  const tString&in asCallback="");
	void StopMove();
	iPhysicsBody@ GetAreaBody();
	void SetCheckCollision(bool abX);
	bool GetCheckCollision();
	void SetupCheckCollision(bool abCheckIfCenterInSide,  bool abCheckDynamic,  bool abCheckStatic,  bool abCheckCharacters);
	const cVector3f& GetSize();


}

class cNode3DIterator
{
	bool HasNext();
	cNode3D@ Next();
	cNode3D@ PeekNext();


}

class cLuxDialogHandler
{
	void Begin(const tString &in asName);
	void End(const tString&in asStartBranch);
	void SetCallbackFunc(const tString&in asFunc);
	void GetCharactersInSubject(const tString&in asSubject,  array<tString> &inout avOutCharacters);
	void AddBranch(const tString&in asName,  const tString&in asNextBranch);
	void AddBranchSubject(const tString&in asSubject,  const tString&in asCallback);
	void AddBranchPause(float afTime,  const tString&in asCallback);
	void AddBranchEvent(eLuxDialogBranchEvent aType,  float afVar,  const tString&in asVar,  const tString&in asNewBranch,  bool abOnlyCheckEndOfSubject);
	void SetResponseTimeLimit(float afTime);
	void AddResponseOption(const tString &in asEntry,  const tString&in asBranch, int alId,  const tString&in asCallback);
	void AddResponseCondition(eLuxDialogOptionCondition aCondition,  const tString&in asVarName,  int alValue);
	void AddResponseEvent(eLuxDialogOptionEvent aEvent,  const tString&in asVarName,  int alValue);
	bool CharacterIsActive(const tString&in asName);
	void Stop(const tString &in asName);
	void StopAll();
	tString GetCharacterScene(const tString&in asCharacterName);
	void ReturnResponseSelectChoice(int alSelectedOption);
	void SetVar(const tString&in asName,  int alX);
	void IncVar(const tString&in asName,  int alX);
	int GetVar(const tString&in asName);


}

class cLuxProp
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void SetDisableCollisionUntilOutSidePlayer(bool abX);
	void EnableCharCollisionUntilStopped();
	void MoveLinearTo(const cVector3f&in avGoal,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed,  const tString&in asCallback="");
	void MoveAngularTo(const cMatrixf&in a_mtxGoal,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed,  bool abUseOffset,  const cVector3f &in avWorldOffset,  const cVector3f &in avLocalOffset,  const tString&in asCallback="");
	void RotateAtSpeed(	float afAcc,  float afGoalSpeed,  const cVector3f&in avAxis,  bool abResetSpeed,  bool abUseOffset,  const cVector3f &in avWorldOffset,  const cVector3f &in avLocalOffset);
	void StopMove();
	void FadeInMeshEntity(float afTime);
	void Break();
	cLuxProp@ GetAttachmentParent();
	void SetAttachmentParent(cLuxProp @apProp);
	void AddAndAttachProp(const tString&in asName,  const tString&in asFileName,  const cMatrixf&in a_mtxOffset);
	bool DestroyAttachedProp(const tString&in asName);
	bool RemoveAttachedProp(cLuxProp @apProp);
	bool HasAttachedProp();
	void SetLiquidAmount(float afAmount);
	void FadeLiquidAmountTo(float afTargetAmount,  float afTime);
	void SetScriptCollisionCallbackActive(bool abX);
	bool GetScriptCollisionCallbackActive();
	iPhysicsJoint@ GetJoint(int alIdx);
	int GetJointNum();
	iLight@ GetLight(int alIdx);
	int GetLightNum();
	cParticleSystem@ GetParticleSystem(int alIdx);
	int GetParicleSystemNum();
	cBillboard@ GetBillboard(int alIdx);
	int GetBillboardNum();
	cSoundEntity@ GetSoundEntity(int alIdx);
	int GetSoundEntityNum();
	cEntityBodyExtraData@ GetBodyExtraData(int alIdx);
	void SetHealth(float afX);
	float GetHealth();
	bool IsMoving();
	bool GetStaticPhysics();
	void SetStaticPhysics(bool abX);
	void EnableBodyCollisionCallback();
	void CreateAndSetupGui(tString asSubmesh,  const cColor&in aColorMul,  const cColor&in aClearColor,  const cColor&in aOfflineClearColor,  const cVector2f&in avScreenSize);
	void DisableSubMeshMerge(tString asSubmesh);
	bool SetGuiIsFocused(bool abX,  bool abShowMouse=true);
	bool IsGuiFocused();
	void ForceGuiCacheUpdate();
	void SetGuiCacheAtScreenSize(float afX);
	void SetGuiUpdateWhenOutOfView(bool abX);
	bool HasActiveGui();
	void SetOnGuiFunction(const tString&in asFunction);
	void SetGuiActive(bool abX,  float afFadeTime=0.0f);
	bool IsGuiActive();
	cLuxGuiSet@ GetGuiSet();
	void SetGuiSetUseInput(bool);
	bool GetGuiSetUseInput();
	void SetGuiVariableFPS(float afX);
	float GetGuiVariableFPS();
	void SetAllowMapTransfer(bool);
	bool GetAllowMapTransfer();


}

class cAnimationState
{
	const tString& GetName();
	void Update(float afTimeStep);
	bool DataIsInMeshFile();
	bool IsFading();
	bool IsOver();
	void FadeIn(float afTime);
	void FadeOut(float afTime);
	void SetLength(float afLength);
	float GetLength();
	void SetWeight(float afWeight);
	float GetWeight();
	void SetSpeed(float afSpeed);
	float GetSpeed();
	void SetBaseSpeed(float afSpeed);
	float GetBaseSpeed();
	void SetTimePosition(float afPosition);
	float GetTimePosition();
	float GetPreviousTimePosition();
	void SetRelativeTimePosition(float afPosition);
	float GetRelativeTimePosition();
	bool IsActive();
	void SetActive(bool abActive);
	bool IsLooping();
	void SetLoop(bool abLoop);
	bool IsPaused();
	void SetPaused(bool abPaused);
	void AddTimePosition(float afAdd);
	cAnimation@ GetAnimation();
	float GetFadeStep();
	void SetFadeStep(float afX);


}

class iLuxEntity
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);


}

class cLuxBarkState
{


}

class cLuxDialogSubject
{


}

class cWidgetMultiPropertyListBox
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void AddColumn(const tString&in asName,  const int alIndex,  eFontAlign aAlign=eFontAlign_Left);
	void SetColumnWidth(const int alIdx,  float afWidth);
	float GetColumnWidth(int alIdx);
	cVector3f GetItemStartPos();
	cVector3f GetItemPosOnList(cWidgetItem@ apItem,  int alColumn);


}

class cLuxBackboneTail
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void Setup(array<tString> &in avBoneNames);
	void LoadFromVariables(cResourceVarsObject@ apVars);
	void SetStiffness(float afX);
	void SetMaxTrailSize(int alX);
	void SetAddTrailFreq(float afX);


}

class cClothEntityIterator
{
	bool HasNext();
	cClothEntity@ Next();
	cClothEntity@ PeekNext();


}

class cExposureArea
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	void SetExposure(float afX);
	void SetWhiteCut(float afX);
	void SetTransitionTime(float afX);
	float GetExposure(float afX);
	float GetWhiteCut(float afX);
	float GetTransitionTime(float afX);


}

class iParticleEmitter
{


}

class iLuxHeroStatsHandler
{
	void CreateHeroStat(int alID,  const tString&in asName);
	void RegisterHeroStats();
	void IncreaseHeroStatAmount(int alID, int alAmount);
	void SetHeroStatAmount(int alID, int alAmount);
	int GetHeroStatAmount(int alID);
	tString GetHeroStatName(int alID);
	tString GetHeroStatDescription(int alID);


}

class cLuxLiquidArea
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void MoveLinearTo(const cVector3f&in avGoal,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed,  const tString&in asCallback="");
	void StopMove();
	iPhysicsBody@ GetAreaBody();


}

class iPhysicsJointBall
{
	const tString& GetName();
	tID GetID();
	int GetUniqueID();
	iPhysicsBody@ GetParentBody();
	iPhysicsBody@ GetChildBody();
	void RemoveBody(iPhysicsBody @apBody);
	const cVector3f& GetPivotPoint();
	const cVector3f& GetPinDir();
	ePhysicsJointType GetType();
	void SetCollideBodies(bool abX);
	bool GetCollideBodies();
	void SetStiffness(float afX);
	float GetStiffness();
	cVector3f GetVelocity();
	cVector3f GetAngularVelocity();
	float GetForceSize();
	float GetDistance();
	float GetAngle();
	void SetBreakable(bool abX);
	bool IsBreakable();
	void SetLimitAutoSleep(bool abX);
	bool GetLimitAutoSleep();
	void SetStickyMinLimit(bool abX);
	void SetStickyMaxLimit(bool abX);
	bool GetStickyMinLimit();
	bool GetStickyMaxLimit();
	void Break();
	bool IsBroken();
	void SetMoveSound(tString&in asName);
	void SetMoveSpeedType(ePhysicsJointSpeed aType);
	void SetMinMoveSpeed(float afX);
	void SetAllowPositionReset(bool abX);
	bool GetAllowPositionReset();
	void SetMinLimitSound(const tString&in asSound,  float afMinSpeed);
	void SetMaxLimitSound(const tString&in asSound,  float afMinSpeed);
	void SetConeLimits(float afMaxConeAngle,  float afMaxTwistAngle);
	cVector3f GetAngles();
	float GetMaxConeAngle();
	float GetMaxTwistAngle();


}

class cSkeleton
{


}

class cMeshEntity
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	cMesh@ GetMesh();
	void UpdateAnimation(float afTimeStep);
	void PostUpdateLogic(float afTimeStep);
	cSubMeshEntity@ GetSubMeshEntity(uint alIdx);
	cSubMeshEntity@ GetSubMeshEntityName(const tString &in asName);
	int GetSubMeshEntityIndex(const tString &in asName);
	int GetSubMeshEntityNum();
	cAnimationState@ GetAnimationState(int alIndex);
	int GetAnimationStateIndex(const tString &in asName);
	cAnimationState@ GetAnimationStateFromName(const tString &in asName);
	int GetAnimationStateNum();
	void Play(int alIndex, bool abLoop,  bool bStopPrev);
	void PlayName(const tString &in asName, bool abLoop,  bool bStopPrev);
	void Stop();
	void PlayFadeTo(int alIndex, bool abLoop,  float afTime);
	void PlayFadeToName(const tString &in asName, bool abLoop,  float afTime);
	bool AnimationIsOver(const tString &in asName);
	void SetNormalizeAnimationWeights(bool abX);
	bool GetNormalizeAnimationWeights();
	cProcAnimation@ CreateProcAnimation(const tString&in asName);
	cProcAnimation@ GetProcAnimationFromName(const tString&in asName);
	cProcAnimation@ GetProcAnimation(int alIdx);
	int GetProcAnimationNum();
	void ProcPlayName(const tString&in asName, float afAnimTime,  bool abLoop,  bool abStopPrev);
	void ProcPlay(int alIdx, float afAnimTime,  bool abLoop,  bool abStopPrev);
	void ProcStop();
	void ProcPlayFadeTo(int alIndex, float afAnimTime, bool abLoop,  float afFadeTime);
	void ProcPlayFadeToName(const tString &in asName, float afAnimTime, bool abLoop,  float afFadeTime);
	cNode3D@ GetBoneStateRoot();
	cBoneState@ GetBoneState(int alIndex);
	int GetBoneStateIndex(const tString &in asName);
	int GetBoneStateIndexFromPtr(cBoneState@ apBoneState);
	cBoneState@ GetBoneStateFromName(const tString &in asName);
	int GetBoneStateNum();
	cNode3D@ AddSocket(const tString&in asName,  const tString&in asAttachedBoneName,  const cMatrixf&in a_mtxLocalTransform,  bool abRescale=true);
	cNode3D@ GetSocket(const tString&in asName);
	void ClearSockets();
	int GetSocketNum();
	cNode3D@ GetSocketFromIndex(int alIdx);
	void SetSkeletonPhysicsActive(bool abX);
	bool GetSkeletonPhysicsActive();
	void SetSkeletonPhysicsCanSleep(bool abX);
	bool GetSkeletonPhysicsCanSleep();
	float GetSkeletonPhysicsWeight();
	void SetSkeletonPhysicsWeight(float afX);
	void FadeSkeletonPhysicsWeight(float afTime);
	void SetSkeletonCollidersActive(bool abX);
	bool GetSkeletonCollidersActive();
	void AlignBodiesToSkeleton(bool abCalculateSpeed);
	cActorAnimController@ GetActorAnimController();
	cMatrixf CalculateTransformFromSkeleton();
	cMatrixf CalculateTransformFromSkeleton(cVector3f&out apPostion, cVector3f&out apAngles);
	bool CheckColliderShapeCollision(iPhysicsWorld @apWorld,  iCollideShape @apShape,  const cMatrixf &in a_mtxShape,  array<cVector3f> &inout avPosList,  array<int> &inout avBoneIndexList);
	void ResetGraphicsUpdated();
	void SetDisableSleep(bool abX);
	cNode3D@ GetNodeState(int alIndex);
	int GetNodeStateIndex(const tString &in asName);
	cNode3D@ GetNodeStateFromName(const tString &in asName);
	int GetNodeStateNum();
	bool IsVisible();
	void SetVisible(bool abVisible);
	void SetStatic(bool abX);
	bool IsStatic();
	void SetIsOccluder(bool abX);
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	void SetDiffuseColorMul(const cColor&in aColor);
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor();
	void SetCoverageAmount(float afX);
	float GetCoverageAmount();
	void SetLiquidAmount(float afX);
	float GetLiquidAmount();
	void UseAutomaticLiquidAmount();


}

class iPhysicsCloth
{
	const tString& GetName();
	int GetUniqueID();
	void SetActive(bool abX);
	bool GetActive();
	void RemoveAttachedBody(iPhysicsBody @apBody,  bool abRemoveContainerFromBody);
	void SetGravityForce(const cVector3f&in avX);
	const cVector3f& GetGravityForce();
	void SetDamping(float afX);
	float GetDamping();
	void SetParticleRadius(float afX);
	float GetParticleRadius();
	void SetSlideAmount(float afX);
	float GetSlideAmount();
	void SetCollide(bool abX);
	bool GetCollide();
	void SetSleeping(bool abX);
	int GetParticleNum();
	cVerletParticle@ GetParticle(int alIdx);
	int GetUpdateCount( const);
	void IncUpdateCount();
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength);
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength,  float afStiffness);
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afMinLength,  float afMaxLength,  float afStiffness);
	void UpdateLengthConstraintStretch(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength,  float afStiffness);
	void UpdateParticleCollisionConstraint(cVerletParticle@ apPart,  const cVector3f &in avPrevPos,  float afRadius);
	void ApplyForceToParticles(const cVector3f &in avForce,  cVerletParticle@ apBaseParticle,  const cVector3f &in avOffset = 0);
	void AttachToLine(cVector3f avStart,  cVector3f avEnd,  int alRow,  int alColumnStride,  bool abFixedPositions = false);
	cVector2f GetClothSize();
	cVector3f GetWindForce();
	void SetWindForce(const cVector3f avWindForce);


}

class iFrameBuffer
{


}

class cLuxCritterHandler
{


}

class iLowLevelGraphics
{
	void SetVsyncMode(eVSyncMode aMode);
	void SetDisplayMode(eDisplayMode aMode);
	cVector2f GetScreenSizeFloat();
	const cVector2l& GetScreenSizeInt();
	cVector2l GetWindowPosition();
	void SetBrightness(float afX);
	void DrawLine(const cVector3f&in avBegin,  const cVector3f&in avEnd,  const cColor&in aCol);
	void DrawBoxMinMax(const cVector3f&in avMin,  const cVector3f&in avMax,  const cColor&in aCol);
	void DrawSphere(const cVector3f&in avPos,  float afRadius,  const cColor&in aCol,  int alSegments=32);
	void DrawLineQuad(const cVector3f &in avPos, const cVector2f &in avSize,  const cColor&in aCol);
	tString GetGraphicsInfo();
	int GetNumDisplays();


}

class cLuxEffect
{
	void SetActive(bool abX);
	bool IsActive();

	int mlId;

}

class cLuxVisibilityPortal
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void MoveLinearTo(const cVector3f&in avGoal,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed,  const tString&in asCallback="");
	void StopMove();
	iPhysicsBody@ GetAreaBody();


}

class cLuxDialogBranch
{


}

class cImGuiTextFrameData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;

}

class cGuiSetEntity
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();


}

class cLuxInputHandler
{
	void CreateAction(const tString&in asName,  int alId,  bool abConfigurable,  const tString&in asCat);
	void CreateDebugAction(const tString&in asName,  int alId);
	void CreateAnalogAction(const tString&in asName,  int alId,  bool abConfigurable,  const tString&in asCat,  int alAxis,  float afMul,  int alAnalogId);
	void CreateAnalogGamepadAction(const tString&in asName,  int alId,  const tString&in asCat,  int alAnalogId,  float afSmoothness,  int alDirectionLimit);
	void CreateActionInput(const tString&in asInputType,  int alActionId);
	void CreateAnalogGamepadActionInput(const tString&in asInputType,  int alActionId);
	void CreateGamepadProfile(const tString&in asName,  const tString&in asPrefix,  array<tString> &in avButtons,  array<tString> &in avAxes,  array<uint> &in avDPad);
	void AddPresetToProfile(const tString&in asProfile,  const tString&in asPreset,  array<int> &in avActions,  array<tString> &in avBindings,  array<bool> &in avAnalog);
	bool IsGamepadConnected();
	void LoadKeyConfig();
	float GetTimeSinceGamepadWasUsed(int alID);
	int GetLastUsedGamepadIndex(float afTimeLimit=-1.0f);
	bool GetGamepadWasLastDeviceUsed();
	const tString& GetLatestKeyPressed();
	bool IsYAxisInverted();
	bool WasAnalogueInputFromPad();
	bool GetSmoothMouse();
	void SetSmoothMouse(bool abX);
	float GetMouseSensitivity();
	void SetMouseSensitivity(float afX);
	float GetGamepadSensitivity();
	void SetGamepadSensitivity(float afX);
	void SetRumble(int alDevice,  float afStrength,  float afDuration);
	void SetGamepadColor(int alDevice,  const cColor&in aColor);
	void SetPrimaryGamepad(int alDevice);
	void ResetSmoothMousePos();
	cVector2f GetSmoothMousePos(const cVector2f&in avRelPosMouse);
	cVector2f GetRelMousePos();
	void SetMaxSmoothMousePos(int alX);
	void SetPrevSmoothMousePosMul(float afX);
	tString GetActionName(int alId,  bool abAnalog);
	void SetGamepadMapping(const tString&in asProfile,  const tString&in asPreset);
	int GetGamepadMappingActionNum();
	bool GetGamepadMappingAction(int alId,  int&out alAction,  tString&out asPrimary,  bool&out abAnalog);
	void GetActionsAssociatedToGamepadControl(const tString &in asProfile,  const tString &in asPreset,  const tString &in asControl,  tString &out asActions);
	void FetchGamepadInputLayoutString(const tString &in asInputName,  tString &out asPrefixName,  tString &out asLayoutString);
	void ClearKeyboardLayout();
	void AddKeyboardLayoutKey(eKey aKey,  eLuxKeyboardLayoutType aType,  const cImGuiGfx &in aGfxKey,  const cImGuiLabelData &in aLabelKey);
	void AddKeyboardLayoutRange(eKey aFirstKey,  eKey aLastKey,  eLuxKeyboardLayoutType aType,  const cImGuiGfx &in aGfxKey,  const cImGuiLabelData &in aLabelKey);
	void SetKeyboardLayoutDefaults(const cImGuiGfx &in aGfxKey,  const cImGuiLabelData &in aLabelKey);
	void SetMouseLayout(array<tString> &in avButtons);


}

class cVector3f
{
	float GetElement(uint64 alIdx,  const);
	void SetElement(uint64 alIdx, float,  const);
	float SqrLength( const);
	float Length( const);
	float Normalize();

	float x;
	float y;
	float z;

}

class cImGuiMultiSelectData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	bool mbUseBackgroundInFocusGfx;
	cImGuiGfx mGfxBackgroundInFocus;
	cVector2f mvArrowSize;
	bool mbUseArrowInFocusGfx;
	cImGuiGfx mGfxArrowRight;
	cImGuiGfx mGfxArrowRightInFocus;
	cImGuiGfx mGfxArrowLeft;
	cImGuiGfx mGfxArrowLeftInFocus;

}

class cVector2l
{
	int GetElement(uint64 alIdx,  const);
	void SetElement(uint64 alIdx, int,  const);
	int SqrLength( const);

	int x;
	int y;

}

class cCollidePoint
{

	cVector3f mvPoint;
	cVector3f mvNormal;
	float mfDepth;

}

class cWidgetLabel
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetTextAlign(eFontAlign aType);
	eFontAlign GetTextAlign();
	bool GetWordWrap();
	void SetWordWrap(bool abX);
	void SetMaxTextLength(int alLength);
	int GetMaxTextLength();
	void SetAutogenerateSize(bool abX);
	bool GetAutogenerateSize();
	void SetDrawBackGround(bool abX);
	bool GetDrawBackGround();
	void SetBackGroundColor(const cColor&in aColor);
	const cColor& GetBackGroundColor();
	void SetScrollWaitTime(float afX);
	float GetScrollWaitTime();
	void SetScrollOffset(float afX);
	void SetScrollSpeedMul(float afX);
	float GetScrollSpeedMul();


}

class cLuxPlayer
{
	void SetActive(bool abX);
	bool IsActive();
	cCamera@ GetCamera();
	iCharacterBody@ GetCharacterBody();
	void SetCharacterBody(iCharacterBody@ apBody);
	iCollideShape@ GetCameraCollideShape();
	void AddUsedLiquidArea(cLuxLiquidArea@ apArea);
	void RemoveUsedLiquidArea(cLuxLiquidArea@ apArea);
	bool GetIsLiquidAreaUsed(cLuxLiquidArea@ apArea);
	bool IsInLiquid();
	float GetLiquidHeight();
	void ResetBasicProperties();
	float GetAverageMoveSpeed();
	const cVector3f& GetAverageMoveDirection();
	void ChangeState(int alId);
	int GetCurrentStateId();
	const tString& GetCurrentStateName();
	void ChangeMoveState(int alId);
	int GetCurrentMoveStateId();
	const tString& GetCurrentMoveStateName();
	cLuxMoveState@ GetCurrentMoveState();
	void AddState(const tString&in asName,  int alId,  const tString&in asScriptFile,  const tString&in asScriptClass);
	void AddMoveState(const tString&in asName,  int alId,  const tString&in asScriptFile,  const tString&in asScriptClass);
	void GiveDamage(float afAmount,  int alStrength,  int aType,  float afMinHealth,  const tString&in asSource);
	void SetBaseCameraPosAdd(const cVector3f&in avVec);
	const cVector3f& GetBaseCameraPosAdd();
	void SetCameraPosAdd(int alType,  const cVector3f&in avVector);
	const cVector3f& GetCameraPosAdd(int alType);
	const cVector3f& GetCameraPosAddGoal(int alType);
	const cVector3f& GetCameraPosAddSum();
	void MoveCameraPosAdd(int alType,  const cVector3f&in avGoal, float afAcc,  float afSpeed,  float afSlowdownDist);
	void EnableCameraLock(float afLocalYawMin,  float afLocalYawMax,  float afLocalPitchMin,  float afLocalPitchMax);
	void DisableCameraLock();
	void RotateCameraTowards(float afAcc,  float afSpeedMul,  float afMaxSpeed,  const cVector3f&in avLookAtPos,  bool abLocalCoord);
	void SetRotateCameraTarget(const cVector3f&in avLookAtPos,  bool abLocalCoord);
	float GetRotateCameraTargetDistance();
	bool IsCameraRotateActive();
	void StopCameraRotate(float afDeacc);
	void FadeCameraFOVMulTo(float afX,  float afSpeed);
	void FadeCameraAspectMulTo(float afX,  float afSpeed);
	void FadeCameraRollTo(int alId,  float afX,  float afSpeedMul,  float afMaxSpeed);
	void SetCameraRoll(int alId,  float afX);
	float GetDefaultFOV();
	void FadeCameraFOVTo(float afTargetFOV,  float afSpeed);
	void AutomoveCharBodyTo(float afAcc,  float afSpeedMul,  float afMaxSpeed,  const cVector3f&in avPosition);
	void SetAutomoveCharBodyTarget(const cVector3f&in avPosition);
	float GetAutoMoveTargetDistance();
	bool IsAutomoveCharBodyActive();
	void StopAutomoveCharBody();
	void SetHealth(float afX);
	float GetHealth();
	void SetMaxHealth(float afX);
	float GetMaxHealth();
	void AddHealth(float afX,  float afMinHealth);
	bool IsDead();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	void SetMaxCameraTrackingAmount(int alSize);
	const cVector2f& GetCameraTrackingAvgMovement();
	float GetVisibilityRangeMul();
	void SetVisibilityRangeMul(int alId,  float afX);
	void SetVisibilityMaxRange(int alId,  float afX);
	float GetVisibilityMaxRange();
	float GetTimeSincePhysicsObjectInteraction();
	void ResetTimeSincePhysicsObjectInteraction();


}

class cGuiSkin
{
	const tString& GetName();
	bool LoadFromFile(const tWString&in asFile);
	cGuiGfxElement@ GetGfx(eGuiSkinGfx aType);
	cGuiSkinFont@ GetFont(eGuiSkinFont aType);
	const cVector3f& GetAttribute(eGuiSkinAttribute aType);


}

class cLuxUserModule
{
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void SetScriptableIsSaved(bool abX);

	int mlId;

}

class cDate
{

	int seconds;
	int minutes;
	int hours;
	int month_day;
	int month;
	int year;
	int week_day;
	int year_day;

}

class cEntity3DIterator
{
	bool HasNext();
	iEntity3D@ Next();
	iEntity3D@ PeekNext();


}

class cLuxSoundListener
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void LoadFromInstanceVariables(cResourceVarsObject@ apInstanceVars);
	void SetHearRadius(float afX);
	float GetHearRadius();
	void SetMinHearPrio(int alX);
	int GetMinHearPrio();
	float GetSoundRadiusMul();
	float GetSoundMinRadius();
	float GetSoundMaxRadius();
	void SetSoundRadiusMul(float afX);
	void SetSoundMinRadius(float afX);
	void SetSoundMaxRadius(float afX);
	void SetActive(bool bX);
	bool IsActive();
	bool IsListening();
	void SetIgnoreSoundRadius(float afX);
	float GetIgnoreSoundRadius();
	void SetMaxPlayerPhysicsInteractTime(float afX);
	float GetMaxPlayerPhysicsInteractTime();


}

class iMouse
{
	bool ButtonIsDown(eMouseButton);
	void Update();
	cVector2l GetAbsPosition();
	cVector2l GetRelPosition();
	void SetRelativeMouseModeActive(bool abX);
	bool GetRelativeMouseModeActive();


}

class cLuxLightSensor
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void LoadFromInstanceVariables(cResourceVarsObject@ apInstanceVars);
	void SetSensitivityLevel(float afX);
	float GetSensitivityLevel();
	bool IsSensoring();


}

class iLipsyncResult
{
	void Clear();
	float GetTotalLength();


}

class iPostEffect
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();


}

class cBillboard
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	eBillboardType GetType();
	void SetAxis(const cVector3f&in avAxis);
	const cVector3f& GetAxis();
	void SetForwardOffset(float afOffset);
	float GetForwardOffset();
	void SetColor(const cColor &in aColor);
	const cColor& GetColor();
	void SetHaloAlpha(float afX);
	float GetHaloAlpha();
	void SetBrightness(float afX);
	float GetBrightness();
	void SetRangeMax(float afRangeMaxStart,  float afRangeMaxEnd);
	void SetRangeMin(float afRangeMinStart,  float afRangeMinEnd);
	float GetRangeMaxStart();
	float GetRangeMaxEnd();
	float GetRangeMinStart();
	float GetRangeMinEnd();


}

class cWidgetRangeSlider
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetMinValue(int alValue);
	int GetMinValue();
	void SetMaxValue(int alValue);
	int GetMaxValue();
	void SetRangeStart(int alValue);
	int GetRangeStart();
	void SetRangeEnd(int alValue);
	int SetRangeEnd();
	bool GetAllowLimitPushing();
	void SetAllowLimitPushing(bool abX);


}

class cViewport
{
	void SetActive(bool abX);
	void SetVisible(bool abX);
	bool IsActive();
	bool IsVisible();
	void SetIsListener(bool abX);
	bool IsListener();
	void SetCamera(cCamera @apCamera);
	cCamera@ GetCamera();
	void SetWorld(cWorld @apWorld,  bool abResetEffects=false);
	cWorld@ GetWorld();
	void SetRenderer(iRenderer @apRenderer);
	iRenderer@ GetRenderer();
	cRenderSettings@ GetRenderSettings();
	void SetFrameBuffer(iFrameBuffer @apFrameBuffer);
	iFrameBuffer@ GetFrameBuffer();
	void SetPostEffectComposite(cPostEffectComposite @apPostEffectComposite);
	cPostEffectComposite@ GetPostEffectComposite();
	cPostEffect_ToneMapping@ GetToneMappingEffect();
	void AddGuiSet(cGuiSet @apSet);
	void RemoveGuiSet(cGuiSet @apSet);
	void SetPosition(const cVector2l&in avPos);
	void SetSize(const cVector2l&in avSize);
	const cVector2l& GetPosition();
	const cVector2l& GetSize();
	void AddViewportCallback(iViewportCallback @apCallback);
	void RemoveViewportCallback(iViewportCallback @apCallback);
	void AddRendererCallback(iRendererCallback @apCallback);
	void RemoveRendererCallback(iRendererCallback @apCallback);


}

class iPhysicsJoint
{
	const tString& GetName();
	tID GetID();
	int GetUniqueID();
	iPhysicsBody@ GetParentBody();
	iPhysicsBody@ GetChildBody();
	void RemoveBody(iPhysicsBody @apBody);
	const cVector3f& GetPivotPoint();
	const cVector3f& GetPinDir();
	ePhysicsJointType GetType();
	void SetCollideBodies(bool abX);
	bool GetCollideBodies();
	void SetStiffness(float afX);
	float GetStiffness();
	cVector3f GetVelocity();
	cVector3f GetAngularVelocity();
	float GetForceSize();
	float GetDistance();
	float GetAngle();
	void SetBreakable(bool abX);
	bool IsBreakable();
	void SetLimitAutoSleep(bool abX);
	bool GetLimitAutoSleep();
	void SetStickyMinLimit(bool abX);
	void SetStickyMaxLimit(bool abX);
	bool GetStickyMinLimit();
	bool GetStickyMaxLimit();
	void Break();
	bool IsBroken();
	void SetMoveSound(tString&in asName);
	void SetMoveSpeedType(ePhysicsJointSpeed aType);
	void SetMinMoveSpeed(float afX);
	void SetAllowPositionReset(bool abX);
	bool GetAllowPositionReset();
	void SetMinLimitSound(const tString&in asSound,  float afMinSpeed);
	void SetMaxLimitSound(const tString&in asSound,  float afMinSpeed);


}

class cImGuiGaugeData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	cImGuiFrameGfx mGfxFrame;
	bool mbUseFrame;
	cImGuiGfx mGfxFill;
	bool mbUseFillUV;
	eImGuiGaugeOrientation mOrientation;
	cVector2f mvPadding;

}

class cClothEntity
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	iPhysicsCloth@ GetPhysicsCloth();
	void SetMaterial(cMaterial@ apMaterial);
	void SetColor(const cColor &in aColor);
	const cColor& GetColor();
	void SetUVScale(cVector2f avX);
	cVector2f GetUVScale();


}

class cLuxBackboneTrailingRotation
{


}

class iSoundEventProject
{
	const tString& GetName(const);
	void GetGroupNames(const tString&in asInternalPath,  array<tString> &inout avDestArray);
	void GetEventNames(const tString&in asInternalPath,  array<tString> &inout avDestArray);
	uint GetMemoryUsed();
	void IncDataCount();
	void DecDataCount();
	bool HasData();


}

class cLightDirectional_ShadowSlice
{

	float mfFarPlane;
	float mfOffsetBias;
	float mfOffsetSlopeScaleBias;
	int mCastersAffected;

}

class cWidgetTreeView
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	cWidgetTreeItem@ AddItem(const tWString&in asText);
	void ClearItems();


}

class cWidgetDummy
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetEncloseChildren(bool abX);


}

class cLuxEntityComponentIterator
{
	bool HasNext();
	iLuxEntityComponent@ Next();
	iLuxEntityComponent@ PeekNext();


}

class cImGuiFont
{
	void SetFile(const tString&in asFile);
	const tString& GetFile(const);
	uint64 GetId();

	eGuiMaterial mMaterial;
	cColor mColor;
	cVector2f mvSize;

}

class iGpuProgram
{


}

class cLuxGuiSet
{
	cGuiSet@ GetSet();
	cImGui@ GetImGui();
	cLuxProp@ GetProp();
	void SetProp(cLuxProp@ asProp);
	void Exit();
	void DropFocus();
	bool HasFocus();


}

class cGamepadInputData
{
	int GetPadIndex( const);
	eGamepadInputType GetInputType( const);
	int GetInputId( const);
	float GetInputValue( const);


}

class cLuxTrackNode
{
	const tString& GetNodeName();
	float GetMinWaitTime();
	float GetMaxWaitTime();
	const tString& GetAnimName();
	bool GetLoopAnim();


}

class cLuxCharMover
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void LoadFromVariables(cResourceVarsObject@ apVars);
	void MoveToPos(const cVector3f&in avFeetPos,  bool abSlowDownAndStopAtGoal=false);
	void TurnToPos(const cVector3f&in avFeetPos);
	void TurnToAngle(float afAngle);
	void TurnToAngles(float afYaw,  float afPitch);
	void TurnInstantlyToPos(const cVector3f&in avGoalPos);
	void TurnInstantlyToAngle(float afAngle);
	void TurnInstantlyToAngle(float afYaw,  float afPitch);
	void StopTurning();
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="");
	int PlayTrackAnimation(cLuxTrackNode@ apNode);
	void SetUseMoveStateAnimations(bool abX);
	bool GetUseMoveStateAnimations();
	void SetTurnedToGoalCallbackFunc(const tString &in asFunc);
	float CalculateSpeedMul(float afTimeStep);
	float GetMoveSpeed();
	float GetWantedSpeedAmount();
	float GetStuckCounter();
	float GetMaxStuckCounter();
	void ResetStuckCounter();
	void SetMaxForwardSpeed(float afX);
	void SetMaxBackwardSpeed(float afX);
	void SetTurnMinBreakAngle(float afX);
	void SetTurnBreakMul(float afX);
	void SetTurnSpeedMul(float afX);
	void SetTurnMaxSpeed(float afX);
	void SetStoppedToWalkSpeed(float afX);
	void SetWalkToRunSpeed(float afX);
	void SetWalkToStoppedSpeed(float afX);
	void SetRunToWalkSpeed(float afX);
	void SetTurnStoppedToWalkSpeed(float afX);
	void SetTurnWalkToStoppedSpeed(float afX);
	void SetMoveSpeedAnimMul(float afX);
	void SetVerticalMoveSpeedExtraAnimMul(float afX);
	iCharacterBody@ GetCharBody();
	void SetWallAvoidanceActive(bool abX);
	void SetDynamicObjectAvoidanceActive(bool abX);
	void SetIdleAnimName(const tString&in asName);
	void SetWalkAnimName(const tString&in asName);
	void SetRunAnimName(const tString&in asName);
	void SetBackwardAnimName(const tString&in asName);
	void SetIdleExtraAnimName(const tString&in asName);
	void SetupWallAvoidance(float afRadius,  float afSteerAmount,  int alSamples);
	void SetupDynamicObjectAvoidance(float afMaxDistance,  float afMinMass,  float afSteerAmount);
	void SetupIdleExtra(const tString&in asAnimName,  float afMinWait,  float afMaxWait,  bool abPauseProceduralAnims);
	void SetDirection(eLuxCharMoveDirection aDir);
	void AddSpeedState(int alId);
	void SetSpeedState_Forward(float afX);
	void SetSpeedState_Backward(float afX);
	void SetSpeedState_Sideways(float afX);
	void SetSpeedState_TurnBreakMul(float afX);
	void SetSpeedState_TurnSpeedMul(float afX);
	void SetSpeedState_TurnMaxSpeed(float afX);
	void SetSpeedState_ForwardAcc(float afX);
	void SetSpeedState_ForwardDeacc(float afX);
	void SetSpeedState_SidewayAcc(float afX);
	void SetSpeedState_SidewayDeacc(float afX);
	void SetBankingActive(bool abX);
	void SetBankingAngleMul(float afX);
	void SetBankingMaxAngle(float afX);
	void SetBankingSpeedMul(float afX);
	void SetBankingMaxSpeed(float afX);
	void SetIdleExtraAnimActive(bool abX);
	bool GetIdleExtraAnimActive();
	void SetSpeedState(int alId);
	void SetUse3DMovement(bool abX);


}

class iGamepad
{
	tString GetGamepadName();
	int GetNumButtons();
	int GetNumAxes();
	int GetNumHats();
	int GetNumBalls();
	cGamepadInputData GetInputUpdate();
	bool HasInputUpdates();
	bool ButtonIsDown(eGamepadButton aButton);
	cGamepadInputData GetButton();
	bool ButtonIsPressed();
	cGamepadInputData GetReleasedButton();
	bool ButtonIsReleased();
	float GetAxisValue(eGamepadAxis aAxis);
	float GetAxisDeadZoneRadiusValue();
	void SetAxisDeadZoneRadiusValue(float afValue);
	cGamepadInputData GetUpdatedAxis();
	bool AxesUpdated();
	eGamepadHatState GetHatCurrentState(eGamepadHat aHat);
	bool HatIsInState(eGamepadHat aHat,  eGamepadHatState aState);
	cGamepadInputData GetHatState();
	bool HatsChanged();
	cVector2l GetBallAbsPos(eGamepadBall aBall);
	void SetRumble(float afValue,  int alMillisec);
	void SetColorLED(const cColor&in aColor);
	cColor GetColorLED();


}

class cLuxCollideCallback
{


}

class cLuxBarkMachine
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void SetupVoice(const tString&in asCharacter,  bool abUse3D,  float afDefaultMinDistance, float afDefaultMaxDistance , float afDefaultMaxPlayerListeningRange);
	void AddState(int alId);
	void SetState_SoundBark(const tString&in asSound,  float afMinBetweenTime,  float afMaxBetweenTime,  bool abWaitForSoundToBeDone);
	void SetState_VoiceBark(const tString&in asSubject,  float afMinBetweenTime,  float afMaxBetweenTime,  bool abWaitForSoundToBeDone, int alPrio=0, float afMinDistance=-1,  float afMaxDistance=-1,  float afMaxPlayerListeningRange=-1);
	void ChangeState(int alId);
	void PlayVoice(const tString&in asSubject,  int alPrio,  float afMinDistance=-1,  float afMaxDistance=-1,  float afMaxPlayerListeningRange=-1);
	void SetActive(bool abX);
	bool IsActive();


}

class cSubMeshEntity
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	cSubMesh@ GetSubMesh( const);
	void SetLocalNode(cNode3D @apNode);
	cNode3D@ GetLocalNode();
	void SetCustomMaterial(cMaterial @apMaterial,  bool abDestroyOldCustom);
	cMaterial@ GetCustomMaterial();


}

class cSurfaceData
{
	const tString& GetName( const);
	void PreloadData();
	cSurfaceImpactData@ GetImpactData(int alIdx);
	int GetImpactDataNum();
	cSurfaceImpactData@ GetImpactDataFromSpeed(float afSpeed);
	cSurfaceImpactData@ GetHitData(int alIdx);
	int GetHitDataNum();
	cSurfaceImpactData@ GetHitDataFromSpeed(float afSpeed);
	const tString& GetStepType();


}

class cWidgetMenuItem
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	cWidgetMenuItem@ AddMenuItem(const tWString&in asText,  const tWString&in asIconFilename = _W);
	void AddSeparator();
	void ClearMenuItems();
	bool IsParent();
	bool IsChecked();
	void SetChecked(bool abX);
	bool IsDefault();
	void SetDefault(bool abX);
	iWidgetMenu@ GetParentMenu();
	iWidgetMenu@ GetChildMenu();
	bool IsMenuOpen();
	bool IsSeparator();
	const tWString& GetShortcutText();
	float GetTextLength();


}

class cLuxAgent
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	float GetDistanceToPlayer();
	float GetDistanceToPlayer2D();
	float GetDistanceToPos(const cVector3f&in avPos);
	float GetDistanceToPos2D(const cVector3f&in avPos);
	const cVector3f& GetPlayerPos();
	cVector3f GetPlayerFeetPos();
	cVector3f GetPlayerHeadPos();
	bool GetPointIsInFOV(const cVector3f&in avPoint,  float afFOV,  const cVector3f &in avForward);
	bool GetPlayerIsInFOV(float afFOV,  const cVector3f &in avForward);
	bool GetEntityIsInPlayerFOV();
	bool GetPlayerIsInLineOfSight(float afFOV,  const cVector3f &in avForward,  bool abCheckFOV);
	bool GetPlayerIsInLineOfSight();
	float GetPlayerMovementTowardEntity();
	float GetAngleToPos2D(const cVector3f&in avPos);
	float GetAngleToPos3D(const cVector3f&in avPos);
	float GetAngleToPlayer2D();
	float GetAngleToPlayer3D();
	bool GetEntityIsInPlayerLineOfSight(bool abCheckFOV);
	float GetDistanceToGround(float afMaxTestDistance,  bool abCheckDynamic,  int alNumOfRays=1,  float afRadius=0.25,  bool abGetShortest=true);
	void GetPlayerIsInLineOfSight(const tString&in asCallbackFunc,  float afFOV,  const cVector3f &in avForward,  bool abCheckFOV);
	void GetPlayerIsInLineOfSight(const tString&in asCallbackFunc);
	void GetEntityIsInPlayerLineOfSight(const tString&in asCallbackFunc,  bool abCheckFOV);
	void GetDistanceToGround(const tString&in asCallbackFunc,  float afMaxTestDistance,  bool abCheckDynamic,  int alNumOfRays=1,  float afRadius=0.25,  bool abGetClosest=true);
	void DoDamageBox(const cVector3f&in avSize,  const cVector3f&in avLocalOffset,  const cVector2f&in avMinMaxDamage,  float afForce,  float afMaxImpulse,  int aDamageType,  float afHitSpeed=2,  int alStrength=0,  bool abCheckAgents=false,  bool abCheckPlayer=true,  bool abCheckProps=true,  bool abLethalForPlayer=true);
	void SetRelativeEyeHeight(float afX);
	float GetRelativeEyeHeight();
	cVector3f GetEyePostion();
	int GetDebugEyeRaysNum();
	const cVector3f& GetDebugEyeRay(int alIdx);
	void SetStaticCollider(bool abX);
	bool GetStaticCollider();
	void SetSensesActive(bool abX);
	bool GetSensesActive();
	void SetPlayerDetectedMinTime(float afX);
	float GetPlayerDetectedCount();
	void SetUpdatePlayerDetection(bool abX);
	bool SetUpdatePlayerDetection();
	bool PlayerIsSeen();
	bool PlayerIsDetected();
	void ResetPlayerDetectionState();
	void SetAutoDisableWhenOutOfSightActive(bool abX,  float afMinDistance);
	void SetAutoDisableCallback(const tString&in asFunc);
	void SetFOV(float afX);
	float GetFOV();
	void SetFOVMul(float afX);
	float GetFOVMul();
	void SetSightRange(float afX);
	float GetSightRange();
	float GetSightRangeMul();
	void SetSightRangeMul(float afX);
	void SetSightRangeAffectedByModifiers(bool abX);
	bool GetSightRangeAffectedByModifiers();
	const cVector3f& GetLastKnownPlayerPos();
	float GetDistFromLastKnownToActualPlayerPos();
	void RevealPlayerPos();
	void SetAlignEntityWithGroundRay(bool abX);
	bool GetAlignEntityWithGroundRay();
	const cVector3f& GetGroundAlignPosition();
	void SetAlignEntityWithGroundRelativeRayStart(float afX);
	float GetAlignEntityWithGroundRelativeRayStart();
	void SetAlignEntityWithGroundMaxRayDistance(float afX);
	float GetAlignEntityWithGroundMaxRayDistance();
	float GetCurrentPlayerSightDistance();
	void SetCheckForDoors(bool abX);
	bool GetCheckForDoors();
	void SetMaxCheckDoorDistance(float afX);
	float GetMaxCheckDoorDistance();
	void SetCheckForDoorsCount(float afX);
	iCharacterBody@ GetCharBody();


}

class cLuxGuiCameraTexture
{


}

class iSubAction
{
	float GetValue();
	tString GetInputName();
	tString GetInputType();


}

class cLuxDialogResponseOption
{


}

class cLuxVoiceHandler
{
	bool Play(const tString &in asSubject,  int alSpecificLine,  const tString &in asCallback,  int alPrio);
	int GetSubjectLineNumber(const tString &in asSubject);
	const tString& GetSubjectSceneName(const tString &in asSubject);
	bool SubjectExists(const tString &in asSubject);
	void StopAll();
	void Stop(const tString&in asScene);
	void SkipCurrentLine(const tString&in asScene);
	void SkipCurrentSound(const tString&in asScene);
	void AdvanceFromCurrentSound(const tString&in asScene);
	void SetPaused(const tString&in asScene,  bool abX);
	void SetPausedAll(bool abX);
	void SetFocusScene(const tString&in asScene);
	void FadeSceneVolumeTo(const tString&in asScene,  float afVolume,  float afTime);
	bool CharacterIsSpeaking(const tString&in asName);
	bool SubjectIsPlaying(const tString&in asName);
	bool SceneIsActive(const tString&in asScene);
	bool SceneInvolvingCharacterIsActive(const tString&in asCharacter);
	bool AnySceneIsActive();
	void AddCharacterSpeakingCallback(const tString&in asCharacter,  const tString&in asCallback);
	void RemoveCharacterSpeakingCallback(const tString&in asCharacter);
	void GetSpectrumFromScene(const tString&in asScene,  array<float>&out aDestArray,  int alNumSamples=64);
	void GetSpectrumFromSpeakingCharacter(const tString&in asCharacter,  array<float>&out aDestArray,  int alNumSamples=64);
	bool GetUnderwaterEffectsActive();
	void SetUnderwaterEffectsActive(bool abX);


}

class cLightListIterator
{
	bool HasNext();
	iLight@ Next();
	iLight@ PeekNext();


}

class cImGuiWidgetStateVar
{


}

class cEventOwner
{
	const tString& GetName(const);
	int GetId(const);
	int GetGroupFlags(const);
	void SetGroupFlags(int alFlags);


}

class iTexture
{


}

class cSoundEntityData
{


}

class cEventDatabase
{
	const tString& GetName();
	void Clear();
	void SetupData();
	cFactStateContainer@ GetDefaultMemory();
	cEventOwner@ GetOwner(const tString&in asName,  bool abCreateIfNotExist);
	cEventScene@ GetScene(const tString&in asName,  bool abCreateIfNotExist);
	cEventTrigger@ GetTrigger(const tString&in asName,  bool abCreateIfNotExist);
	void QueryBegin(cFactStateContainer @apCustomMemory);
	void QueryAddFactStates(cFactStateContainer @apFactStates);
	cEvent@ QueryExecute(const tString&in asOwner,  const tString &in asTrigger,  const tString &in asScene,  bool abPerformEventActions);
	cEvent@ QueryExecuteMultiOwner(int alOwnerFlags,  const tString &in asTrigger,  const tString &in asScene,  bool abPerformEventActions);
	void PerformEventActions(cEvent @apEvent);
	cEvent@ AddEvent(const tString &in asName,  const tString&in asOwner,  const tString &in asTrigger,  const tString &in asScene);
	int GetEventNum();
	cEvent@ GetEvent(int alIdx);
	cFactStateContainer@ CreateFactStateContainer();
	void DestroyFactStateContainer(cFactStateContainer@ apContainer);


}

class cHeightMap
{


}

class cLensFlareIterator
{
	bool HasNext();
	cLensFlare@ Next();
	cLensFlare@ PeekNext();


}

class cLuxSoundscapeArea
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void MoveLinearTo(const cVector3f&in avGoal,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed,  const tString&in asCallback="");
	void StopMove();
	iPhysicsBody@ GetAreaBody();


}

class cLuxPathfinder
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void MoveTo(const cVector3f&in avPos,  float afUpdateFreq,  bool abExactStopAtEnd,  const tString&in asResultCallback="",  bool abCallbackInMap=false);
	void MoveToNode(const tString&in asNodeName,  float afUpdateFreq,  bool abExactStopAtEnd,  const tString&in asResultCallback="",  bool abCallbackInMap=false);
	void Stop();
	void SetEndOfPathCallbackFunc(const tString &in asCallbackFunc);
	cAINode@ GetNodeInPosLOS(const cVector3f &in avPos,  float afMinDistance, float afMaxDistance, bool abAgentToNodeFreeDirectPathCheck=false);
	const cVector3f& GetDebugLOSPoint(int alIdx);
	int GetDebugLOSPointNum();
	bool GetDebugLOSCastResult(int alIdx);
	int GetDebugLOSCastResultNum();
	bool GetDebugLOSPathResult(int alIdx);
	int GetDebugLOSPathResultNum();
	cAINode@ GetNodeAtPos(const cVector3f &in avPos, float afMinDistance, float afMaxDistance,  bool abGetClosest,  bool abPosToNodeFreeDirectPathCheck, bool abAgentToNodeFreeDirectPathCheck,  cAINode@ apSkipNode,  int alFreePathRayNum,  uint alFreePathFlags,  bool abSkipUsedNodes);
	cAINode@ GetNodeAtPos(const cVector3f &in avPos, float afMinDistance, float afMaxDistance,  bool abGetClosest,  bool abPosToNodeFreeDirectPathCheck, bool abAgentToNodeFreeDirectPathCheck,  cAINode@ apSkipNode);
	bool CheckFreePath(const cVector3f &in avStartPos,  const cVector3f &in avTargetPos);
	cAINode@ GetNodeFromName(const tString&in asName);
	bool IsMoving();
	cVector3f GetNextGoalPos();
	void ClearTrackNodes();
	void AddTrackNode(const tString&in asNodeName,  float afMinWaitTime,  float afMaxWaitTime,  const tString&in asAnimName,  bool abLoopAnim);
	void StartTrack(bool abLoop,  float afUpdateFreq,  const tString &in asEndOfTrackCallback);
	void StopTrack();
	void ResetCurrentTrackNode();
	int GetTrackNodeNum();
	cLuxTrackNode@ GetTrackNode(int alIdx);
	int GetCurrentTrackNode();
	cLuxTrackNode@ GetCurrentTrackNodeData();
	void SetCurrentTrackWaitTime(float afX);
	float GetCurrentTrackWaitTime();
	void GoToNextTrackNode();
	bool GetTrackActive();
	void SetTrackPaused(bool abX);
	bool GetTrackPaused();
	void SetTrackLoop(bool abX);
	bool GetTrackLoop();
	const tString& GetTrackCallback();
	float GetTrackUpdateFreq();
	bool BuildPathNodeArrayToPos(const cVector3f &in avPos);
	int GetPathNodeArraySize();
	cAINode@ GetPathNodeArrayNode(int alIdx);
	float GetPathNodeArrayDist(int alIdx);
	float GetPathNodeArrayFullLength();
	cAINodeContainer@ GetNodeContainer();
	void SetNodeContainerName(const tString &in asName);
	void SetNodeName(const tString &in asName);
	void SetNodeIsAtCenter(bool abX);
	void SetMinEdges(int alX);
	void SetMaxEdges(int alX);
	void SetMaxEdgeDistance(float afX);
	void SetMaxHeight(float afX);


}

class cImGuiFrameData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	cImGuiFrameGfx mFrameGfx;

}

class cLuxEventTimer
{


}

class cPidControllerVec3
{
	cVector3f Output(const cVector3f&in avError,  float afTimeStep);
	void SetErrorNum(int alErrorNum);
	void Reset();
	cVector3f GetLastError();
	cVector3f GetLastDerivative();
	cVector3f GetLastIntegral();

	float p;
	float i;
	float d;

}

class iLuxEntityComponent
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();


}

class cProcAnimation
{
	void SetActive(bool abX);
	bool IsActive();
	void SetLooping(bool abX);
	bool GetLooping();
	void SetPaused(bool abX);
	bool GetPaused();
	void SetTime(float afX);
	float GetTime();
	void SetSpeed(float afX);
	void FadeSpeed(float afX,  float afTime);
	float GetSpeed();
	void SetAmount(float afX);
	void FadeAmount(float afX,  float afTime);
	float GetAmount();
	void Update(float afTimeStep);


}

class cColor
{
	cColor ToLinearSpace(const float afPower,  const bool abCorrectAlpha,  const);
	cColor ToSRGB(const bool abCorrectAlpha,  const);

	float r;
	float g;
	float b;
	float a;

}

class cImGuiLabelData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	float mbScrolling;
	float mfScrollSpeed;
	float mfScrollStartDelay;
	float mfScrollResetDelay;

}

class cXmlText
{
	const tString& GetValue();
	void SetValue(const tString&in asValue);
	eXmlNodeType GetType();
	iXmlNode@ GetParent();
	cXmlElement@ ToElement();
	cXmlElement@ GetFirstElement();
	cXmlElement@ GetFirstElement(const tString&in asName);
	cXmlElement@ CreateChildElement(const tString&in asName);
	cXmlText@ ToText();
	cXmlText@ GetFirstText();
	cXmlText@ GetFirstText(const tString&in asText);
	cXmlText@ CreateChildText(const tString&in asText);
	cXmlNodeListIterator@ GetChildIterator();


}

class iGpuShader
{


}

class cLuxVisibilityArea
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void MoveLinearTo(const cVector3f&in avGoal,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed,  const tString&in asCallback="");
	void StopMove();
	iPhysicsBody@ GetAreaBody();


}

class cWidgetContextMenu
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	cWidgetMenuItem@ AddMenuItem(const tWString&in asText);
	void AddSeparator();
	void ClearMenuItems();
	void SetParentItem( cWidgetMenuItem@ apParentItem );
	cWidgetMenuItem@ GetParentItem();
	iWidgetMenu@ GetParentMenu();
	void SetPrevAttention(iWidget@ apWidget);
	void SetHighlightedItem( cWidgetMenuItem@ apItem );
	cWidgetMenuItem@ GetHighlightedItem();
	void Hide();
	void SetMustHide(bool abX);
	bool IsSubmenuOpen();
	iWidgetMenu@ GetTopMostMenu();
	void SetTextPos(const cVector3f&in avPos);
	void SetArrowPos(const cVector3f&in avPos);
	void SetCheckPos(const cVector3f&in avPos);
	const cVector3f& GetTextOffset();
	const cVector3f& GetArrowOffset();
	const cVector3f& GetCheckOffset();
	float GetMenuItemWidth();
	void SavePrevAttentionWidget();


}

class cLuxMoveState
{
	const tString& GetName();
	int GetId();
	void SetAutoUpdateSpeedSettings(bool abX);

	int mlId;
	cLuxPlayer @mpPlayer;
	float mfMaxForwardSpeed;
	float mfMaxBackwardSpeed;
	float mfMaxSidwaySpeed;
	float mfForwardAcc;
	float mfSidewayAcc;
	float mfForwardDeacc;
	float mfSidewayDeacc;
	float mfForwardOppositeDirAccMul;
	float mfSidewayOppositeDirAccMul;
	float mfMaxForwardSpeedMul;
	float mfMaxBackwardSpeedMul;
	float mfMaxSidwaySpeedMul;

}

class cLuxHeadTracker
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void Setup(array<tString> &in avBoneNames,  array<float> &in avBoneMuls);
	void SetMoveSpeedMul(float afX);
	void SetMoveMaxSpeed(float afX);
	void SetMaxAngle(float afX);
	void SetAngleOffset(float afX);
	void LoadFromVariables(cResourceVarsObject@ apVars);
	void SetTrackEntity(iLuxEntity @apEntity);
	void SetActive(bool abX);
	bool IsActive();
	float GetMaxAngle();


}

class cLuxCharMover_SpeedState
{


}

class cLuxCritter
{
	const tString& GetName();
	const tID& GetID();
	eLuxEntityType GetEntityType();
	const tString& GetClassName();
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetEventTag();
	const tString& GetEventInstanceTag();
	void SetEventInstanceTag(const tString&in asTag);
	cSoundEntity@ PlaySound(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	bool GetLastCreatedSoundIsPlaying();
	cParticleSystem@ CreateParticleSystem(const tString&in asName,  const tString&in asFile,  bool abRemoveWhenDone,  bool abAttach);
	cParticleSystem@ CreateParticleSystemOnBone(const tString&in asName,  const tString&in asFile,  const tString&in asBoneName,  bool abRemoveWhenDone,  bool abAttach);
	int PlayAnimation(const tString&in asName,  float afFadeTime=0.3f,  bool abLoop=false,  bool abPlayTransition=true,  const tString&in asCallback="",  bool abGlobalSpace=false);
	void AppendAnimation(const tString&in asName,  bool abLoop);
	bool GetAnimationIsPlaying();
	void SetNormalizeAnimationWeights(bool abX);
	void StopAllAnimations(float afFadeTime);
	void StopAnimation(const tString&in asName,  float afFadeTime);
	void StopAnimation(int alIdx,  float afFadeTime);
	void SetCurrentAnimationPaused(bool abX);
	void SetAnimationMessageEventCallback(const tString&in asFunc,  bool abAutoRemove);
	int GetCurrentAnimationIndex();
	cAnimationState@ GetCurrentAnimationState();
	void GiveDamage(float afAmount,  int alStrength,  const tString&in asType,  const tString&in asSource);
	void AttachToEntity(iLuxEntity@ apEntity,  iPhysicsBody@ apTargetBody,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void AttachToSocket(iLuxEntity@ apEntity,  const tString&in asSocket,  bool abUseRotation,  bool abSnapToParent,  bool abLocked=false);
	void RemoveEntityAttachment();
	void SetFullGameSave(bool abX);
	bool IsLookedAtByPlayer();
	void SetForceLookAtCheck(bool abX);
	bool GetForceLookAtCheck();
	void PreloadEntityModel(const tString &in asFile);
	bool CollidesWithPlayer();
	cLuxMap@ GetMap();
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetPosition(const cVector3f&in avPos);
	cMatrixf GetMatrix();
	cVector3f GetPosition();
	int GetBodyNum();
	iPhysicsBody@ GetBody(int alIdx);
	iPhysicsBody@ GetBodyFromID(int alID);
	int GetBodyIndexFromName(const tString&in asName);
	iPhysicsBody@ GetBodyFromName(const tString&in asName);
	iPhysicsBody@ GetMainBody();
	void SetMeshScaleMul(const cVector3f&in avScale);
	cVector3f GetMeshScaleMul();
	void FadeMeshScaleMul(const cVector3f&in avDestScale,  float afTime);
	cMeshEntity@ GetMeshEntity();
	cMaterial@ GetBaseMaterial();
	iEntity3D@ GetAttachEntity();
	cNode3D@ GetVoiceAttachNode();
	bool CanInteract(int alType,  iPhysicsBody@ apBody);
	bool OnInteract(int alType,  iPhysicsBody@ apBody,  const cVector3f &in avFocusPos,  const tString&in asData);
	int GetInteractIconId(int alType,  iPhysicsBody@ apBody);
	void SetIsInteractedWith(bool abX);
	bool IsInteractedWith();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void SetInteractionDisabled(bool abX);
	bool GetInteractionDisabled();
	void SetPlayerInteractCallback(const tString &in asCallbackFunc,  bool abRemoveWhenInteracted);
	void SetPlayerLookAtCallback(const tString &in asCallbackFunc,  bool abRemoveWhenLookedAt,  bool abCheckCenterOfScreen,  bool abCheckRayIntersection,  float afMaxDistance,  float afCallbackDelay);
	void SetRecieveMessageCallback(const tString&in asCallbackFunc);
	void SetConnectionStateChangeCallback(const tString &in asCallbackFunc);
	bool HasPlayerInteractCallback();
	bool HasPlayerLookAtCallback();
	void SetupParent(int alTypeId,  tID alId,  const tString &in asName);
	int GetParentType();
	tID GetParentId();
	const tString& GetParentName();
	void ChangeConnectionState(int alState);
	void AddConnection(const tString&in asName,  iLuxEntity @apEntity,  bool abInvertStateSent,  int alStatesUsed);
	void RemoveConnection(const tString&in asName);
	void RemoveAllConnections();
	bool CheckEntityCollision(iLuxEntity@ apEntity);
	bool CheckBodyCollision(iPhysicsBody @apBody,  cLuxMap @apMap);
	bool CheckShapeCollision(iCollideShape @apShape,  const cMatrixf &in a_mtxTransform,  cLuxMap @apMap);
	bool CheckCharacterCollision(iCharacterBody @apBody,  cLuxMap @apMap);
	bool HasCollideCallbacks();
	void AddCollideCallback(iLuxEntity @apEntity,  const tString&in asCallbackFunc);
	void RemoveCollideCallback(const tString&in asEntityName);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void BroadcastMessage(int alMessageId,  iLuxEntityComponent@ apSource,  const cVector3f &in avData,  int alData);
	void SetEffectBaseColor(const cColor&in aColor);
	const cColor& GetEffectBaseColor();
	void FadeEffectBaseColor(const cColor &in aDestColor,  float afTime);
	void SetEffectsActive(bool abActive,  bool abFadeAndPlaySounds);
	bool GetEffectsActive();
	float GetEffectsAlpha();
	const tString& GetEffectsOnSound();
	const tString& GetEffectsOffSound();
	float GetEffectsOnTime();
	float GetEffectsOffTime();
	void SetVarString(const tString&in asName,  const tString&in asX);
	void SetVarBool(const tString&in asName,  bool abX);
	void SetVarInt(const tString&in asName,  int alX);
	void SetVarFloat(const tString&in asName,  float afX);
	void SetVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void SetVarVector3f(const tString&in asName,  const cVector3f&in avX);
	void SetVarColor(const tString&in asName,  const cColor&in aX);
	void IncVarInt(const tString&in asName,  int alX);
	void IncVarFloat(const tString&in asName,  float afX);
	void IncVarVector2f(const tString&in asName,  const cVector2f&in avX);
	void IncVarVector3f(const tString&in asName,  const cVector3f&in avX);
	const tString& GetVarString(const tString&in asName);
	bool GetVarBool(const tString&in asName);
	int GetVarInt(const tString&in asName);
	float GetVarFloat(const tString&in asName);
	cVector2f GetVarVector2f(const tString&in asName);
	cVector3f GetVarVector3f(const tString&in asName);
	cColor GetVarColor(const tString&in asName);
	bool CheckIsOnScreen(bool abUseRayCast);
	const tString& GetFileName();
	const cVector3f& GetOnLoadScale();
	const cMatrixf& GetOnLoadTransform();
	iLight@ GetLightFromName(const tString&in asName);
	cParticleSystem@ GetParticleSystemFromName(const tString&in asName);
	cBillboard@ GetBillboardFromName(const tString&in asName);
	cSoundEntity@ GetSoundEntityFromName(const tString&in asName);
	cLensFlare@ GetLensFlareFromName(const tString&in asName);
	bool IsOccluder();
	void SetIsOccluder(bool abX);
	void Sleep();
	void WakeUp();
	void SetAutoSleep(bool abX);
	bool GetAutoSleep();
	bool IsSleeping();
	float GetVariableUpdateRate();
	void SetVariableUpdateRate(float afX);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	void DrawProjDebugText(const tString&in asText,  float afFontSize=16.0f,  bool abProjectSize=false,  eFontAlign aAlignment=eFontAlign_Left, const cColor&in aColor=cColor, 1, 1,  const cVector3f&in avOffset=cVector3f, 0,  float afMaxDistance=20);
	void SetScriptableIsSaved(bool abX);
	bool GetScriptableIsSaved();
	void SetIsDoor(bool abX);
	bool GetIsDoor();
	void SetIsClosedDoor(bool abX);
	bool GetIsClosedDoor();
	void UpdateEntityAttachment();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetSaveDataIsUpdated();
	void SetSaveDataIsUpdated(bool abX);
	void Timer_ClearAll();
	void Timer_Add(uint64 alID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(uint64 alID);
	bool Timer_Exists(uint64 alID);
	float Timer_GetTimeLeft(uint64 alID);
	void Timer_SetPaused(uint64 alID,  bool abX);
	bool Timer_TimeHasPassed(uint64 alID,  float afLength);
	float Timer_GetValue(uint64 alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Timer_Add(const tString&in asID,  float afTime,  const tString&in asFunc="",  bool abCreateIfExist=true,  bool abRepeat=false);
	void Timer_Remove(const tString&in asID);
	bool Timer_Exists(const tString&in asID);
	float Timer_GetTimeLeft(const tString&in asID);
	void Timer_SetPaused(const tString&in asID,  bool abX);
	bool Timer_TimeHasPassed(const tString&in asID,  float afLength);
	float Timer_GetValue(const tString&in asID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_ClearAll();
	void Fader_FadeTo(uint alID,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(uint alID,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(uint alID,   bool abPaused);
	float Fader_GetValue(uint alID,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	void Fader_FadeTo(const tString&in asName,  float afGoal,  float afTime,  bool abReverseAtEnd=false,  bool abSkipIfExists=false);
	void Fader_Set(const tString&in asName,   float afX,  bool abSkipIfExists=false);
	void Fader_SetPaused(const tString&in asName,   bool abPaused);
	float Fader_GetValue(const tString&in asName,  float afMin=0,  float afMax=1,  eEasing aEasing=eEasing_Linear,  bool abAbsValue=false);
	float GetDistanceToPlayer();
	float GetDistanceToPlayer2D();
	float GetDistanceToPos(const cVector3f&in avPos);
	float GetDistanceToPos2D(const cVector3f&in avPos);
	const cVector3f& GetPlayerPos();
	cVector3f GetPlayerFeetPos();
	cVector3f GetPlayerHeadPos();
	bool GetPointIsInFOV(const cVector3f&in avPoint,  float afFOV,  const cVector3f &in avForward);
	bool GetPlayerIsInFOV(float afFOV,  const cVector3f &in avForward);
	bool GetEntityIsInPlayerFOV();
	bool GetPlayerIsInLineOfSight(float afFOV,  const cVector3f &in avForward,  bool abCheckFOV);
	bool GetPlayerIsInLineOfSight();
	float GetPlayerMovementTowardEntity();
	float GetAngleToPos2D(const cVector3f&in avPos);
	float GetAngleToPos3D(const cVector3f&in avPos);
	float GetAngleToPlayer2D();
	float GetAngleToPlayer3D();
	bool GetEntityIsInPlayerLineOfSight(bool abCheckFOV);
	float GetDistanceToGround(float afMaxTestDistance,  bool abCheckDynamic,  int alNumOfRays=1,  float afRadius=0.25,  bool abGetShortest=true);
	void GetPlayerIsInLineOfSight(const tString&in asCallbackFunc,  float afFOV,  const cVector3f &in avForward,  bool abCheckFOV);
	void GetPlayerIsInLineOfSight(const tString&in asCallbackFunc);
	void GetEntityIsInPlayerLineOfSight(const tString&in asCallbackFunc,  bool abCheckFOV);
	void GetDistanceToGround(const tString&in asCallbackFunc,  float afMaxTestDistance,  bool abCheckDynamic,  int alNumOfRays=1,  float afRadius=0.25,  bool abGetClosest=true);
	void DoDamageBox(const cVector3f&in avSize,  const cVector3f&in avLocalOffset,  const cVector2f&in avMinMaxDamage,  float afForce,  float afMaxImpulse,  int aDamageType,  float afHitSpeed=2,  int alStrength=0,  bool abCheckAgents=false,  bool abCheckPlayer=true,  bool abCheckProps=true,  bool abLethalForPlayer=true);
	void SetRelativeEyeHeight(float afX);
	float GetRelativeEyeHeight();
	cVector3f GetEyePostion();
	int GetDebugEyeRaysNum();
	const cVector3f& GetDebugEyeRay(int alIdx);
	void SetHealth(float afX);
	float GetHealth();
	void SetTestCollision(bool abX);
	bool GetTestCollision();
	void SetUseRayCollision(bool abX);
	bool GetUseRayCollision();
	void SetIsFlying(bool abX);
	bool IsFlying();
	void SetCanRunOnWalls(bool abX);
	bool GetCanRunOnWalls();
	void SetAlignToGround(bool abX);
	bool GetAlignToGround();
	void SetGroup(const tString&in asEntityName);
	void SetGroup(iLuxEntity @apEntity);
	float GetNotRenderedCount();
	cVector3f Move_GetWanderAdd2D(float afLength,  float afRadius,  float afTimeStep);
	cVector3f Move_GetWanderAdd3D(float afLength,  float afRadius,  float afTimeStep);
	cVector3f Move_GetTowardPlayerAdd(bool abNormalize,  float afTimeStep);
	cVector3f Move_GetTowardPosAdd(const cVector3f&in avPos,  bool abNormalize,  float afTimeStep);
	cVector3f Move_GetTowardCenterAdd(float afTimeStep);
	cVector3f Move_GetFlockingAdd(float afCenterMul,  float afCenterYMul,  float afSeparationMul,  float afAlignmentMul,  float afCohesionMul, int alMaxMemberChecks,  float afTimeStep);
	cVector3f Move_GetTowardsGroundAdd(float afMaxHeight,  float afTimeStep);
	cVector3f Move_GetWallAvoidAdd(float afDistanceForward,  float afTimeStep);
	cVector3f Move_GetStopAdd(float afAmount,  float afTimeStep);
	void Move_ChangeMaxSpeed(float afGoal,  float afAcc,  float afTimeStep);
	cVector3f Move_Normalize(const cVector3f &in avVec);

	cVector3f mvWantedVel;
	cVector3f mvGravityVel;
	cVector3f mvGroundNormal;
	cVector3f mvWallAvoidNormal;
	cVector3f mvWallAvoidPosition;
	bool mbWallAvoidDetected;
	int mlAnimState;
	tString msMoveAnim;
	tString msIdleAnim;
	float mfMaxVelocity;
	float mfMaxGravityVelocity;
	float mfTurnSpeedMul;
	float mfMaxTurnSpeed;
	float mfForwardRotationYOffset;

}

class cPostEffect_FXAA
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();


}

class cLuxEventDatabaseHandler
{
	cEvent@ Query(const tString &in asOwner,  const tString&in asTrigger,  cFactStateContainer @apExtraFacts);
	cEvent@ QueryToAll(int alOwnerFlags,  const tString&in asTrigger,  cFactStateContainer @apExtraFacts);
	bool UseStandardTriggers();
	cEventDatabase@ GetEventDataBase();
	void SetLocalFact(const tString&in asFact);
	void SetLocalFactString(const tString&in asFact,  const tString&in asStr);
	void SetLocalFactFloat(const tString&in asFact,  float afVal);
	void SetLocalFactInt(const tString&in asFact,  int alVal);
	void RemoveLocalFact(const tString&in asFact);
	void SetGlobalFact(const tString&in asFact);
	void SetGlobalFactString(const tString&in asFact,  const tString&in asStr);
	void SetGlobalFactFloat(const tString&in asFact,  float afVal);
	void SetGlobalFactInt(const tString&in asFact,  int alVal);
	void RemoveGlobalFact(const tString&in asFact);


}

class cLuxClosestEntityData
{

	float mfDistance;
	iPhysicsBody @mpBody;
	iLuxEntity @mpEntity;

}

class cLuxMusicDynamicTrack
{


}

class cLightMaskBox
{
	void SetBoxSize(const cVector3f&in avSize);
	const cVector3f& GetBoxSize();


}

class cBoneState
{
	bool AddEntity(iEntity3D@ apEntity);
	bool RemoveEntity(iEntity3D@ apEntity);
	void ClearEntities();
	cNode3D@ GetParent();
	cNode3DIterator@ GetChildIterator();
	cNode3D@ CreateChild(const tString &in asName=,  bool abAutoDeleteChildren = true);
	void RemoveChild(cNode3D@ apNode);
	void SetParent(cNode3D@ apNode);
	void AddChild(cNode3D@ apChild);
	const tString& GetName();
	void SetActive(bool abX);
	bool IsActive();
	int SetVisible(bool abX,  bool abCascade);
	cVector3f GetLocalPosition();
	const cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	const cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform,  bool abSetChildrenUpdated=true);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	void AddRotation(const cVector3f&in avRot,  eEulerRotationOrder aOrder);
	void AddRotation(const cQuaternion&in aqRotation,  bool abNormalize = true);
	void NormalizeRotation();
	void AddScale(const cVector3f&in avScale);
	void AddTranslation(const cVector3f&in avTrans);
	bool GetUsePreAnimTransform();
	bool GetUsePostAnimTransform();
	const cMatrixf& GetPreAnimTransform();
	const cMatrixf& GetPostAnimTransform();
	void SetUsePreTransform(bool abX);
	void SetUsePostTransform(bool abX);
	void SetPreTransform(const cMatrixf&in a_mtxTransform);
	void SetPostTransform(const cMatrixf&in a_mtxTransform);
	void ApplyPreAnimTransform(bool abSetChildrenUpdated);
	void ApplyPostAnimTransform(bool abSetChildrenUpdated);
	void SetCustomFlags(int alX);
	int GetCustomFlags();
	void UpdateMatrix(bool abSetChildrenUpdated);
	void UpdateEntityChildren();
	void SetBody(iPhysicsBody @apBody);
	iPhysicsBody@ GetBody();
	void SetColliderBody(iPhysicsBody @apBody);
	iPhysicsBody@ GetColliderBody();


}

class cSubMesh
{
	void SetMaterial(cMaterial@ apMaterial);
	void SetVertexBuffer(iVertexBuffer@ apVtxBuffer);
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	const tString& GetName();
	cMeshCollider@ CreateCollider(eCollideShapeType aType);
	cMeshCollider@ GetCollider(int alIdx);
	int GetColliderNum();
	iCollideShape@ CreateCollideShape(iPhysicsWorld @apWorld);
	void SetIsCollideShape(bool abX);
	bool IsCollideShape();
	cVector3f GetModelScale();
	const cMatrixf& GetLocalTransform();
	void SetLocalTransform(const cMatrixf&in a_mtxTrans);
	void GetMaterialName(const tString&in asName);
	const tString& GetMaterialName();
	void Compile();


}

class iPhysicsMaterial
{
	const tString& GetName( const);
	int GetId( const);
	float GetElasticity();
	float GetStaticFriction();
	float GetKineticFriction();
	cSurfaceData@ GetSurfaceData();


}

class cLuxGuiHandler
{
	void SetGameHudInputFocus(bool abX);
	bool GetGameHudInputFocus();
	void CreateCameraTexture(const tString&in asName,  const cVector2l&in avSize,  uint alFrameRate,  float afFOV,  float afNearPlane,  float afFarPlane);
	void SetCameraTextureSettings(const tString&in asName,  float afFOV,  float afNearPlane,  float afFarPlane);
	void SetCameraTextureMatrix(const tString&in asName,  const cMatrixf&in a_mtxCamera);
	void DestroyCameraTexture(const tString&in asName);
	void AttachCameraTextureToEntity(const tString&in asName,  iLuxEntity@ apEnt);


}

class cRect2f
{

	float x;
	float y;
	float w;
	float h;

}

class cBeam
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	void SetSize(const cVector2f&in avSize);
	cVector2f GetSize();
	void SetColor(const cColor &in aColor);
	const cColor& GetColor();
	void SetBrightness(float afBrightness);
	float GetBrightness();
	void SetTileHeight(bool abX);
	bool GetTileHeight();
	void SetMultiplyAlphaWithColor(bool abX);
	bool GetMultiplyAlphaWithColor();
	cBeamEnd@ GetEnd();
	cVector3f GetAxis();
	cVector3f GetMidPosition();


}

class iPhysicsRope
{
	const tString& GetName();
	int GetUniqueID();
	void SetActive(bool abX);
	bool GetActive();
	void RemoveAttachedBody(iPhysicsBody @apBody,  bool abRemoveContainerFromBody);
	void SetGravityForce(const cVector3f&in avX);
	const cVector3f& GetGravityForce();
	void SetDamping(float afX);
	float GetDamping();
	void SetParticleRadius(float afX);
	float GetParticleRadius();
	void SetSlideAmount(float afX);
	float GetSlideAmount();
	void SetCollide(bool abX);
	bool GetCollide();
	void SetSleeping(bool abX);
	int GetParticleNum();
	cVerletParticle@ GetParticle(int alIdx);
	int GetUpdateCount( const);
	void IncUpdateCount();
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength);
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength,  float afStiffness);
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afMinLength,  float afMaxLength,  float afStiffness);
	void UpdateLengthConstraintStretch(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength,  float afStiffness);
	void UpdateParticleCollisionConstraint(cVerletParticle@ apPart,  const cVector3f &in avPrevPos,  float afRadius);
	void SetPhysicsActive(bool abX);
	bool GetPhysicsActive();
	void SetMotorActive(bool abX);
	bool GetMotorActive();
	void SetMotorWantedLength(float afX);
	void SetMotorSpeedMul(float afX);
	void SetMotorMaxSpeed(float afX);
	void SetMotorMinSpeed(float afX);
	float GetMotorWantedLength();
	float GetMotorSpeedMul();
	float GetMotorMaxSpeed();
	float GetMotorMinSpeed();
	void SetMotorSound(const tString&in asSound);
	void SetMotorSoundStartSpeed(float afX);
	void SetMotorSoundStopSpeed(float afX);
	const tString& GetMotorSound();
	float GetMotorSoundStartSpeed();
	float GetMotorSoundStopSpeed();
	void SetAutoMoveActive(bool abX);
	void SetAutoMoveAcc(float afX);
	void SetAutoMoveMaxSpeed(float afX);
	void SetAutoMoveSpeed(float afX);
	bool GetAutoMoveActive();
	float GetAutoMoveAcc();
	float GetAutoMoveMaxSpeed();
	float GetAutoMoveSpeed();
	cVerletParticle@ GetStartParticle();
	cVerletParticle@ GetEndParticle();
	void SetAttachedStartBody(iPhysicsBody @apBody);
	void SetAttachedEndBody(iPhysicsBody @apBody);
	iPhysicsBody@ GetAttachedStartBody();
	iPhysicsBody@ GetAttachedEndBody();
	void SetTotalLength(float afX);
	float GetTotalLength();
	void SetMinTotalLength(float afX);
	void SetMaxTotalLength(float afX);
	float GetMinTotalLength();
	float GetMaxTotalLength();
	void SetSegmentLength(float afX);
	float GetSegmentLength();
	float GetFirstSegmentLength();
	void SetMaxIterations(int alX);
	int GetMaxIterations();
	void SetStrength(float afX);
	float GetStrength();
	void SetStiffness(float afX);
	float GetStiffness();
	void SetCollideAttachments(bool abX);
	bool GetCollideAttachments();
	void UpdateConstraints();
	void RenderDebug(iLowLevelGraphics@ apLowLevel);


}

class cWidgetSlider
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	int GetValue();
	void SetValue(int alValue,  bool abGenCallback=true);
	int GetMaxValue();
	void SetMaxValue(int alMax);
	int GetButtonValueAdd();
	void SetButtonValueAdd(int alAdd);
	int GetBarClickValueAdd();
	void SetBarClickValueAdd(int alAdd);
	int GetBarValueSize();
	void SetBarValueSize(int alSize);
	float GetButtonSize();


}

class iVerletParticleContainer
{
	const tString& GetName();
	int GetUniqueID();
	void SetActive(bool abX);
	bool GetActive();
	void RemoveAttachedBody(iPhysicsBody @apBody,  bool abRemoveContainerFromBody);
	void SetGravityForce(const cVector3f&in avX);
	const cVector3f& GetGravityForce();
	void SetDamping(float afX);
	float GetDamping();
	void SetParticleRadius(float afX);
	float GetParticleRadius();
	void SetSlideAmount(float afX);
	float GetSlideAmount();
	void SetCollide(bool abX);
	bool GetCollide();
	void SetSleeping(bool abX);
	int GetParticleNum();
	cVerletParticle@ GetParticle(int alIdx);
	int GetUpdateCount( const);
	void IncUpdateCount();
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength);
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength,  float afStiffness);
	void UpdateLengthConstraint(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afMinLength,  float afMaxLength,  float afStiffness);
	void UpdateLengthConstraintStretch(cVerletParticle@ apP1,  cVerletParticle@ apP2,  float afLength,  float afStiffness);
	void UpdateParticleCollisionConstraint(cVerletParticle@ apPart,  const cVector3f &in avPrevPos,  float afRadius);


}

class cGuiSet
{
	void DestroyAllWidgets();
	void ResetMouseOver();
	void DrawGfx(cGuiGfxElement@ apGfx,  const cVector3f &in avPos);
	void DrawGfx(cGuiGfxElement@ apGfx,  const cVector3f &in avPos,  const cVector2f &in avSize,  const cColor&in aColor);
	void DrawGfx(cGuiGfxElement@ apGfx,  const cVector3f &in avPos,  const cVector2f &in avSize,  const cColor&in  aColor,  eGuiMaterial aMaterial,  float afRotationAngle,  bool abUseCustomPivot,  const cVector3f&in  avCustomPivot);
	void DrawFont(const tWString &in asText, iFontData @apFont,  const cVector3f &in avPos, const cVector2f &in avSize,  const cColor&in  aColor);
	void DrawFontEx(const tWString &in asText,  iFontData @apFont,  const cVector3f &in avPos, const cVector2f &in avSize,  const cColor&in  aColor,  eFontAlign aAlign,  eGuiMaterial aMaterial);
	cWidgetWindow@ CreateWidgetWindow(int alFlags,  const cVector3f &in avLocalPos,  const cVector2f &in avSize, 	const tWString &in asText,  iWidget @apParent,  const tString&in  asName  );
	cWidgetFrame@ CreateWidgetFrame( const cVector3f &in avLocalPos,  const cVector2f &in avSize,  bool abDrawFrame,  iWidget @apParent,  bool abHScrollBar,  bool abVScrollBar,  const tString&in  asName  );
	cWidgetButton@ CreateWidgetButton(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  const tWString &in asText,  iWidget @apParent,  bool abToggleable,  const tString&in  asName );
	cWidgetLabel@ CreateWidgetLabel(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  const tWString &in asText,  iWidget @apParent, const tString&in  asName  );
	cWidgetSlider@ CreateWidgetSlider(eWidgetSliderOrientation aOrientation,  const cVector3f &in avLocalPos,  const cVector2f &in avSize,  int alMaxValue,  iWidget @apParent,  const tString&in  asName  );
	cWidgetTextBox@ CreateWidgetTextBox(const cVector3f &in avLocalPos,  const cVector2f &in avSize, const tWString &in asText,  iWidget @apParent, 	eWidgetTextBoxInputType aeType, float afNumericAdd,  bool abShowButtons,  const tString&in  asName  );
	cWidgetCheckBox@ CreateWidgetCheckBox(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  const tWString &in asText,  iWidget @apParent,  const tString&in  asName  );
	cWidgetImage@ CreateWidgetImage(const tString &in asFile,  const cVector3f &in avLocalPos,  const cVector2f &in avSize,  eGuiMaterial aMaterial, bool abAnimate,  iWidget @apParent,  const tString&in  asName  );
	cWidgetListBox@ CreateWidgetListBox(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  iWidget @apParent,  const tString&in  asName  );
	cWidgetMultiPropertyListBox@ CreateWidgetMultiPropertyListBox(const cVector3f&in  avLocalPos,  const cVector2f&in  avSize,  iWidget@ apParent,  const tString&in  asName );
	cWidgetComboBox@ CreateWidgetComboBox(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  const tWString &in asText,  iWidget @apParent,  const tString&in  asName );
	cWidgetMenuItem@ CreateWidgetMenuItem(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  const tWString &in asText,  iWidget @apParent,  const tString&in  asName );
	cWidgetContextMenu@ CreateWidgetContextMenu(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  const tWString &in asText, iWidget @apParent,  const tString&in  asName );
	cWidgetMainMenu@ CreateWidgetMainMenu(iWidget @apParent,  const tString&in  asName );
	cWidgetTabFrame@ CreateWidgetTabFrame(const cVector3f &in avLocalPos,  const cVector2f &in avSize, 	const tWString &in asText,  iWidget @apParent,  bool abAllowHScroll, bool abAllowVScroll, 	const tString&in  asName );
	cWidgetGroup@ CreateWidgetGroup(const cVector3f &in avLocalPos,  const cVector2f &in avSize,  const tWString &in asText,  iWidget @apParent,  const tString&in  asName );
	cWidgetDummy@ CreateWidgetDummy(const cVector3f &in avLocalPos,  iWidget @apParent, const tString&in  asName );
	iWidget@ GetWidgetFromName(const tString&in  asName);
	void DestroyWidget(iWidget @apWidget,  bool abDestroyChildren);
	bool IsValidWidget(iWidget @apWidget);
	void ShowContextMenu( cWidgetContextMenu@ apMenu,  const cVector3f&in  avPosition );
	void RemoveWindow(cWidgetWindow@ apWin);
	void SetLastWindowZ(float afX);
	void SetWindowOnTop(cWidgetWindow@ apWin);
	void SetActive(bool abX);
	bool IsActive();
	const tString& GetName();
	void SetDrawMouse(bool abX);
	bool GetDrawMouse();
	void SetMouseZ(float afZ);
	float GetMouseZ();
	void SetMouseMovementEnabled(bool abX);
	bool GetMouseMovementEnabled();
	const cVector2f& GetMousePos();
	void SetRootWidgetClips(bool abX);
	bool GetRootWidgetClips();
	void SetVirtualSize(const cVector2f&in  avSize,  float afMinZ,  float afMaxZ,  const cVector2f&in  avOffset);
	const cVector2f& GetVirtualSize();
	const cVector2f& GetVirtualSizeOffset();
	void SetFocusedWidget(iWidget@ apWidget,  bool abCheckForValidity=false);
	iWidget@ GetFocusedWidget();
	void SetAttentionWidget(iWidget @apWidget,  bool abClearFocus);
	iWidget@ GetAttentionWidget();
	void SetIs3D(bool abX);
	bool Is3D();
	int GetDrawPriority();
	void SetDrawPriority(int alPrio);
	void SetCurrentPointer(cGuiGfxElement @apGfx);
	cGuiGfxElement@ GetCurrentPointer();
	void Set3DSize(const cVector3f&in  avSize);
	const cVector3f& Get3DSize();
	void SetCullBackface(bool abX);
	bool GetCullBackface();
	void Set3DTransform(const cMatrixf&in  a_mtxTransform);
	const cMatrixf& Get3DTransform();
	bool HasFocus();
	void SetSkin(cGuiSkin@ apSkin);
	cGuiSkin@ GetSkin();


}

class cForceField
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	void FadeTo(float afAmount,  float afTime);
	void FadeOut(float afTime);
	void SetRadius(float afX);
	float GetRadius();
	float GetFinalRadius();
	void SetFalloffStartRadius(float afX);
	float GetFalloffStartRadius();
	float GetFinalFalloffStartRadius();
	void SetForce(float afX);
	float GetForce();
	float GetFinalForce();
	void SetFreq(float afX);
	float GetFreq();
	float GetFinalFreq();
	void SetAutoRemove(bool abX);
	bool GetAutoRemove();
	float GetT();
	void SetPulsateActive(bool abX);
	bool GetPulsateActive();
	void SetPulsateRadiusMulMin(const cVector2f&in avVec);
	void SetPulsateRadiusMulMax(const cVector2f&in avVec);
	void SetPulsateForceMulMin(const cVector2f&in avVec);
	void SetPulsateForceMulMax(const cVector2f&in avVec);
	void SetPulsateDecSpeed(const cVector2f&in avVec);
	void SetPulsateIncSpeed(const cVector2f&in avVec);
	const cVector2f& GetPulsateRadiusMulMin();
	const cVector2f& GetPulsateRadiusMulMax();
	const cVector2f& GetPulsateForceMulMin();
	const cVector2f& GetPulsateForceMulMax();
	const cVector2f& GetPulsateDecSpeed();
	const cVector2f& GetPulsateIncSpeed();


}

class iLuxAchievementHandler
{
	void CreateAchievement(int alID,  const tString&in asName);
	void UnlockAchievement(int alID);
	void RegisterAchievements();
	bool GetAchievementUnlocked(int alID);
	tString GetAchievementDisplayName(int alID);
	tString GetAchievementDescription(int alID);
	int GetAchievementIcon(int alID);
	tString GetAchievementName(int alID);


}

class cLuxVoiceSource
{


}

class cLuxMusic
{


}

class cSoundEntity
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	void Play();
	void Stop(bool abPlayEndSound);
	void FadeIn(float afSpeed);
	void FadeIn(float afSpeed,  float afTargetVol);
	void FadeOut(float afSpeed);
	bool IsStopped();
	bool IsFadingOut();
	bool GetRemoveWhenOver();
	void FadeVolumeMul(float afDest,  float afSpeed);
	void FadeSpeedMul(float afDest,  float afSpeed);
	float GetElapsedTime();
	void SetElapsedTime(float afX);
	eSoundEntityDataType GetDataType();
	void SetupSoundFile(const tString&in asFile,  bool abLoop);
	const tString& GetSoundFile();
	void SetSoundFileLoop(bool abX);
	void SetSoundFile3D(bool abX);
	void SetSoundFileStream(bool abX);
	void SetSoundFileBlockable(bool abX);
	void SetSoundFileBlockMul(float afX);
	void SetSoundFilePriority(int alX);
	void SetSoundFileEntryType(eSoundEntryType aType);
	bool GetSoundFileLoop();
	bool GetSoundFile3D();
	bool GetSoundFileStream();
	bool GetSoundFileBlockable();
	float GetSoundFileBlockMul();
	int GetSoundFilePriority();
	eSoundEntryType GetSoundFileEntryType();
	void SetVolume(float afX);
	float GetVolume();
	void SetReverbAmount(float afX);
	float GetReverbAmount();
	void SetReverbActive(bool abX);
	bool GetReverbActive();
	bool IsOneShot();
	float GetMinDistance();
	float GetMaxDistance();
	void SetCustomMinDistance(float afX);
	void SetCustomMaxDistance(float afX);
	float GetCustomMinDistance();
	float GetCustomMaxDistance();
	void SetUseCustomProperties(bool abX);
	bool GetUseCustomProperties();
	void SetParam(int alIdx,  float afValue);
	void SetParam(const tString&in asName,  float afValue);
	void SetParamHash(int alHash,  float afValue);
	float GetParam(int alIdx);
	float GetParam(const tString&in asName);
	cSoundEntry@ GetSoundEntry(bool abCheckEntryValidity);
	int GetCreationID();
	void GetAverageSpectrum(array<float>&out aDestArray,  int alNumValues=64);


}

class cRect2l
{

	int x;
	int y;
	int w;
	int h;

}

class cLuxClosestCharCollider
{

	float mfDistance;
	cVector3f mvNormal;
	iPhysicsBody @mpBody;

}

class cGuiSetEntityIterator
{
	bool HasNext();
	cGuiSetEntity@ Next();
	cGuiSetEntity@ PeekNext();


}

class cLuxStateMachine
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void AddState(const tString&in asName,  int alId);
	void AddSubState(const tString&in asName,  int alId);
	void ChangeState(int alState);
	void ChangeSubState(int alState);
	int GetNextState();
	int GetPrevState();
	int GetNextSubState();
	int GetPrevSubState();
	int GetCurrentState();
	int GetCurrentSubState();
	void AddTimer(uint64 alId,  float afTime);
	void StopTimer(uint64 alId);
	bool TimerExists(uint64 alId);
	void AddTimer(const tString& in asId,  float afTime);
	void StopTimer(const tString& in asId);
	bool TimerExists(const tString& in asId);
	cLuxEntityMessageData@ GetCurrentMessageData();


}

class cMeshCollider
{


}

class cWidgetWindow
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetStatic(bool abX);
	bool GetStatic();
	void SetDrawLabel(bool abX);
	void SetCloseButtonDisablesWindow(bool abX);
	bool GetCloseButtonDisablesWindow();
	void SetEscapeKeyClosesWindow(bool abX);
	bool GetEscapeKeyClosesWindow();


}

class cLuxDialogInstance
{


}

class iPhysicsBody
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	iPhysicsMaterial@ GetMaterial();
	iCollideShape@ GetShape();
	iPhysicsJoint@ GetJoint(int alIndex);
	int GetJointNum();
	void RemoveJoint(iPhysicsJoint @apJoint);
	void SetLinearVelocity(const cVector3f &in avVel);
	cVector3f GetLinearVelocity( const);
	void SetAngularVelocity(const cVector3f &in avVel);
	cVector3f GetAngularVelocity( const);
	void SetLinearDamping(float afDamping);
	float GetLinearDamping( const);
	void SetAngularDamping(float afDamping);
	float GetAngularDamping( const);
	void SetMaxLinearSpeed(float afSpeed);
	float GetMaxLinearSpeed( const);
	void SetMaxAngularSpeed(float afDamping);
	float GetMaxAngularSpeed( const);
	cVector3f GetInertiaVector();
	cMatrixf GetInertiaMatrix();
	void SetNoGravityWhenUnderwater(bool abX);
	bool GetNoGravityWhenUnderwater();
	void SetIsUnderwater(bool abX);
	bool GetIsUnderwater();
	cVector3f GetVelocityAtPosition(const cVector3f&in avPos);
	cVector3f GetTorqueFromForceAtPosition(const cVector3f&in avForce,  const cVector3f&in avPos);
	void SetMass(float afMass);
	float GetMass( const);
	void SetMassCenter(const cVector3f&in avCentre);
	cVector3f GetMassCenter( const);
	void SetMassMulApplied(float afMul);
	float GetMassMulApplied();
	void AddForce(const cVector3f &in avForce);
	void AddForceAtPosition(const cVector3f &in avForce,  const cVector3f &in avPos);
	void AddTorque(const cVector3f &in avTorque);
	void AddImpulse(const cVector3f &in avImpulse);
	void AddImpulseAtPosition(const cVector3f &in avImpulse,  const cVector3f &in avPos);
	void Freeze();
	bool GetFrozen();
	void Enable();
	bool GetEnabled( const);
	void SetAutoDisable(bool abEnabled);
	bool GetAutoDisable( const);
	void SetAutoDisableLinearThreshold(float afThresold);
	float GetAutoDisableLinearThreshold( const);
	void SetAutoDisableAngularThreshold(float afThresold);
	float GetAutoDisableAngularThreshold( const);
	void SetAutoDisableNumSteps(int alNum);
	int GetAutoDisableNumSteps( const);
	void SetContinuousCollision(bool abOn);
	bool GetContinuousCollision();
	void SetGravity(bool abEnabled);
	bool GetGravity( const);
	void RenderDebugGeometry(iLowLevelGraphics@ apLowLevel, const cColor &in aColor);
	void StaticLinearMove(const cVector3f&in avVelocity);
	void StaticAngularMove(const cVector3f&in avVelocity);
	void SetBlocksSound(bool abX);
	bool GetBlocksSound();
	void SetBlocksLight(bool abX);
	bool GetBlocksLight();
	void SetUseSurfaceEffects(bool abX);
	bool GetUseSurfaceEffects();
	void SetCollide(bool abX);
	bool GetCollide(const);
	bool IsCharacter(const);
	void SetCollideCharacter(bool abX);
	bool GetCollideCharacter(const);
	iCharacterBody@ GetCharacterBody();
	void SetPushStrength(int alX);
	int GetPushStrength();
	void SetCollideFlags(uint alX);
	uint GetCollideFlags( const);
	bool IsRagDoll(const);
	void SetCollideRagDoll(bool abX);
	bool GetCollideRagDoll(const);
	void SetVolatile(bool abX);
	bool IsVolatile(const);
	void SetPushedByCharacterGravity(bool abX);
	bool GetPushedByCharacterGravity(const);
	void SetBuoyancyActive(bool abX);
	void SetBuoyancyDensity(float afX);
	void SetBuoyancyLinearViscosity(float afX);
	void SetBuoyancyAngularViscosity(float afX);
	void SetBuoyancySurface(const cPlanef &in aP);
	bool GetBuoyancyActive();
	float GetBuoyancyDensity();
	float GetBuoyancyLinearViscosity();
	float GetBuoyancyAngularViscosity();
	cPlanef GetBuoyancySurface();
	float GetBuoyancyDensityMul();
	void SetBuoyancyDensityMul(float afX);
	void SetGravityCanAttachCharacter(bool abX);
	void SetGravityAttachmentRotation(bool abX);
	void SetGravityAttachmentVelocity(bool abX);
	void SetGravityAttachmentVelocityAxes(eVelocityAxes aAxes);
	bool GetGravityCanAttachCharacter();
	bool GetGravityAttachmentRotation();
	bool GetGravityAttachmentVelocity();
	eVelocityAxes GetGravityAttachmentVelocityAxes();


}

class cActorAnimController
{
	void BeginLipsync(iLipsyncResult @apLipsync);
	void StopLipsync();
	void Stop(bool abFadeOut=false);
	void PlayGesture(int alID,  const tString&in asGesture);
	void PlayEmotion(const tString&in asEmotion,  float afDuration,  float afWeight = 1.0f,  float afFadeTime = 0.1f);


}

class iCollideShape
{
	iCollideShape@ GetSubShape(int alIdx);
	int GetSubShapeNum();
	const cVector3f& GetSize();
	float GetHeight();
	float GetWidth();
	float GetDepth();
	const cMatrixf& GetOffset();
	eCollideShapeType GetType();
	float GetVolume();
	cBoundingVolume@+ GetBoundingVolume();
	cVector3f GetHeightMapOffset();


}

class iSoundChannel
{
	void Play();
	void Stop();
	void SetPaused(bool abX);
	void SetSpeed(float afSpeed);
	void SetVolume(float afVolume);
	void SetPan(float afPan);
	bool Is3D();
	bool IsVirtual();
	bool IsPriorityReleased();
	void SetReverbActive(bool abX);
	bool GetReverbActive();
	void SetReverbAmount(float afX);
	float GetReverbAmount();
	void SetSpeakerSpread(float afX);
	float GetSpeakerSpread();
	void SetPriority(int alX);
	int GetPriority();
	void SetPostionIsHeadRelative(bool abX);
	void SetPosition(const cVector3f &in avPos);
	void SetVelocity(const cVector3f &in avVel);
	bool GetPostionIsHeadRelative();
	const cVector3f& GetPosition();
	const cVector3f& GetVelocity();
	void SetMinDistance(float fMin);
	void SetMaxDistance(float fMax);
	bool IsPlaying();
	float GetElapsedTime();
	float GetTotalTime();
	void SetElapsedTime(float afTime);
	bool GetPaused();
	float GetSpeed();
	float GetVolume();
	float GetPan();
	float GetMinDistance();
	float GetMaxDistance();
	iSoundData@ GetData();


}

class iPostEffectType
{


}

class cWorld
{
	void Update(float afTimeStep);
	void SetActive(bool abX);
	bool IsActive(  const);
	const cVector3f& GetWorldSize();
	tString GetName();
	void Compile(bool abCalcPhysicsWorldSize);
	void SetMainRenderableContainerVisible(bool abX);
	void GetSubMeshEntityInArea(array<cSubMeshEntity@> &inout avObjects,  const cVector3f&in avMin,  const cVector3f&in avMax);
	eIDSpace GetCurrentIDSpace();
	void SetCurrentIDSpace(eIDSpace aSpace);
	tID SetEntityID(iEntity3D@ apEntity,  tID alID);
	tID SetEntityID(iEntity3D@ apEntity,  eIDSpace aSpace,  uint alLocation,  uint alInner);
	iEntity3D@ GetEntityFromID(tID aID);
	void SetDistanceCullActive(bool abX);
	void SetDistanceCullMinRange(float afX);
	void SetDistanceCullScreenSize(float afX);
	void SetDistanceCullRandomSize(float afX);
	void SetDistanceCullMaxRange(float afX);
	void SetDistanceCullFadeSpeed(float afX);
	bool GetDistanceCullActive();
	float GetDistanceCullMinRange();
	float GetDistanceCullScreenSize();
	float GetDistanceCullRandomSize();
	float GetDistanceCullMaxRange();
	float GetDistanceCullFadeSpeed();
	void SetPhysicsWorld(iPhysicsWorld@ apWorld,  bool abAutoDelete);
	iPhysicsWorld@ GetPhysicsWorld();
	cTerrain@ GetTerrain();
	void SetTerrainActive(bool abX);
	bool GetTerrainActive();
	void SetSkyBox(iTexture @apTexture,  bool abAutoDestroy);
	void SetSkyBoxActive(bool abX);
	void SetSkyBoxColor(const cColor&in aColor);
	void SetSkyBoxBrightness(float afX);
	iTexture@ GetSkyBoxTexture();
	iVertexBuffer@ GetSkyBoxVertexBuffer();
	bool GetSkyBoxActive();
	const cColor& GetSkyBoxColor();
	float GetSkyBoxBrightness();
	cLightDirectional@ GetDirectionalLight();
	void SetDirectionalLightActive(bool abX);
	bool GetDirectionalLightActive();
	void SetFogActive(bool abX);
	void SetFogStart(float afX);
	void SetFogEnd(float afX);
	void SetFogFalloffExp(float afX);
	void SetFogColor(const cColor&in aCol);
	void SetFogBrightness(float afX);
	void SetSecondaryFogActive(bool abX);
	void SetSecondaryFogStart(float afX);
	void SetSecondaryFogEnd(float afX);
	void SetSecondaryFogFalloffExp(float afX);
	void SetSecondaryFogColor(const cColor&in aCol);
	void SetSecondaryFogBrightness(float afX);
	void SetFogCulling(bool abX);
	void SetFogUnderwater(bool abX);
	void SetFogUseSkybox(bool abX);
	void SetFogSkyboxTexture(iTexture@ apTexture);
	void SetFogApplyAfterFogAreas(bool abX);
	bool GetFogActive();
	float GetFogStart();
	float GetFogEnd();
	float GetFogFalloffExp();
	float GetFogBrightness();
	const cColor& GetFogColor();
	bool GetSecondaryFogActive();
	float GetSecondaryFogStart();
	float GetSecondaryFogEnd();
	float GetSecondaryFogFalloffExp();
	float GetSecondaryFogBrightness();
	const cColor& GetSecondaryFogColor();
	bool GetFogCulling();
	bool GetFogUnderwater();
	bool GetFogUseSkybox();
	bool GetFogApplyAfterFogAreas();
	iTexture@ GetFogSkyboxTexture();
	cMeshEntity@ CreateMeshEntity(const tString &in asName, cMesh@ apMesh,  bool abStatic);
	tID CreateMeshEntityID(const tString &in asName, cMesh@ apMesh,  bool abStatic);
	void DestroyMeshEntity(cMeshEntity@ apMesh);
	cMeshEntity@ GetDynamicMeshEntity(const tString&in asName);
	cMeshEntityIterator@ GetDynamicMeshEntityIterator();
	cMeshEntityIterator@ GetStaticMeshEntityIterator();
	cMeshEntity@ GetMeshEntityFromID(tID aID);
	cSubMeshEntity@ GetSubMeshEntityFromID(tID aID);
	cLightPoint@ CreateLightPoint(const tString &in asName, const tString &in asGobo,  bool abStatic);
	cLightSpot@ CreateLightSpot(const tString &in asName,  const tString &in asGobo,  bool abStatic);
	cLightBox@ CreateLightBox(const tString &in asName,  bool abStatic);
	tID CreateLightPointID(const tString &in asName, const tString &in asGobo,  bool abStatic);
	tID CreateLightSpotID(const tString &in asName,  const tString &in asGobo,  bool abStatic);
	tID CreateLightBoxID(const tString &in asName,  bool abStatic);
	void DestroyLight(iLight@ apLight);
	iLight@ GetLight(const tString&in asName);
	iLight@ GetLightFromID(tID aID);
	void FadeInIrradianceSet(const tString&in asSetName,  float afTime);
	cLightListIterator@ GetLightIterator();
	cLightMaskBoxListIterator@ GetLightMaskBoxIterator();
	cBillboard@ CreateBillboard(const tString&in  asName,  const cVector2f&in  avSize, eBillboardType aType, const tString&in  asMaterial, bool abStatic);
	tID CreateBillboardID(const tString&in  asName,  const cVector2f&in  avSize, eBillboardType aType, const tString&in  asMaterial, bool abStatic);
	void DestroyBillboard(cBillboard@ apObject);
	cBillboard@ GetBillboard(const tString&in  asName);
	cBillboard@ GetBillboardFromID(tID alID);
	cBillboardIterator@ GetBillboardIterator();
	cBillboardGroup@ CreateBillboardGroup(const tString&in asName,  const tString&in asMaterial,  bool abStatic);
	tID CreateBillboardGroupID(const tString&in asName,  const tString&in asMaterial,  bool abStatic);
	void DestroyBillboardGroup(cBillboardGroup@ apObject);
	cBillboardGroup@ GetBillboardGroup(const tString&in asName);
	cBillboardGroup@ GetBillboardGroupFromID(tID alID);
	void RemoveBillboardFromGroup(cBillboard @apObject,  cBillboardGroup @apGroup);
	void AddBillboardToGroup(cBillboard @apObject,  cBillboardGroup @apGroup);
	cBillboardGroupIterator@ GetBillboardGroupIterator();
	cFogArea@ CreateFogArea(const tString&in  asName,  bool abStatic);
	tID CreateFogAreaID(const tString&in  asName,  bool abStatic);
	void DestroyFogArea(cFogArea@ apFogArea);
	cFogArea@ GetFogArea(const tString&in  asName);
	cFogArea@ GetFogAreaFromID(tID alID);
	cFogAreaIterator@ GetFogAreaIterator();
	cForceField@ CreateForceField(const tString&in  asName, bool abAutoRemove,  bool abStatic);
	tID CreateForceFieldID(const tString&in  asName, bool abAutoRemove,  bool abStatic);
	void DestroyForceField(cForceField@ apForce);
	cForceField@ GetForceField(const tString&in  asName);
	cForceField@ GetForceFieldFromID(tID alID);
	cForceFieldIterator@ GetForceFieldIterator();
	cParticleSystem@ CreateParticleSystem(	const tString&in  asName, const tString&in  asType,  const cVector3f&in  avSize,  bool abRemoveWhenDead,  bool abStatic);
	tID CreateParticleSystemID(	const tString&in  asName, const tString&in  asType,  const cVector3f&in  avSize,  bool abRemoveWhenDead,  bool abStatic);
	void DestroyParticleSystem(cParticleSystem@ apPS);
	cParticleSystem@ GetParticleSystem(const tString&in  asName);
	cParticleSystem@ GetParticleSystemFromID(tID alID);
	bool ParticleSystemExists(cParticleSystem@ apPS);
	cParticleSystemIterator@ GetParticleSystemIterator();
	void DestroyAllParticleSystems();
	cEnvironmentParticles@ GetEnvironmentParticles(int i);
	void SetEnvironmentParticlesActive(bool abX);
	bool GetEnvironmentParticlesActive();
	int GetEnvironmentParticleNum();
	cBeam@ CreateBeam(const tString&in  asName,  bool abStatic);
	tID CreateBeamID(const tString&in  asName,  bool abStatic);
	void DestroyBeam(cBeam@ apObject);
	cBeam@ GetBeam(const tString&in  asName);
	cBeam@ GetBeamFromID(tID alID);
	cBeamIterator@ GetBeamIterator();
	cGuiSetEntity@ CreateGuiSetEntity(const tString&in asName,  cGuiSet @apSet,  bool abStatic);
	tID CreateGuiSetEntityID(const tString&in asName,  cGuiSet @apSet,  bool abStatic);
	void DestroyGuiSetEntity(cGuiSetEntity@ apObject);
	cGuiSetEntity@ GetGuiSetEntity(const tString&in asName);
	cGuiSetEntity@ GetGuiSetEntityFromID(tID alID);
	cGuiSetEntityIterator@ GetGuiSetEntityIterator();
	iRopeEntity@ CreateRopeEntity(const tString&in asName,  eRopeType aRopeType,  iPhysicsRope @apRope,  int alMaxSegments,  int alRingSegments = 3);
	tID CreateRopeEntityID(const tString&in asName,  eRopeType aRopeType,  iPhysicsRope @apRope,  int alMaxSegments,  int alRingSegments = 3);
	void DestroyRopeEntity(iRopeEntity@ apRope);
	iRopeEntity@ GetRopeEntity(const tString&in asName);
	iRopeEntity@ GetRopeEntityFromID(tID alID);
	cRopeEntityIterator@ GetRopeEntityIterator();
	cClothEntity@ CreateClothEntity(const tString&in asName,  iPhysicsCloth @apCloth,  const tString&in asMaterial = "");
	tID CreateClothEntityID(const tString&in asName,  iPhysicsCloth @apCloth,  const tString&in asMaterial = "");
	void DestroyClothEntity(cClothEntity@ apCloth);
	cClothEntity@ GetClothEntity(const tString&in asName);
	cClothEntity@ GetClothEntityFromID(tID alID);
	cClothEntityIterator@ GetClothEntityIterator();
	cSoundEntity@ CreateSoundEntity(const tString &in asName, const tString &in asSoundDataFile,  bool abRemoveWhenOver);
	cSoundEntity@ CreateSoundEntityEx(const tString &in asName, const tString &in asSoundDataFile,  bool abRemoveWhenOver,  bool abNonBlockLoad);
	tID CreateSoundEntityID(const tString &in asName, const tString &in asSoundDataFile,  bool abRemoveWhenOver);
	tID CreateSoundEntityExID(const tString &in asName, const tString &in asSoundDataFile,  bool abRemoveWhenOver,  bool abNonBlockLoad);
	void DestroySoundEntity(cSoundEntity@ apEntity);
	cSoundEntity@ GetSoundEntity(const tString&in  asName);
	cSoundEntity@ GetSoundEntityFromID(tID alID);
	cSoundEntity@ GetSoundEntityFromCreationID(int alID);
	void DestroyAllSoundEntities();
	bool SoundEntityExists(cSoundEntity@ apEntity,  int alCreationID);
	cSoundEntityIterator@ GetSoundEntityIterator();
	bool IsValid(cSoundEntity@ apEntity);
	void SetDepthOfFieldActive(bool abX);
	void SetDepthOfFieldFocusStart(float afX);
	void SetDepthOfFieldFocusEnd(float afX);
	float GetDepthOfFieldFocusStart();
	float GetDepthOfFieldFocusEnd();
	bool IsDepthOfFieldActive();
	void SetDepthOfFieldBokehTexture(iTexture@ apTexture);
	iTexture@ GetDepthOfFieldBokehTexture();
	void SetDepthOfFieldFalloff(float afX);
	float GetDepthOfFieldFalloff();
	void FadeToneMappingExposure(float afX,  float afTime);
	void SetToneMappingKey(float afX);
	void FadeToneMappingWhiteCut(float afX,  float afTime);
	float GetToneMappingExposure();
	float GetToneMappingKey();
	float GetToneMappingWhiteCut();
	float GetToneMappingFadeTime();
	void FadeGradingTexture(const tString&in asTexture,  float afTime);
	void SetDefaultGradingTexture(iTexture@ apGrading);
	iTexture@ GetDefaultGradingTexture();
	cExposureArea@ CreateExposureArea(const tString&in asName);
	tID CreateExposureAreaID(const tString&in asName);
	void DestroyExposureArea(cExposureArea@ apExposureArea);
	cExposureArea@ GetExposureArea(const tString&in asName);
	cExposureArea@ GetExposureAreaFromID(tID alID);
	cExposureAreaIterator@ GetExposureAreaIterator();
	cLensFlare@ CreateLensFlare(const tString &in asName,  const cVector2f &in avSize, const tString &in asMaterial, bool abStatic);
	tID CreateLensFlareID(const tString &in asName,  const cVector2f &in avSize, const tString &in asMaterial, bool abStatic);
	void DestroyLensFlare(cLensFlare@ apObject);
	cLensFlare@ GetLensFlare(const tString &in asName);
	cLensFlare@ GetLensFlareFromID(tID alID);
	cLensFlareIterator@ GetLensFlareIterator();


}

class cExposureAreaIterator
{
	bool HasNext();
	cExposureArea@ Next();
	cExposureArea@ PeekNext();


}

class cEvent
{
	const tString& GetName(const);
	int GetId(const);
	const tString& GetOutput( const);
	void SetOutput(const tString&in asOutput);
	int GetOutputId(int alId);
	void SetOutputId(int alId);
	void AddCriteria(const tString&in asFactName);
	void AddCriteriaStringCompare(const tString&in asFactName,  const tString&in asValue,  eEventCompareType aCompareType);
	void AddCriteriaFloatCompare(const tString&in asFactName,  float afValue,  eEventCompareType aCompareType);
	void AddCriteriaIntCompare(const tString&in asFactName,  int alValue,  eEventCompareType aCompareType);
	void AddCriteriaFloatCompare(const tString&in asFactName,  float afMin,  float afMax,  eEventCompareType aCompareType);
	void AddCriteriaIntCompare(const tString&in asFactName,  int alMin,  int alMax,  eEventCompareType aCompareType);
	int GetCriterionNum();
	void AddActionFactSet(const tString&in asFact);
	void AddActionStringSet(const tString&in asFact,  const tString&in asValue);
	void AddActionFloatOp(const tString&in asFact,  float afValue,  eEventOpType aOpType);
	void AddActionIntOp(const tString&in asFact,  int alValue,  eEventOpType aOpType);
	int GetActionNum();


}

class cPostEffect_ChromaticAberration
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();
	void GetParams(float &out afAmount,  float &out afRotation,  float &out afHue,  cVector2f &out  avOffset);
	void SetParams(float afAmount,  float afRotation,  float afHue,  const cVector2f&in avOffset);


}

class iKeyboard
{
	bool KeyIsDown(eKey aKey);
	cKeyPress GetKey();
	bool KeyIsPressed();
	int GetModifier();
	cKeyPress GetReleasedKey();
	bool KeyIsReleased();
	tString KeyToString(eKey);
	tString KeyToSymbol(eKey);
	tString ModifierKeyToString(eKeyModifier);
	eKey StringToKey(const tString&in);


}

class iVideoStream
{


}

class cLuxState
{


}

class cSmoothInterpolationVec3
{
	void SetMaxValues(int alMax);
	void Add(const cVector3f&in aNewVal);
	void Clear();
	cVector3f GetOutput();


}

class cKeyPress
{
	eKey GetKey( const);
	int GetUnicode( const);
	int GetModifier( const);


}

class cLuxDialogBranchEvent
{


}

class cRopeEntityIterator
{
	bool HasNext();
	cRopeEntity3D@ Next();
	cRopeEntity3D@ PeekNext();


}

class cFogAreaIterator
{
	bool HasNext();
	cFogArea@ Next();
	cFogArea@ PeekNext();


}

class cWidgetSingleValueSlider
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetMinValue(int alValue);
	int GetMinValue();
	void SetMaxValue(int alValue);
	int GetMaxValue();
	void SetValue(int alValue,  bool abGenCallback=true);
	int GetValue();


}

class cLuxEdgeGlow
{
	iLuxEntity@ GetEntity();
	eLuxEntityComponentType GetType();
	void LoadFromInstanceVariables(cResourceVarsObject@ apInstanceVars);
	void SetColor(const cColor&in aColor);
	cColor GetColor();
	void SetAlpha(float afX);
	float GetAlpha();
	void SetEdgeThickness(float afX);
	float GetEdgeThickness();
	void SetLightLimit(float afX);
	float GetLightLimit();
	void SetActive(bool abX);
	bool IsActive();


}

class cLuxScriptClassFader
{


}

class iWidget
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();


}

class cBeamIterator
{
	bool HasNext();
	cBeam@ Next();
	cBeam@ PeekNext();


}

class iPhysicsWorld
{
	void PostUpdate(float afTimeStep);
	void SetMaxTimeStep(float afTimeStep);
	float GetMaxTimeStep();
	void SetWorldSize(const cVector3f &in avMin, const cVector3f &in avMax);
	cVector3f GetWorldSizeMin();
	cVector3f GetWorldSizeMax();
	void SetGravity(const cVector3f&in avGravity);
	cVector3f GetGravity();
	void SetAccuracyLevel(ePhysicsAccuracy aAccuracy);
	ePhysicsAccuracy GetAccuracyLevel();
	iPhysicsBody@ GetPhysicsBodyFromID(tID aID);
	iPhysicsJoint@ GetPhysicsJointFromID(tID aID);
	iCharacterBody@ GetCharacterBodyFromID(tID aID);
	void SetNumberOfThreads(int alThreads);
	int GetNumberOfThreads();
	iCollideShape@ CreateBoxShape(const cVector3f &in avSize,  cMatrixf&in a_mtxOffsetMtx);
	iCollideShape@ CreateSphereShape(const cVector3f &in avRadii,  cMatrixf&in a_mtxOffsetMtx);
	iCollideShape@ CreateCylinderShape(float afRadius,  float afHeight,  cMatrixf&in a_mtxOffsetMtx);
	iCollideShape@ CreateCapsuleShape(float afRadius,  float afHeight,  cMatrixf&in a_mtxOffsetMtx);
	iCollideShape@ CreateMeshShape(iVertexBuffer @apVtxBuffer);
	iCollideShape@ LoadMeshShapeFromBuffer(cBinaryBuffer @apBuffer);
	void SaveMeshShapeToBuffer(iCollideShape@ apMeshShape,  cBinaryBuffer @apBuffer);
	iCollideShape@ CreateCompundShape(array<iCollideShape@> &in avShapes);
	void DestroyShape(iCollideShape @apShape);
	iPhysicsJointBall@ CreateJointBall(const tString &in asName,  const cVector3f&in avPivotPoint, const cVector3f&in avPinDir,  iPhysicsBody@ apParentBody,  iPhysicsBody @apChildBody);
	iPhysicsJointHinge@ CreateJointHinge(const tString &in asName,  const cVector3f&in avPivotPoint, const cVector3f&in avPinDir,  iPhysicsBody@ apParentBody,  iPhysicsBody @apChildBody);
	iPhysicsJointSlider@ CreateJointSlider(const tString &in asName,  const cVector3f&in avPivotPoint, const cVector3f&in avPinDir,  iPhysicsBody@ apParentBody,  iPhysicsBody @apChildBody);
	tID CreateJointBallID(const tString &in asName,  const cVector3f&in avPivotPoint, const cVector3f&in avPinDir,  iPhysicsBody@ apParentBody,  iPhysicsBody @apChildBody);
	tID CreateJointHingeID(const tString &in asName,  const cVector3f&in avPivotPoint, const cVector3f&in avPinDir,  iPhysicsBody@ apParentBody,  iPhysicsBody @apChildBody);
	tID CreateJointSliderID(const tString &in asName,  const cVector3f&in avPivotPoint, const cVector3f&in avPinDir,  iPhysicsBody@ apParentBody,  iPhysicsBody @apChildBody);
	void DestroyJoint(iPhysicsJoint@ apJoint);
	iPhysicsJoint@ GetJoint(const tString &in asName);
	bool JointExists(iPhysicsJoint@ apJoint);
	iPhysicsMaterial@ CreateMaterial(const tString &in asName);
	iPhysicsMaterial@ GetMaterialFromName(const tString &in asName);
	iPhysicsMaterial@ GetMaterialFromId(int alId);
	iPhysicsBody@ CreateBody(const tString &in asName, iCollideShape @apShape,  float afMass);
	tID CreateBodyID(const tString &in asName, iCollideShape @apShape,  float afMass);
	void DestroyBody(iPhysicsBody@ apBody);
	iPhysicsBody@ GetBody(const tString &in asName);
	iCharacterBody@ CreateCharacterBody(const tString &in asName,  const cVector3f &in avSize);
	tID CreateCharacterBodyID(const tString &in asName,  const cVector3f &in avSize);
	void DestroyCharacterBody(iCharacterBody@ apBody);
	iPhysicsBody@ GetCharacterBody(const tString &in asName);
	void GetBodiesInAABB(const cVector3f&in avMin,  const cVector3f&in avMax,  array<iPhysicsBody@> &inout apBodyVec);
	void EnableBodiesInAABB(const cVector3f&in avMin,  const cVector3f&in avMax,  bool abEnabled);
	iPhysicsRope@ CreateRope(const tString &in asName,  const cVector3f &in avStartPos,  const cVector3f &in avEndPos);
	iPhysicsRope@ GetRope(const tString &in asName);
	iPhysicsRope@ GetRopeFromUniqueID(int alID);
	void DestroyRope(iPhysicsRope@ apRope);
	iPhysicsCloth@ CreateCloth(const tString &in asName,  const cVector3f &in avStartPos,  const cVector2f &in avClothSize,  int alDimension);
	iPhysicsCloth@ GetCloth(const tString &in asName);
	iPhysicsCloth@ GetClothFromUniqueID(int alID);
	void DestroyCloth(iPhysicsCloth@ apCloth);
	iPhysicsController@ CreateController(const tString &in asName);
	void DestroyController(iPhysicsController @apController);
	void FadeoutAllLoopSounds(float afFadeSpeed);
	bool CheckShapeCollision(iCollideShape@ apShapeA,  const cMatrixf&in a_mtxA,  iCollideShape@ apShapeB,  const cMatrixf&in a_mtxB,  cCollideData &inout aCollideData,  int alMaxPoints,  bool abCorrectNormalDirection,  int alThreadID=0);
	float CastRayOnShape(iCollideShape @apShape,  const cMatrixf&in a_mtxTransform,  const cVector3f &in avOrigin,  const cVector3f&in avEnd, cVector3f&out avOutNormal,  bool abLocalRayPositions);
	bool CheckShapeWorldCollision(cVector3f&out avPushVector,  iCollideShape@ apShape,  const cMatrixf&in a_mtxTransform,  iPhysicsBody@ apSkipBody,  bool abSkipStatic,  bool abIsCharacter,  bool abCollideCharacter);
	bool CheckShapeWorldCollision(cVector3f&out avPushVector,  iCollideShape@ apShape,  const cMatrixf&in a_mtxTransform,  iPhysicsBody@ apSkipBody,  bool abSkipStatic);
	void RenderShapeDebugGeometry(	iCollideShape @apShape,  const cMatrixf&in a_mtxTransform,  iLowLevelGraphics @apLowLevel,  const cColor&in aColor);
	void RenderDebugGeometry(iLowLevelGraphics @apLowLevel);


}

class cAINodeContainer
{
	const tString& GetNodeName();
	const tString& GetName();
	const cVector3f& GetCollideSize();
	int GetNodeNum( const);
	cAINode@ GetNode(int alIdx);
	cAINode@ GetNodeFromName(const tString &in asName);
	cAINode@ GetNodeFromID(int alID);
	cAINodeIterator@ GetNodeIterator(const cVector3f &in avPosition,  float afRadius);


}

class cLuxPlayerState
{
	const tString& GetName();
	int GetId();

	int mlId;
	cLuxPlayer @mpPlayer;

}

class iRenderer
{


}

class cSoundEventParamInfo
{
	const tString& GetName(const);
	int GetIndex();
	float GetMin();
	float GetMax();


}

class cSurfaceImpactData
{
	float GetMinSpeed();
	const tString& GetSoundName();
	const tString& GetPSName();
	int GetPSPrio();


}

class cEntityBodyExtraData
{

	cMatrixf m_mtxLocalTransform;

}

class cSoundEntry
{
	const tString& GetName();
	eSoundEntryType GetType();
	int GetId();
	eSoundEntryDataType GetDataType();
	bool IsFirstTime();
	void SetBlockable(bool abX);
	void SetBlockVolumeMul(float afX);
	void SetPosition(const cVector3f&in avPosition);
	void SetVelocity(const cVector3f&in avVelocity);
	const cVector3f& GetPosition();
	void SetPostionIsHeadRelative(bool abX);
	bool GetPostionIsHeadRelative();
	bool IsPlaying();
	float GetElapsedTime();
	void SetElapsedTime(float afTime);
	float GetTotalTime();
	float GetAudibility();
	void SetParam(const tString &in asName,  float afValue);
	void SetParam(int alIdx,  float afValue);
	int GetParamNum();
	float GetParamValue(int alIdx);
	float GetParamMin(int alIdx);
	float GetParamMax(int alIdx);
	const tString& GetParamName(int alIdx);
	void SetPaused(bool abX);
	void SetVolume(float afX);
	void SetSpeed(float afX);
	bool GetPaused();
	float GetVolume();
	float GetSpeed();
	float GetVolumeMul();
	float GetSpeedMul();
	float GetMinDistance();
	float GetMaxDistance();
	void SetReverbActive(bool abX);
	bool GetReverbActive();
	void SetReverbAmount(float afX);
	float GetReverbAmount();
	void SetSpeakerSpread(float afX);
	float GetSpeakerSpread();
	bool IsPriorityReleased();
	bool Is3D();
	bool IsOneShot();
	bool IsVirtual();
	void Stop(bool abPlayEnd);
	void SetVolumeMul(float afMul);
	void SetSpeedMul(float afMul);
	void FadeVolumeMulTo(float afDestMul,  float afSpeed);
	void FadeSpeedMulTo(float afDestMul,  float afSpeed);
	void FadeOut(float afSpeed);
	void FadeIn(float afVolumeMul, float afSpeed);
	void SetStopDisabled(bool abX);
	bool GetStopDisabled();


}

class cGuiGfxAnimation
{
	void AddFrame(int alNum);
	void SetType(eGuiGfxAnimationType aType);
	void SetFrameLength(float afLength);


}

class iSoundData
{


}

class cCamera
{
	const cVector3f& GetPosition(const);
	void SetPosition(const cVector3f&in avPos);
	const cVector3f& GetVelocity(const);
	void SetVelocity(const cVector3f&in avVel);
	void MoveForward(float afDist);
	void MoveRight(float afDist);
	void MoveUp(float afDist);
	void SetFOV(float afAngle);
	float GetFOV();
	void SetAspect(float afSpect);
	float GetAspect();
	void SetFarClipPlane(float afX);
	float GetFarClipPlane();
	void SetNearClipPlane(float afX);
	float GetNearClipPlane();
	void SetOrthoViewSize(const cVector2f &in avSize);
	const cVector2f& GetOrthoViewSize();
	void SetInifintiveFarPlane(bool abX);
	bool GetInifintiveFarPlane();
	cFrustum@+ GetFrustum();
	cFrustum@+ GetExtendedFrustum();
	void SetProjectionType(eProjectionType aType);
	eProjectionType GetProjectionType();
	eCameraRotateMode GetRotateMode();
	eCameraMoveMode GetMoveMode();
	void SetRotateMode(eCameraRotateMode aMode);
	void SetMoveMode(eCameraMoveMode aMode);
	void ResetRotation();
	void UnProject(cVector3f &out avPosition,  cVector3f &out apDirection,  const cVector2f&in avScreenPos,  const cVector2f&in avVirtualScreenSize);
	void AttachEntity(iEntity3D@ aEntity);
	void RemoveEntity(iEntity3D@ aEntity);
	cNode3D@ GetAttachmentNode();
	void ClearAttachedEntities();
	void SetPitch(float afAngle);
	void SetYaw(float afAngle);
	void SetRoll(float afAngle);
	void AddPitch(float afAngle);
	void AddYaw(float afAngle);
	void AddRoll(float afAngle);
	float GetPitch( const);
	float GetYaw( const);
	float GetRoll( const);
	void SetPitchLimits(float afMin,  float afMax);
	float GetPitchMinLimit();
	float GetPitchMaxLimit();
	void SetYawLimits(float afMin,  float afMax);
	float GetYawMinLimit();
	float GetYawMaxLimit();
	void SetExtendedPitch(float afAngle);
	void SetExtendedYaw(float afAngle);
	void SetExtendedRoll(float afAngle);
	float GetExtendedPitch( const);
	float GetExtendedYaw( const);
	float GetExtenededRoll( const);
	void SetForward(const cVector3f&in avX);
	void SetRight(const cVector3f&in avX);
	void SetUp(const cVector3f&in avX);
	void SetRotationMatrix(const cMatrixf&in a_mtxRot);
	cVector3f GetForward();
	cVector3f GetRight();
	cVector3f GetUp();
	const cMatrixf& GetRotationMatrix();
	const cMatrixf& GetViewMatrix();
	const cMatrixf& GetMatrix();
	const cMatrixf& GetProjectionMatrix();
	const cMatrixf& GetMoveMatrix();


}

class cAnimation
{


}

class cVector3l
{
	int GetElement(uint64 alIdx,  const);
	void SetElement(uint64 alIdx, int,  const);
	int SqrLength( const);

	int x;
	int y;
	int z;

}

class cEnvironmentParticles
{
	void SetBoxDistance(float afDistance);
	void SetFadeInStart(float afX);
	void SetFadeInEnd(float afX);
	void SetFadeOutStart(float afX);
	void SetFadeOutEnd(float afX);
	void SetIterationNum(float afNum);
	float GetIterationNum();
	int GetIterationNumInt();
	void SetColor(const cColor &in aCol);
	void SetBrightness(float afX);
	cColor GetColor();
	float GetBrightness();
	void SetGravityVelocity(const cVector3f &in  avVel);
	void SetWindVelocity(const cVector3f &in  avVel);
	void SetRotateVelocity(const cVector3f &in  avVel);
	bool SetVisible(bool abX);
	cVector3f GetGravityVelocity();
	cVector3f GetWindVelocity();
	cVector3f GetRotateVelocity();
	void SetGravitySpeedRandomAmount(float afX);
	void SetWindSpeedRandomAmount(float afX);
	void SetWindDirectionRandomAmount(float afX);
	void SetRotateSpeedRandomAmount(float afX);
	void SetRotateSpeedRandomBothDirs(bool abX);
	void SetClipActive(bool abX);
	bool GetClipActive();
	void AddClipArea(iEntity3D@ apClipEntity,  bool abSubtractive);
	void RemoveClipArea(iEntity3D@ apClipEntity);
	const tString& GetName();
	void SetSpotLight(cLightSpot@ apSpotLight,  float afMul);


}

class cFrustum
{
	void SetupPerspectiveProj(const cMatrixf&in a_mtxProj,  const cMatrixf&in a_mtxView,  float afFarPlane, float afNearPlane, float afFOV,  float afAspect,  const cVector3f &in avOrigin);
	void SetupOrthoProj( const cMatrixf&in a_mtxProj,  const cMatrixf&in a_mtxView,  float afFarPlane, float afNearPlane, const cVector2f &in avViewSize,  const cVector3f &in avOrigin);
	const cPlanef& GetPlane(eFrustumPlane aType);
	const cVector3f& GetVertex(int alIdx);
	bool CollidePoint(const cVector3f&in avPoint);
	eCollision CollideBoundingVolume(cBoundingVolume@+ apBV);
	eCollision CollideFrustum(cFrustum@+ apFrustum);
	eCollision CollideFustrumSphere(const cVector3f&in avCenter,  float afRadius);
	eCollision CollideSphere(const cVector3f&in avCenter,  float afRadius,  int alMaxPlanes);
	eCollision CollideAABB(const cVector3f&in avMin, const cVector3f&in avMax,  int alMaxPlanes);
	const cMatrixf& GetProjectionMatrix();
	const cMatrixf& GetViewMatrix(const);
	float GetFarPlane(const);
	float GetNearPlane(const);
	float GetAspect( const);
	float GetFOV( const);
	bool GetInfFarPlane();
	void SetInvertsCullMode(bool abX);
	bool GetInvertsCullMode();
	eProjectionType GetProjectionType( const);
	const cVector2f& GetOrthoViewSize( const);
	bool CheckSphereNearPlaneIntersection(const cVector3f &in avCenter,  float afRadius);
	bool CheckAABBNearPlaneIntersection(const cVector3f &in avMin,  const cVector3f &in avMax);
	bool CheckBVNearPlaneIntersection(cBoundingVolume@+ aBV);
	bool CheckFrustumNearPlaneIntersection(cFrustum@+ aFrustum);
	bool CheckPyramidNearPlaneIntersection(cFrustum@+ aFrustum);
	bool CheckLineIntersection(const cVector3f&in avStart,  const cVector3f &in avEnd,  cVector3f &in avIntersection);
	const cBoundingVolume@+ GetBoundingVolume();
	const cVector3f& GetOrigin();
	cBoundingVolume@+ GetOriginBV();
	cVector3f GetForward();


}

class cWidgetImage
{
	void Update(float afTimeStep);
	bool ProcessMessage(eGuiMessage aMessage,  const cGuiMessageData&in aData,  bool abSkipVisCheck=false,  bool abSkipEnabledCheck=false);
	eWidgetType GetType();
	void Init();
	cGuiGlobalShortcut@ AddShortcut(int alKeyModifiers,  eKey aKey,  eGuiMessage aMsg=eGuiMessage_ButtonPressed,  const cGuiMessageData&in aData=cGuiMessageData,  bool abBypassVisibility=true,  bool abBypassEnabled=true);
	void SetToolTip(const tWString&in asToolTip);
	const tWString& GetToolTip();
	void SetToolTipEnabled(bool abX);
	iWidget@ GetToolTipWidget();
	bool PointIsInside(const cVector2f&in avPoint,  bool abOnlyClipped);
	void AttachChild(iWidget@ apChild);
	void RemoveChild(iWidget@ apChild);
	cGuiSet@ GetSet();
	iWidget@ GetParent();
	void SetEnabled(bool abX);
	bool IsEnabled();
	void SetVisible(bool abX);
	bool IsVisible();
	bool HasFocus();
	bool IsRightUnderMouse();
	void SetName(const tString&in asName);
	const tString& GetName(const);
	void SetText(const tWString&in asText);
	const tWString& GetText(const);
	iFontData@ GetDefaultFontType(const);
	void SetDefaultFontType(iFontData@ apFont);
	const cColor& GetDefaultFontColor(const);
	void SetDefaultFontColor(const cColor&in aColor);
	const cVector2f& GetDefaultFontSize(const);
	void SetDefaultFontSize(const cVector2f&in avSize);
	void SetClipActive(bool abX);
	bool GetClipActive(const);
	void SetPosition(const cVector3f&in avPos);
	void SetGlobalPosition(const cVector3f&in avPos);
	const cVector3f& GetLocalPosition(const);
	const cVector3f& GetGlobalPosition();
	void SetChildrenOffset(const cVector3f&in);
	const cVector3f& GetChildrenOffset(const);
	void SetAffectedByScroll(bool abX);
	void SetScrollAmount(const cVector3f&in avX);
	const cVector3f& GetScrollAmount(const);
	void CenterGlobalPositionInSet();
	void SetSize(const cVector2f&in avSize);
	const cVector2f& GetSize(const);
	void SetColorMul(const cColor&in aColor);
	const cColor& GetColorMul(const);
	bool ClipsGraphics();
	bool GetMouseIsOver(const);
	bool IsConnectedTo(iWidget@ apWidget,  bool abIsStartWidget=true);
	bool IsConnectedToChildren();
	void SetConnectedToChildren(bool abX);
	cGuiGfxElement@ GetPointerGfx();
	void SetGlobalKeyPressListener(bool abX);
	bool IsGlobalKeyPressListener(const);
	void SetUserValue(int alX);
	int GetUserValue(const);
	void SetCallbacksDisabled(bool abX);
	bool GetCallbacksDisabled(const);
	void SetFocusNavigation(eUIArrow aDir,  iWidget@ apWidget);
	iWidget@ GetFocusNavigation(eUIArrow aDir);
	bool HasFocusNavigation();
	void SetGlobalUIInputListener(bool abX);
	bool IsGlobalUIInputListener();
	void SetImage(cGuiGfxElement @apGfx);
	cGuiGfxElement@ GetImage();


}

class cLuxMap
{
	cWorld@ GetWorld();
	iPhysicsWorld@ GetPhysicsWorld();
	const tString& GetName();
	const tString& GetFileName();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	bool GetIsUnderwater();
	void SetIsUnderwater(bool abX);
	void SetDisplayNameEntry(const tString&in asEntry);
	const tString& GetDisplayNameEntry();
	float GetMaxInteractDistance();
	void SetMaxInteractDistance(float afX);
	void CreateEntity(const tString&in asName,  const tString&in asFile,  const cMatrixf&in a_mtxTransform,  const cVector3f&in avScale);
	bool DestroyEntity(iLuxEntity @apEntity);
	bool EntityWasDestroyed();
	bool EntityExists(iLuxEntity @apEntity);
	iLuxEntity@ GetEntityByName(const tString&in asName,  eLuxEntityType aType=eLuxEntityType_LastEnum,  const tString&in asClassName="");
	iLuxEntity@ GetEntityByID(tID alID,  eLuxEntityType aType=eLuxEntityType_LastEnum,  const tString&in asClassName="");
	tID GetEntityIDByName(const tString&in asName,  eLuxEntityType aType=eLuxEntityType_LastEnum,  const tString&in asClassName="");
	iLuxEntity@ GetLatestEntity();
	void ResetLatestEntity();
	bool GetEntityArray(const tString&in asName,  eLuxEntityType aType,  const tString&in asClassName,  array<iLuxEntity@> &inout avOutEntities);
	bool GetEntityArrayID(const tString&in asName,  eLuxEntityType aType,  const tString&in asClassName,  array<tID> &inout avOutEntities);
	void SetVoiceSource(const tString &in asCharacter,  const tString &in asEntityName,  float afMinDistance,  float afMaxDistance,  bool abUse3D,  float afMaxPlayerListeningRange,  float afMinFreq = 22000,  float afMaxFreq = 22000,  uint aFrequencyFlag = 0);
	iLuxEntity@ GetVoiceSourceEntity(const tString &in asCharacter);
	iLuxEntity@ GetPlayerEntity();
	void AddTimer(const tString&in asName,  float afTime,  const tString&in asFunction);
	void RemoveTimer(const tString&in asName);
	float GetTimerTime(const tString&in asName);
	void SetTimerPaused(const tString&in asName,  bool abX);
	bool GetTimersNamed(const tString&in asPattern,  array<tString> &inout avOutNames);
	void SetTimerUserVarFloat(const tString&in asName,  float afX);
	void SetTimerUserVarInt(const tString&in asName,  int alX);
	void SetTimerUserVarString(const tString&in asName,  const tString&in asX);
	float GetTimerUserVarFloat(const tString&in asName);
	int GetTimerUserVarInt(const tString&in asName);
	const tString& GetTimerUserVarString(const tString&in asName);
	float IncTimerUserVarFloat(const tString&in asName,  float afX);
	int IncTimerUserVarInt(const tString&in asName,  int alX);
	void RestartCurrentTimer(float afNewTime=-1);
	void AddEntityComponent(iLuxEntityComponent @apComp);
	void RemoveEntityComponent(iLuxEntityComponent @apComp);
	iLuxEntityComponent@ GetEntityComponent(eLuxEntityComponentType aType,  const tString&in asName);
	cLuxEntityComponentIterator@ GetEntityComponentIterator(eLuxEntityComponentType aType);
	void PlacePlayerAtStartPos(const tString&in asName);
	int GetTimeStamp();
	float GetElapsedTime(int alTimeStamp);
	bool IsActive();
	void SetActive(bool abX);
	void AddDissolveEntity(cMeshEntity @apMeshEntity,  float afTime);
	bool IsDeletingAllWorldEntities();
	void BroadcastSoundHeardEvent(const tString& in asName,  const cVector3f&in avPosition,  float afRadius,  int alPrio,  bool abPhysicsObject=false);
	bool ScriptPrepare(const tString&in asMethod);
	bool ScriptPrepareFast(const tString&in asMethod,  int alId);
	bool ScriptExecute();
	bool ScriptMethodExists(const tString&in asMethod);
	bool ScriptMethodExistsFast(const tString&in asMethod,  int alId);
	void SetArgBool(int alArgNum,  bool abVal);
	void SetArgInt(int alArg,  int alX);
	void SetArgFloat(int alArg,  float afX);
	void SetArgString(int alArg,  const tString &in asStr);
	void SetArgVector2f(int alArg,  const cVector2f &in avX);
	void SetArgVector3f(int alArg,  const cVector3f &in avX);
	void SetArgVector2l(int alArg,  const cVector2l &in avX);
	void SetArgVector3l(int alArg,  const cVector3l &in avX);
	bool GetReturnBool();
	int GetReturnInt();
	float GetReturnFloat();
	tString GetReturnString();
	void CheckLineOfSight(const tString&in asCallbackFunc,  const cVector3f&in avStart,  const cVector3f&in avEnd,  bool abCheckOnlyShadowCasters,  bool abCheckOnlyStatic);
	void GetClosestEntity(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alInteractType,  bool abCheckLineOfSight);
	void GetClosestBody(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength);
	void GetClosestCharCollider(const tString&in asCallbackFunc,  const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic);
	void GetLightLevelAtPos(const tString&in asCallbackFunc,  const cVector3f&in avPos,  iLight@ apSkipLight,  float afRadiusAdd);
	uint GetCollideFlag(const tString&in asGroupName);
	void SetPlayerTerrainCollision(bool abX);
	bool GetPlayerTerrainCollision();
	void PreloadParticleSystem(const tString &in asFile);
	void PreloadEntity(const tString&in asFile);
	void PreloadMaterial(const tString&in asFile);
	void PreloadGuiGfx(const tString&in asFile,  eImGuiGfx aType);


}

class cAction
{
	void AddKey(eKey aKey);
	void AddMouseButton(eMouseButton aButton);
	void AddGamepadButton(int alPadIndex,  eGamepadButton aButton);
	void AddGamepadAxis(int alPadIndex,  eGamepadAxis aAxis,  eGamepadAxisRange aRange,  float afMinThreshold,  float afMaxThreshold);
	void AddGamepadHat(int alPadIndex,  eGamepadHat aHat,  eGamepadHatState aHatState);
	void AddSubAction(iSubAction @apSubAction);
	void ClearSubActions();
	bool IsTriggered();
	bool WasTriggered();
	bool BecameTriggered();
	bool DoubleTriggered(float afLimit);
	void ResetToCurrentState();
	iSubAction@ GetSubAction(int alIdx);
	int GetSubActionNum();
	const tString& GetName();
	int GetId();


}

class cCollideData
{
	int GetPointNum();
	const cCollidePoint& GetPoint(int alIdx);
	void SetMaxSize(int alSize);


}

class cImGuiCheckBoxData
{

	cColor mColorBase;
	cColor mColorText;
	cColor mColorDisabled;
	cVector2f mvDefaultSize;
	bool mbUseBackgroundGfx;
	cImGuiGfx mGfxBackground;
	cImGuiFont mFont;
	eFontAlign mFontAlign;
	bool mbUseDisabledColor;
	bool mbUseBackgroundInFocusGfx;
	cImGuiGfx mGfxBackgroundInFocus;
	cVector2f mvBoxSize;
	cImGuiGfx mGfxBox;
	cVector2f mvCheckOverlaySize;
	cImGuiGfx mGfxCheckOverlay;
	bool mbUseBoxInFocusGfx;
	cImGuiGfx mGfxBoxInFocus;

}

class cPostEffect_ToneMapping
{
	void SetDisabled(bool abX);
	bool IsDisabled();
	void SetActive(bool abX);
	bool IsActive();
	void Reset();
	void FadeGradingTexture(iTexture @apGrading,  float afTime);
	void FadeExposure(float afExposure,  float afWhiteCut,  float afTime);
	void FadeWindowExposure(float afExposure,  float afWhiteCut);
	float GetTransitionTime();
	void SetColorGradingActive(bool abX);
	void SetBloomActive(bool abX);
	void SetFilmGrainActive(bool abX);
	bool GetColorGradingActive();
	bool GetBloomActive();
	bool GetFilmGrainActive();
	void SetSRGBGamma(bool abX);
	float GetExposure();
	void GetParams(float &out afKey,  float &out afGammaCorrection,  float &out afFilmGrainIntensity,  float &out afBrightPass,  float &out afBloomWidth,  cColor &out avBloomTint,  float &out afBloomFalloff);
	void SetParams(float afKey,  float afGammaCorrection,  float afFilmGrainIntensity,  float afBrightPass,  float afBloomWidth,  const cColor&in avBloomTint,  float afBloomFalloff);


}

class cLightDirectional
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	eLightType GetLightType();
	void SetGoboTexture(iTexture @apTexture);
	iTexture@ GetGoboTexture();
	void SetGoboAnimMode(eTextureAnimMode aMode);
	eTextureAnimMode GetGoboAnimMode();
	void SetGoboAnimFrameTime(float afX);
	float GetGoboAnimFrameTime();
	void SetGoboAnimStartTime(float afX);
	float GetGoboAnimStartTime();
	int GetGoboNextFrame();
	void SetMask(cLightMaskBox @apMask);
	cLightMaskBox@ GetMask();
	void AttachBillboard(cBillboard @apBillboard,  const cColor &in aBaseColor,  float afBaseBrightness);
	void RemoveBillboard(cBillboard @apBillboard);
	void AttachParticleSystem(cParticleSystem @apPS);
	void RemoveParticleSystem(cParticleSystem @apPS);
	void FadeTo(const cColor&in aCol,  float afRadius,  float afTime);
	void StopFading();
	bool IsFading();
	const cColor& GetDestColor();
	float GetDestRadius();
	void SetFlickerActive(bool abX);
	bool GetFlickerActive();
	void SetFlicker(const cColor&in aOffCol,  float afOffRadius, float afOnMinLength,  float afOnMaxLength, const tString &in asOnSound, const tString &in asOnPS,  float afOffMinLength,  float afOffMaxLength, const tString &in asOffSound, const tString &in asOffPS,  bool abFade, 	float afOnFadeMinLength,  float afOnFadeMaxLength,  float afOffFadeMinLength,  float afOffFadeMaxLength);
	const tString& GetFlickerOffSound();
	const tString& GetFlickerOnSound();
	const tString& GetFlickerOffPS();
	const tString& GetFlickerOnPS();
	float GetFlickerOnMinLength();
	float GetFlickerOffMinLength();
	float GetFlickerOnMaxLength();
	float GetFlickerOffMaxLength();
	const cColor& GetFlickerOffColor();
	float GetFlickerOffRadius();
	bool GetFlickerFade();
	float GetFlickerOnFadeMinLength();
	float GetFlickerOnFadeMaxLength();
	float GetFlickerOffFadeMinLength();
	float GetFlickerOffFadeMaxLength();
	const cColor& GetFlickerOnColor();
	float GetFlickerOnRadius();
	const cColor& GetDiffuseColor();
	void SetDiffuseColor(const cColor&in aColor);
	const cColor& GetDefaultDiffuseColor();
	void SetDefaultDiffuseColor(const cColor&in aColor);
	const cColor& GetSpecularColor();
	void SetSpecularColor(cColor aColor);
	bool GetCastShadows();
	void SetCastShadows(bool afX);
	int GetShadowCastersAffected();
	void SetShadowCastersAffected(int alX);
	eShadowMapResolution GetShadowMapResolution( const);
	void SetShadowMapResolution(eShadowMapResolution aQuality);
	float GetShadowMapBlurAmount( const);
	void SetShadowMapBlurAmount(float afX);
	bool GetOcclusionCullShadowCasters( const);
	void SetOcclusionCullShadowCasters(bool abX);
	float GetShadowMapBiasMul();
	float GetShadowMapSlopeScaleBiasMul();
	void SetShadowMapBiasMul(float afX);
	void SetShadowMapSlopeScaleBiasMul(float afX);
	void SetRadius(float afX);
	float GetRadius();
	void SetFalloffPow(float afX);
	float GetFalloffPow();
	float GetSourceRadius();
	void SetSourceRadius(float afX);
	void SetBrightness(float afX);
	float GetBrightness();
	void SetCastTerrainShadow(bool abX);
	bool GetCastTerrainShadow();
	float GetTranslucency();
	void SetTranslucency(float afX);
	void SetDirection(const cVector3f&in avDir);
	const cVector3f& GetDirection();
	void SetAmbientColorSky(const cColor &in aColor);
	void SetAmbientColorGround(const cColor &in aColor);
	const cColor& GetAmbientColorSky();
	const cColor& GetAmbientColorGround();
	cFrustum@+ GetFrustum();
	void SetShadowCasterDistance(float afX);
	float GetShadowCasterDistance();
	void SetAutoShadowSliceSettings(bool abX);
	bool GetAutoShadowSliceSettings();
	void SetAutoShadowSliceLogTerm(float afX);
	float GetAutoShadowSliceLogTerm();
	cLightDirectional_ShadowSlice@ GetShadowSliceProperties(int alIdx);


}

class tWString
{
	uint64 length( const);
	void resize(uint64);


}

class cForceFieldIterator
{
	bool HasNext();
	cForceField@ Next();
	cForceField@ PeekNext();


}

class iLight
{
	eEntityType GetEntityType();
	tID GetID();
	int GetUniqueID();
	void UpdateLogic(float afTimeStep);
	const tString& GetName(const);
	void SetName(const tString&in asName);
	bool HasParent();
	bool IsActive(const);
	void SetActive(bool abActive);
	cVector3f GetLocalPosition();
	cMatrixf& GetLocalMatrix();
	cVector3f GetWorldPosition();
	cMatrixf& GetWorldMatrix();
	void SetPosition(const cVector3f&in avPos);
	void SetMatrix(const cMatrixf&in a_mtxTransform);
	void SetWorldPosition(const cVector3f&in avWorldPos);
	void SetWorldMatrix(const cMatrixf&in a_mtxWorldTransform);
	int GetTransformUpdateCount();
	cBoundingVolume@+ GetBoundingVolume();
	bool GetScriptableIsSaved();
	void SetScriptableIsSaved(bool abX);
	void AddChild(iEntity3D @apEntity);
	void RemoveChild(iEntity3D @apEntity);
	bool IsChild(iEntity3D @apEntity);
	iEntity3D@ GetEntityParent();
	cEntity3DIterator@ GetChildIterator();
	const tString& GetRenderName();
	cMaterial@ GetMaterial();
	iVertexBuffer@ GetVertexBuffer();
	bool CollidesWithBV(cBoundingVolume@+ apBV);
	bool CollidesWithFrustum(cFrustum @apFrustum);
	cBoundingVolume@+ GetRenderBV();
	cVector3f GetWorldCenterPosition();
	eRenderableType GetRenderType();
	void SetRenderFlagBit(int alFlagBit,  bool abSet);
	bool GetRenderFlagBit(int alFlagBit);
	int GetRenderFlags( const);
	bool IsStatic();
	bool IsOccluder();
	bool IsVisible();
	void SetVisible(bool abVisible);
	bool GetVisibleVar();
	void SetIlluminationColor(const cColor&in aColor);
	const cColor& GetIlluminationColor(const);
	void SetCoverageAmount(float afX);
	float GetCoverageAmount(const);
	int GetMatrixUpdateCount();
	int GetRenderFrameCount( const);
	void SetRenderFrameCount(int alCount);
	void UseAutomaticLiquidAmount(float afTime = 0);
	void SetLiquidAmount(float afX);
	float GetLiquidAmount(const);
	eLightType GetLightType();
	void SetGoboTexture(iTexture @apTexture);
	iTexture@ GetGoboTexture();
	void SetGoboAnimMode(eTextureAnimMode aMode);
	eTextureAnimMode GetGoboAnimMode();
	void SetGoboAnimFrameTime(float afX);
	float GetGoboAnimFrameTime();
	void SetGoboAnimStartTime(float afX);
	float GetGoboAnimStartTime();
	int GetGoboNextFrame();
	void SetMask(cLightMaskBox @apMask);
	cLightMaskBox@ GetMask();
	void AttachBillboard(cBillboard @apBillboard,  const cColor &in aBaseColor,  float afBaseBrightness);
	void RemoveBillboard(cBillboard @apBillboard);
	void AttachParticleSystem(cParticleSystem @apPS);
	void RemoveParticleSystem(cParticleSystem @apPS);
	void FadeTo(const cColor&in aCol,  float afRadius,  float afTime);
	void StopFading();
	bool IsFading();
	const cColor& GetDestColor();
	float GetDestRadius();
	void SetFlickerActive(bool abX);
	bool GetFlickerActive();
	void SetFlicker(const cColor&in aOffCol,  float afOffRadius, float afOnMinLength,  float afOnMaxLength, const tString &in asOnSound, const tString &in asOnPS,  float afOffMinLength,  float afOffMaxLength, const tString &in asOffSound, const tString &in asOffPS,  bool abFade, 	float afOnFadeMinLength,  float afOnFadeMaxLength,  float afOffFadeMinLength,  float afOffFadeMaxLength);
	const tString& GetFlickerOffSound();
	const tString& GetFlickerOnSound();
	const tString& GetFlickerOffPS();
	const tString& GetFlickerOnPS();
	float GetFlickerOnMinLength();
	float GetFlickerOffMinLength();
	float GetFlickerOnMaxLength();
	float GetFlickerOffMaxLength();
	const cColor& GetFlickerOffColor();
	float GetFlickerOffRadius();
	bool GetFlickerFade();
	float GetFlickerOnFadeMinLength();
	float GetFlickerOnFadeMaxLength();
	float GetFlickerOffFadeMinLength();
	float GetFlickerOffFadeMaxLength();
	const cColor& GetFlickerOnColor();
	float GetFlickerOnRadius();
	const cColor& GetDiffuseColor();
	void SetDiffuseColor(const cColor&in aColor);
	const cColor& GetDefaultDiffuseColor();
	void SetDefaultDiffuseColor(const cColor&in aColor);
	const cColor& GetSpecularColor();
	void SetSpecularColor(cColor aColor);
	bool GetCastShadows();
	void SetCastShadows(bool afX);
	int GetShadowCastersAffected();
	void SetShadowCastersAffected(int alX);
	eShadowMapResolution GetShadowMapResolution( const);
	void SetShadowMapResolution(eShadowMapResolution aQuality);
	float GetShadowMapBlurAmount( const);
	void SetShadowMapBlurAmount(float afX);
	bool GetOcclusionCullShadowCasters( const);
	void SetOcclusionCullShadowCasters(bool abX);
	float GetShadowMapBiasMul();
	float GetShadowMapSlopeScaleBiasMul();
	void SetShadowMapBiasMul(float afX);
	void SetShadowMapSlopeScaleBiasMul(float afX);
	void SetRadius(float afX);
	float GetRadius();
	void SetFalloffPow(float afX);
	float GetFalloffPow();
	float GetSourceRadius();
	void SetSourceRadius(float afX);
	void SetBrightness(float afX);
	float GetBrightness();
	void SetCastTerrainShadow(bool abX);
	bool GetCastTerrainShadow();
	float GetTranslucency();
	void SetTranslucency(float afX);


}

class tString
{
	uint64 length( const);
	void resize(uint64);


}

class cEventScene
{
	const tString& GetName(const);
	int GetId(const);


}

interface iRendererCallback
{

}

interface iScrAchievementHandler_Interface
{
	void CreateAchievements();
	iLuxAchievementHandler@ GetBase();

}

interface iScrPlayerState_Interface
{
	cLuxPlayerState@ GetBase();
	void CharBody_GravityCollide(iCharacterBody@ apCharBody,  iPhysicsBody@ apBody,  cCollideData @apCollideData);
	void CharBody_HitGround(iCharacterBody@ apCharBody, const cVector3f &in avVel);
	void LoadUserConfig();
	void SaveUserConfig();
	void OnMapEnter(cLuxMap @apMap);
	void OnMapLeave(cLuxMap @apMap);
	void CreateWorldEntities(cLuxMap @apMap);
	void DestroyWorldEntities(cLuxMap @apMap);
	void OnEnterState(int alPrevStateId);
	void OnLeaveState(int alNextStateId);
	void Reset();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	bool OnAction(int alAction,  bool abPressed);
	bool OnAnalogInput(int alAnalogId,  const cVector3f &in avAmount);
	bool OnExitPressed();
	bool AllowBuoyancy(iPhysicsBody @apBody);
	float DrawDebugOutput(cGuiSet @apSet, iFontData @apFont, float afStartY);

}

interface iScrPlayer_Interface
{
	cLuxPlayer@ GetBase();
	void CharBody_GravityCollide(iCharacterBody@ apCharBody,  iPhysicsBody@ apBody,  cCollideData @apCollideData);
	void CharBody_HitGround(iCharacterBody@ apCharBody, const cVector3f &in avVel);
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void Reset();
	void OnDraw(float afFrameTime);
	void LoadUserConfig();
	void SaveUserConfig();
	void OnMapEnter(cLuxMap @apMap);
	void OnMapLeave(cLuxMap @apMap);
	void CreateWorldEntities(cLuxMap @apMap);
	void DestroyWorldEntities(cLuxMap @apMap);
	void OnEnterContainer(const tString&in asOldContainer);
	void OnLeaveContainer(const tString&in asNewContainer);
	void PreloadData(cLuxMap @apMap);
	void OnExitPressed();
	void OnAction(int alAction,  bool abPressed);
	void OnAnalogInput(int alAnalogId,  const cVector3f &in avAmount);
	void OnUnderwaterEffectActive(bool abX,  bool abUseStartAndEndEffects);
	int GetCharacterState();
	void SetCharacterState(int alState);
	float DrawDebugOutput(cGuiSet @apSet, iFontData @apFont, float afStartY);
	void SetupStartPos(const cVector3f&in avPos,  float afAngle,  bool abCrouching);

}

interface iScrUserModule_Interface
{
	cLuxUserModule@ GetBase();
	void Update(float afTimeStep);
	void PostUpdate(float afTimeStep);
	void VariableUpdate(float afDeltaTime);
	void Reset();
	void OnDraw(float afFrameTime);
	void OnPostRender(float afFrameTime);
	void LoadUserConfig();
	void SaveUserConfig();
	void OnMapEnter(cLuxMap @apMap);
	void OnMapLeave(cLuxMap @apMap);
	void CreateWorldEntities(cLuxMap @apMap);
	void DestroyWorldEntities(cLuxMap @apMap);
	void PreloadData(cLuxMap @apMap);
	void OnEnterContainer(const tString&in asOldContainer);
	void OnLeaveContainer(const tString&in asNewContainer);
	void OnExitPressed();
	void OnAction(int alAction,  bool abPressed);
	void OnAnalogInput(int alAnalogId,  const cVector3f &in avAmount);
	void AppGotInputFocus();
	void AppLostInputFocus();

}

interface iScrAgent_Interface
{
	cLuxAgent@ GetBase();
	void SetupAfterLoad(cWorld @apWorld,  cResourceVarsObject@ apVars,  cResourceVarsObject@ apInstanceVars);
	void BeforeEntityDestruction();
	void ResetProperties();
	void OnSetActive(bool abX);
	void SetupCharBody();

}

interface iScrDialogHandler_Interface
{
	cLuxDialogHandler@ GetBase();

}

interface iScrEffect_Interface
{
	cLuxEffect@ GetBase();
	void OnStart();
	void OnDestroy();
	void OnMapEnter(cLuxMap @apMap);
	void OnMapLeave(cLuxMap @apMap);
	void Reset();
	void Update(float afTimeStep);
	void OnDraw(float afFrameTime);

}

interface iViewportCallback
{

}

interface iScrUsersHandler_Interface
{
	iLuxUsersHandler@ GetBase();

}

interface iScrMoveState_Interface
{
	cLuxMoveState@ GetBase();
	void CharBody_GravityCollide(iCharacterBody@ apCharBody,  iPhysicsBody@ apBody,  cCollideData @apCollideData);
	void CharBody_HitGround(iCharacterBody@ apCharBody, const cVector3f &in avVel);
	void OnMapEnter(cLuxMap @apMap);
	void OnEnterState(int alPrevStateId);
	void OnLeaveState(int alNextStateId);
	void Reset();
	void Update(float afTimeStep);
	bool OnAction(int alAction,  bool abPressed);
	bool OnAnalogInput(int alAnalogId,  const cVector3f &in avAmount);
	float DrawDebugOutput(cGuiSet @apSet, iFontData @apFont, float afStartY);

}

interface iScrEventDatabaseHandler_Interface
{
	void ExecuteEventAction(const tString& in asEventName,  int alOutputType, const tString& in asOutput);
	cLuxEventDatabaseHandler@ GetBase();

}

interface iScrHeroStatsHandler_Interface
{
	void CreateHeroStats();
	iLuxHeroStatsHandler@ GetBase();

}

interface iScrLiquidArea_Interface
{
	cLuxLiquidArea@ GetBase();
	void SetupAfterLoad(cWorld @apWorld,  cResourceVarsObject @apVars);
	void BeforeEntityDestruction();
	void ResetProperties();
	void OnSetActive(bool abX);

}

interface iScrInputHandler_Interface
{
	void CreateActions();
	void CreateGamepadProfiles();
	void CreateInputLayoutMapping();
	void LoadKeyConfig(cConfigFile@ apKeyConfig);
	cLuxInputHandler@ GetBase();

}

interface iScrRichPresenceHandler_Interface
{
	void CreateRichPresences();
	iLuxRichPresenceHandler@ GetBase();

}

interface iScrProp_Interface
{
	cLuxProp@ GetBase();
	void SetupAfterLoad(cWorld @apWorld,  cResourceVarsObject@ apVars,  cResourceVarsObject@ apInstanceVars);
	void BeforeEntityDestruction();
	void ResetProperties();
	void OnSetActive(bool abX);

}

interface iScrGuiHandler_Interface
{
	void UpdateDefaultInput(cImGui @apImGui);
	void SetDefaultData(cImGui @apImGui);
	cLuxGuiHandler@ GetBase();

}

interface iScrCritter_Interface
{
	cLuxCritter@ GetBase();
	void SetupAfterLoad(cWorld @apWorld,  cResourceVarsObject@ apVars,  cResourceVarsObject@ apInstanceVars);
	void BeforeEntityDestruction();
	void ResetProperties();
	void OnSetActive(bool abX);

}

interface iScrArea_Interface
{
	cLuxArea@ GetBase();
	void SetupAfterLoad(cWorld @apWorld,  cResourceVarsObject @apVars);
	void BeforeEntityDestruction();
	void ResetProperties();
	void OnSetActive(bool abX);

}

enum eEulerRotationOrder
{
	eEulerRotationOrder_XYZ,
	eEulerRotationOrder_XZY,
	eEulerRotationOrder_YXZ,
	eEulerRotationOrder_YZX,
	eEulerRotationOrder_ZXY,
	eEulerRotationOrder_ZYX,
	eEulerRotationOrder_LastEnum

}

enum eAxis2D
{
	eAxis2D_X,
	eAxis2D_Y,
	eAxis2D_LastEnum

}

enum eAxis3D
{
	eAxis3D_X,
	eAxis3D_Y,
	eAxis3D_Z,
	eAxis3D_LastEnum

}

enum eAxis4D
{
	eAxis4D_X,
	eAxis4D_Y,
	eAxis4D_Z,
	eAxis4D_W,
	eAxis4D_LastEnum

}

enum eAxisFlag
{
	eAxisFlag_X							= 1,
	eAxisFlag_Y							= 2,
	eAxisFlag_Z							= 4,
	eAxisFlag_All							= 7

}

enum eEasing
{
	eEasing_Linear,
	eEasing_SineIn,
	eEasing_SineOut,
	eEasing_SineInOut,
	eEasing_QuadIn,
	eEasing_QuadOut,
	eEasing_QuadInOut,
	eEasing_CubicIn,
	eEasing_CubicOut,
	eEasing_CubicInOut,
	eEasing_QuartIn,
	eEasing_QuartOut,
	eEasing_QuartInOut,
	eEasing_QuintIn,
	eEasing_QuintOut,
	eEasing_QuintInOut,
	eEasing_ExpoIn,
	eEasing_ExpoOut,
	eEasing_ExpoInOut,
	eEasing_CircIn,
	eEasing_CircOut,
	eEasing_CircInOut,
	eEasing_BackIn,
	eEasing_BackOut,
	eEasing_BackInOut,
	eEasing_ElasticIn,
	eEasing_ElasticOut,
	eEasing_ElasticInOut,
	eEasing_BounceIn,
	eEasing_BounceOut,
	eEasing_BounceInOut,
	eEasing_LastEnum

}

enum eProjectionType
{
	eProjectionType_Perspective,
	eProjectionType_Orthographic

}

enum eFrustumPlane
{
	eFrustumPlane_Left,
	eFrustumPlane_Right,
	eFrustumPlane_Bottom,
	eFrustumPlane_Top,
	eFrustumPlane_Near,
	eFrustumPlane_Far,
	eFrustumPlane_LastEnum

}

enum eCollision
{
	eCollision_Inside,
	eCollision_Outside,
	eCollision_Intersect,
	eCollision_LastEnum

}

enum eInputDeviceType
{
	eInputDeviceType_Keyboard,
	eInputDeviceType_Mouse,
	eInputDeviceType_Gamepad,
	eInputDeviceType_LastEnum							= 4

}

enum eMouseButton
{
	eMouseButton_Left,
	eMouseButton_Middle,
	eMouseButton_Right,
	eMouseButton_WheelUp,
	eMouseButton_WheelDown,
	eMouseButton_Button6,
	eMouseButton_Button7,
	eMouseButton_Button8,
	eMouseButton_Button9,
	eMouseButton_LastEnum

}

enum eKey
{
	eKey_BackSpace,
	eKey_Tab,
	eKey_Clear,
	eKey_Return,
	eKey_Pause,
	eKey_Escape,
	eKey_Space,
	eKey_Exclaim,
	eKey_QuoteDouble,
	eKey_Hash,
	eKey_Dollar,
	eKey_Ampersand,
	eKey_Quote,
	eKey_LeftParen,
	eKey_RightParen,
	eKey_Asterisk,
	eKey_Plus,
	eKey_Comma,
	eKey_Minus,
	eKey_Period,
	eKey_Slash,
	eKey_0,
	eKey_1,
	eKey_2,
	eKey_3,
	eKey_4,
	eKey_5,
	eKey_6,
	eKey_7,
	eKey_8,
	eKey_9,
	eKey_Colon,
	eKey_SemiColon,
	eKey_Less,
	eKey_Equals,
	eKey_Greater,
	eKey_Question,
	eKey_At,
	eKey_LeftBracket,
	eKey_BackSlash,
	eKey_RightBracket,
	eKey_Caret,
	eKey_Underscore,
	eKey_BackQuote,
	eKey_A,
	eKey_B,
	eKey_C,
	eKey_D,
	eKey_E,
	eKey_F,
	eKey_G,
	eKey_H,
	eKey_I,
	eKey_J,
	eKey_K,
	eKey_L,
	eKey_M,
	eKey_N,
	eKey_O,
	eKey_P,
	eKey_Q,
	eKey_R,
	eKey_S,
	eKey_T,
	eKey_U,
	eKey_V,
	eKey_W,
	eKey_X,
	eKey_Y,
	eKey_Z,
	eKey_Delete,
	eKey_KP_0,
	eKey_KP_1,
	eKey_KP_2,
	eKey_KP_3,
	eKey_KP_4,
	eKey_KP_5,
	eKey_KP_6,
	eKey_KP_7,
	eKey_KP_8,
	eKey_KP_9,
	eKey_KP_Period,
	eKey_KP_Divide,
	eKey_KP_Multiply,
	eKey_KP_Minus,
	eKey_KP_Plus,
	eKey_KP_Enter,
	eKey_KP_Equals,
	eKey_Up,
	eKey_Down,
	eKey_Right,
	eKey_Left,
	eKey_Insert,
	eKey_Home,
	eKey_End,
	eKey_PageUp,
	eKey_PageDown,
	eKey_F1,
	eKey_F2,
	eKey_F3,
	eKey_F4,
	eKey_F5,
	eKey_F6,
	eKey_F7,
	eKey_F8,
	eKey_F9,
	eKey_F10,
	eKey_F11,
	eKey_F12,
	eKey_F13,
	eKey_F14,
	eKey_F15,
	eKey_NumLock,
	eKey_CapsLock,
	eKey_ScrollLock,
	eKey_RightShift,
	eKey_LeftShift,
	eKey_RightCtrl,
	eKey_LeftCtrl,
	eKey_RightAlt,
	eKey_LeftAlt,
	eKey_RightMeta,
	eKey_LeftMeta,
	eKey_Mode,
	eKey_Help,
	eKey_Print,
	eKey_SysReq,
	eKey_Break,
	eKey_Menu,
	eKey_Power,
	eKey_None,
	eKey_LastEnum							= 1156

}

enum eKeyModifier
{
	eKeyModifier_None,
	eKeyModifier_Ctrl,
	eKeyModifier_Shift,
	eKeyModifier_Alt							= 4,
	eKeyModifier_LastEnum

}

enum eGamepadInputType
{
	eGamepadInputType_Button,
	eGamepadInputType_Hat,
	eGamepadInputType_Axis,
	eGamepadInputType_Ball,
	eGamepadInputType_LastEnum

}

enum eGamepadButton
{
	eGamepadButton_0,
	eGamepadButton_1,
	eGamepadButton_2,
	eGamepadButton_3,
	eGamepadButton_4,
	eGamepadButton_5,
	eGamepadButton_6,
	eGamepadButton_7,
	eGamepadButton_8,
	eGamepadButton_9,
	eGamepadButton_10,
	eGamepadButton_11,
	eGamepadButton_12,
	eGamepadButton_13,
	eGamepadButton_14,
	eGamepadButton_15,
	eGamepadButton_16,
	eGamepadButton_17,
	eGamepadButton_18,
	eGamepadButton_19,
	eGamepadButton_20,
	eGamepadButton_21,
	eGamepadButton_22,
	eGamepadButton_23,
	eGamepadButton_24,
	eGamepadButton_25,
	eGamepadButton_26,
	eGamepadButton_27,
	eGamepadButton_28,
	eGamepadButton_29,
	eGamepadButton_LastEnum

}

enum eGamepadAxis
{
	eGamepadAxis_0,
	eGamepadAxis_1,
	eGamepadAxis_2,
	eGamepadAxis_3,
	eGamepadAxis_4,
	eGamepadAxis_5,
	eGamepadAxis_6,
	eGamepadAxis_7,
	eGamepadAxis_8,
	eGamepadAxis_9,
	eGamepadAxis_LastEnum

}

enum eGamepadAxisRange
{
	eGamepadAxisRange_Dead,
	eGamepadAxisRange_Positive,
	eGamepadAxisRange_Negative,
	eGamepadAxisRange_LastEnum

}

enum eGamepadHat
{
	eGamepadHat_0,
	eGamepadHat_1,
	eGamepadHat_2,
	eGamepadHat_3,
	eGamepadHat_4,
	eGamepadHat_5,
	eGamepadHat_6,
	eGamepadHat_7,
	eGamepadHat_8,
	eGamepadHat_9,
	eGamepadHat_LastEnum

}

enum eGamepadHatState
{
	eGamepadHatState_Centered,
	eGamepadHatState_Up,
	eGamepadHatState_Right,
	eGamepadHatState_Down							= 4,
	eGamepadHatState_Left							= 8,
	eGamepadHatState_RightUp							= 3,
	eGamepadHatState_RightDown,
	eGamepadHatState_LeftUp							= 9,
	eGamepadHatState_LeftDown							= 12,
	eGamepadHatState_LastEnum							= 16

}

enum eGamepadBall
{
	eGamepadBall_0,
	eGamepadBall_LastEnum

}

enum eRenderableType
{
	eRenderableType_ParticleEmitter,
	eRenderableType_SubMesh,
	eRenderableType_Light,
	eRenderableType_Billboard,
	eRenderableType_Beam,
	eRenderableType_GuiSet,
	eRenderableType_Rope,
	eRenderableType_FogArea,
	eRenderableType_TerrainPatch,
	eRenderableType_ForceField,
	eRenderableType_LastEnum							= 13

}

enum eProcAnimType
{
	eProcAnimType_Translate,
	eProcAnimType_Rotate,
	eProcAnimType_Scale,
	eProcAnimType_LastEnum

}

enum eRenderableFlag
{
	eRenderableFlag_ShadowCaster							= 1,
	eRenderableFlag_VisibleInReflection							= 2,
	eRenderableFlag_VisibleInNonReflection							= 4,
	eRenderableFlag_ContainerDebug							= 8

}

enum eDepthTestFunc
{
	eDepthTestFunc_Never,
	eDepthTestFunc_Less,
	eDepthTestFunc_LessOrEqual,
	eDepthTestFunc_Greater,
	eDepthTestFunc_GreaterOrEqual,
	eDepthTestFunc_Equal,
	eDepthTestFunc_NotEqual,
	eDepthTestFunc_Always,
	eDepthTestFunc_LastEnum

}

enum eCullMode
{
	eCullMode_Clockwise,
	eCullMode_CounterClockwise,
	eCullMode_LastEnum

}

enum eMaterialChannelMode
{
	eMaterialChannelMode_RGBA,
	eMaterialChannelMode_RGB,
	eMaterialChannelMode_A,
	eMaterialChannelMode_None,
	eMaterialChannelMode_LastEnum

}

enum eMaterialBlendMode
{
	eMaterialBlendMode_None,
	eMaterialBlendMode_Add,
	eMaterialBlendMode_Mul,
	eMaterialBlendMode_MulX2,
	eMaterialBlendMode_Alpha,
	eMaterialBlendMode_PremulAlpha,
	eMaterialBlendMode_Modulate,
	eMaterialBlendMode_ModulateAdd,
	eMaterialBlendMode_ModulateSource,
	eMaterialBlendMode_LastEnum							= 11

}

enum eVertexBufferDrawType
{
	eVertexBufferDrawType_Tri,
	eVertexBufferDrawType_TriStrip,
	eVertexBufferDrawType_TriFan,
	eVertexBufferDrawType_Quad,
	eVertexBufferDrawType_QuadStrip,
	eVertexBufferDrawType_Line,
	eVertexBufferDrawType_LineLoop,
	eVertexBufferDrawType_LineStrip,
	eVertexBufferDrawType_Point,
	eVertexBufferDrawType_LastEnum							= 10

}

enum eClearFrameBufferFlag
{
	eClearFrameBufferFlag_Color							= 1,
	eClearFrameBufferFlag_Depth							= 2,
	eClearFrameBufferFlag_Stencil							= 4

}

enum eRenderer
{
	eRenderer_Main,
	eRenderer_WireFrame,
	eRenderer_Simple,
	eRenderer_LastEnum

}

enum eMatrix
{
	eMatrix_ModelView,
	eMatrix_Projection,
	eMatrix_Texture,
	eMatrix_LastEnum

}

enum ePrimitiveType
{
	ePrimitiveType_Tri,
	ePrimitiveType_Quad,
	ePrimitiveType_LastEnum							= 3

}

enum eGraphicCaps
{
	eGraphicCaps_TextureTargetRectangle,
	eGraphicCaps_VertexBufferObject,
	eGraphicCaps_TwoSideStencil,
	eGraphicCaps_MaxTextureImageUnits,
	eGraphicCaps_MaxTextureCoordUnits,
	eGraphicCaps_MaxUserClipPlanes,
	eGraphicCaps_AnisotropicFiltering							= 8,
	eGraphicCaps_MaxAnisotropicFiltering							= 9,
	eGraphicCaps_Multisampling							= 10,
	eGraphicCaps_TextureCompression							= 11,
	eGraphicCaps_TextureCompression_DXTC							= 12,
	eGraphicCaps_TextureCompression_3DC							= 13,
	eGraphicCaps_GeometryInstancing							= 15,
	eGraphicCaps_AutoGenerateMipMaps							= 16,
	eGraphicCaps_RenderToTexture							= 17,
	eGraphicCaps_MaxDrawBuffers							= 18,
	eGraphicCaps_PackedDepthStencil							= 19,
	eGraphicCaps_TextureFloat							= 20,
	eGraphicCaps_PolygonOffset							= 21,
	eGraphicCaps_ShaderModel_2							= 22,
	eGraphicCaps_ShaderModel_3							= 23,
	eGraphicCaps_ShaderModel_4							= 24,
	eGraphicCaps_MaxShaderUniform_Vertex							= 25,
	eGraphicCaps_MaxShaderUniform_Fragment							= 26,
	eGraphicCaps_OGL_ATIFragmentShader							= 27,
	eGraphicCaps_MaxColorRenderTargets							= 28,
	eGraphicCaps_LastEnum							= 35

}

enum eTextureUsage
{
	eTextureUsage_Normal,
	eTextureUsage_RenderTarget,
	eTextureUsage_LastEnum

}

enum eTextureType
{
	eTextureType_1D,
	eTextureType_2D,
	eTextureType_CubeMap,
	eTextureType_3D,
	eTextureType_LastEnum							= 6

}

enum eTextureWrap
{
	eTextureWrap_Repeat,
	eTextureWrap_Clamp,
	eTextureWrap_ClampToEdge,
	eTextureWrap_ClampToBorder,
	eTextureWrap_LastEnum							= 5

}

enum eTextureFilter
{
	eTextureFilter_Nearest,
	eTextureFilter_Bilinear,
	eTextureFilter_Trilinear,
	eTextureFilter_LastEnum

}

enum eTextureCompareMode
{
	eTextureCompareMode_None,
	eTextureCompareMode_RToTexture,
	eTextureCompareMode_LastEnum

}

enum eTextureCompareFunc
{
	eTextureCompareFunc_LessOrEqual,
	eTextureCompareFunc_GreaterOrEqual,
	eTextureCompareFunc_LastEnum

}

enum eTextureAnimMode
{
	eTextureAnimMode_None,
	eTextureAnimMode_Loop,
	eTextureAnimMode_Oscillate,
	eTextureAnimMode_LastEnum

}

enum ePixelFormat
{
	ePixelFormat_Unknown,
	ePixelFormat_Alpha,
	ePixelFormat_Luminance,
	ePixelFormat_LuminanceAlpha,
	ePixelFormat_RGB,
	ePixelFormat_RGBA,
	ePixelFormat_BGR,
	ePixelFormat_BGRA,
	ePixelFormat_DXT1,
	ePixelFormat_DXT2,
	ePixelFormat_DXT3,
	ePixelFormat_DXT4,
	ePixelFormat_DXT5,
	ePixelFormat_3DC,
	ePixelFormat_Depth16,
	ePixelFormat_Depth24,
	ePixelFormat_Depth32,
	ePixelFormat_Alpha16,
	ePixelFormat_Luminance16,
	ePixelFormat_LuminanceAlpha16,
	ePixelFormat_RG16							= 21,
	ePixelFormat_RGB16							= 22,
	ePixelFormat_RGBA16							= 23,
	ePixelFormat_Alpha32							= 24,
	ePixelFormat_Luminance32							= 25,
	ePixelFormat_LuminanceAlpha32							= 26,
	ePixelFormat_RGB32							= 27,
	ePixelFormat_RGBA32							= 28,
	ePixelFormat_LastEnum							= 31

}

enum eFontAlign
{
	eFontAlign_Left,
	eFontAlign_Right,
	eFontAlign_Center,
	eFontAlign_LastEnum

}

enum eShadowMapResolution
{
	eShadowMapResolution_Low,
	eShadowMapResolution_Medium,
	eShadowMapResolution_High,
	eShadowMapResolution_LastEnum							= 4

}

enum eShadowMapQuality
{
	eShadowMapQuality_Low,
	eShadowMapQuality_Medium,
	eShadowMapQuality_High,
	eShadowMapQuality_LastEnum

}

enum eParallaxQuality
{
	eParallaxQuality_Low,
	eParallaxQuality_Medium,
	eParallaxQuality_High,
	eParallaxQuality_LastEnum

}

enum eAnimationEventType
{
	eAnimationEventType_PlaySound,
	eAnimationEventType_CreateParticle,
	eAnimationEventType_Step,
	eAnimationEventType_Message,
	eAnimationEventType_PlayLoopSound,
	eAnimationEventType_StopLoopSound,
	eAnimationEventType_LastEnum

}

enum eDisplayMode
{
	eDisplayMode_Fullscreen,
	eDisplayMode_Windowed,
	eDisplayMode_Borderless,
	eDisplayMode_LastEnum							= 4

}

enum eVSyncMode
{
	eVSyncMode_Off,
	eVSyncMode_On,
	eVSyncMode_Adaptive,
	eVSyncMode_LastEnum

}

enum eCollideShapeType
{
	eCollideShapeType_Null,
	eCollideShapeType_Box,
	eCollideShapeType_Sphere,
	eCollideShapeType_Cylinder,
	eCollideShapeType_Capsule,
	eCollideShapeType_ConvexHull,
	eCollideShapeType_Mesh,
	eCollideShapeType_Compound,
	eCollideShapeType_StaticScene,
	eCollideShapeType_HeightMap,
	eCollideShapeType_LastEnum

}

enum ePhysicsAccuracy
{
	ePhysicsAccuracy_Low,
	ePhysicsAccuracy_Medium,
	ePhysicsAccuracy_High,
	ePhysicsAccuracy_LastEnum

}

enum eVelocityAxes
{
	eVelocityAxes_XZ,
	eVelocityAxes_Y,
	eVelocityAxes_XYZ,
	eVelocityAxes_LastEnum

}

enum ePhysicsJointType
{
	ePhysicsJointType_Ball,
	ePhysicsJointType_Hinge,
	ePhysicsJointType_Slider,
	ePhysicsJointType_LastEnum

}

enum ePhysicsJointSpeed
{
	ePhysicsJointSpeed_Linear,
	ePhysicsJointSpeed_Angular,
	ePhysicsJointSpeed_LastEnum

}

enum eCharDir
{
	eCharDir_Forward,
	eCharDir_Right,
	eCharDir_LastEnum

}

enum eSceneRenderFlag
{
	eSceneRenderFlag_World							= 1,
	eSceneRenderFlag_Gui							= 2,
	eSceneRenderFlag_PostEffects							= 4,
	eSceneRenderFlag_All							= -1

}

enum eObjectVariabilityFlag
{
	eObjectVariabilityFlag_Static							= 1,
	eObjectVariabilityFlag_Dynamic							= 2,
	eObjectVariabilityFlag_All							= 3

}

enum eLightType
{
	eLightType_Point,
	eLightType_Spot,
	eLightType_Box,
	eLightType_Directional,
	eLightType_LastEnum

}

enum eWorldContainerType
{
	eWorldContainerType_Static,
	eWorldContainerType_Dynamic,
	eWorldContainerType_LastEnum

}

enum eLightBoxBlendFunc
{
	eLightBoxBlendFunc_Replace,
	eLightBoxBlendFunc_Add,
	eLightBoxBlendFunc_Blend,
	eLightBoxBlendFunc_LastEnum

}

enum eViewportMessage
{
	eViewportMessage_OnPreWorldDraw,
	eViewportMessage_OnPostWorldDraw,
	eViewportMessage_LastEnum

}

enum eRendererMessage
{
	eRendererMessage_PostSolid,
	eRendererMessage_PostTranslucent,
	eRendererMessage_PostGeometryBuffer,
	eRendererMessage_LastEnum							= 5

}

enum eBillboardType
{
	eBillboardType_Point,
	eBillboardType_Axis,
	eBillboardType_FixedAxis,
	eBillboardType_LastEnum

}

enum eCameraMoveMode
{
	eCameraMoveMode_Walk,
	eCameraMoveMode_Fly,
	eCameraMoveMode_LastEnum

}

enum eCameraRotateMode
{
	eCameraRotateMode_EulerAngles,
	eCameraRotateMode_Matrix,
	eCameraRotateMode_LastEnum

}

enum eLensFlareType
{
	eLensFlareType_AnamorphicFlare,
	eLensFlareType_Halo,
	eLensFlareType_MultiIris,
	eLensFlareType_LastEnum

}

enum eRopeType
{
	eRopeType_3D,
	eRopeType_Billboard,
	eRopeType_LastEnum

}

enum eSoundEntityDataType
{
	eSoundEntityDataType_SoundEntityData,
	eSoundEntityDataType_SoundFile,
	eSoundEntityDataType_SoundEvent

}

enum eEntityType
{
	eEntityType_Beam,
	eEntityType_BeamEnd,
	eEntityType_Billboard,
	eEntityType_BillboardGroup,
	eEntityType_MeshEntity,
	eEntityType_SubMeshEntity,
	eEntityType_ClothEntity,
	eEntityType_DummyRenderable,
	eEntityType_RopeEntityBillboard,
	eEntityType_RopeEntity3D,
	eEntityType_FogArea,
	eEntityType_ForceField,
	eEntityType_GuiSetEntity,
	eEntityType_LensFlare,
	eEntityType_LightSpot,
	eEntityType_LightPoint,
	eEntityType_LightBox,
	eEntityType_LightDirectional,
	eEntityType_ExposureArea,
	eEntityType_LightMaskBox,
	eEntityType_PhysicsBody,
	eEntityType_ParticleSystem,
	eEntityType_ParticleEmitter,
	eEntityType_SoundEntity,
	eEntityType_LastEnum

}

enum eIDSpace
{
	eIDSpace_Default,
	eIDSpace_Script,
	eIDSpace_SubEntity,
	eIDSpace_Manual,
	eIDSpace_LastEnum							= 256

}

enum eGuiWindowZDest
{
	eGuiWindowZDest_Regular,
	eGuiWindowZDest_RegularOnTop,
	eGuiWindowZDest_MessageBox,
	eGuiWindowZDest_FilePicker,
	eGuiWindowZDest_ContextMenu,
	eGuiWindowZDest_LastEnum

}

enum eGuiMouseButton
{
	eGuiMouseButton_Left							= 1,
	eGuiMouseButton_Middle							= 2,
	eGuiMouseButton_Right							= 4,
	eGuiMouseButton_WheelUp							= 8,
	eGuiMouseButton_WheelDown							= 16,
	eGuiMouseButton_Button6							= 32,
	eGuiMouseButton_Button7							= 64,
	eGuiMouseButton_Button8							= 128,
	eGuiMouseButton_Button9							= 256,
	eGuiMouseButton_LastEnum							= 512

}

enum eUIArrow
{
	eUIArrow_Up							= 1,
	eUIArrow_Right							= 2,
	eUIArrow_Down							= 4,
	eUIArrow_Left							= 8,
	eUIArrow_LeftUp							= 9,
	eUIArrow_LeftDown							= 12,
	eUIArrow_RightUp							= 3,
	eUIArrow_RightDown							= 6,
	eUIArrow_LastEnum							= 0

}

enum eGuiMaterial
{
	eGuiMaterial_Diffuse,
	eGuiMaterial_Alpha,
	eGuiMaterial_FontNormal,
	eGuiMaterial_Additive,
	eGuiMaterial_Modulative,
	eGuiMaterial_PremulAlpha,
	eGuiMaterial_LastEnum

}

enum eWidgetType
{
	eWidgetType_Root,
	eWidgetType_Window,
	eWidgetType_Button,
	eWidgetType_Frame,
	eWidgetType_Label,
	eWidgetType_Slider,
	eWidgetType_TextBox,
	eWidgetType_CheckBox,
	eWidgetType_Image,
	eWidgetType_ListBox,
	eWidgetType_ComboBox,
	eWidgetType_ContextMenu,
	eWidgetType_MainMenu,
	eWidgetType_MenuItem,
	eWidgetType_Tab,
	eWidgetType_TabFrame,
	eWidgetType_Group,
	eWidgetType_User							= 19,
	eWidgetType_LastEnum							= 20

}

enum eListBoxActionType
{
	eListBoxActionType_SingleSelect,
	eListBoxActionType_SingleDeselect,
	eListBoxActionType_Multiple,
	eListBoxActionType_LastEnum

}

enum eFilePickerType
{
	eFilePickerType_Save,
	eFilePickerType_Load,
	eFilePickerType_LastEnum

}

enum eWidgetTextBoxInputType
{
	eWidgetTextBoxInputType_Normal,
	eWidgetTextBoxInputType_Numeric,
	eWidgetTextBoxInputType_LastEnum

}

enum eWidgetSliderOrientation
{
	eWidgetSliderOrientation_Horizontal,
	eWidgetSliderOrientation_Vertical,
	eWidgetSliderOrientation_LastEnum

}

enum eGuiGfxAnimationType
{
	eGuiGfxAnimationType_Loop,
	eGuiGfxAnimationType_StopAtEnd,
	eGuiGfxAnimationType_Oscillate,
	eGuiGfxAnimationType_Random,
	eGuiGfxAnimationType_LastEnum

}

enum eGuiSkinFont
{
	eGuiSkinFont_Default,
	eGuiSkinFont_Disabled,
	eGuiSkinFont_WindowLabel,
	eGuiSkinFont_LastEnum

}

enum eGuiSkinGfx
{
	eGuiSkinGfx_PointerNormal,
	eGuiSkinGfx_PointerText,
	eGuiSkinGfx_WindowBorderRight,
	eGuiSkinGfx_WindowBorderLeft,
	eGuiSkinGfx_WindowBorderUp,
	eGuiSkinGfx_WindowBorderDown,
	eGuiSkinGfx_WindowCornerLU,
	eGuiSkinGfx_WindowCornerRU,
	eGuiSkinGfx_WindowCornerRD,
	eGuiSkinGfx_WindowCornerLD,
	eGuiSkinGfx_WindowLabel,
	eGuiSkinGfx_WindowBackground,
	eGuiSkinGfx_WindowButtonCross,
	eGuiSkinGfx_FrameBorderRight,
	eGuiSkinGfx_FrameBorderLeft,
	eGuiSkinGfx_FrameBorderUp,
	eGuiSkinGfx_FrameBorderDown,
	eGuiSkinGfx_FrameCornerLU,
	eGuiSkinGfx_FrameCornerRU,
	eGuiSkinGfx_FrameCornerRD,
	eGuiSkinGfx_FrameCornerLD,
	eGuiSkinGfx_FrameBackground,
	eGuiSkinGfx_CheckBoxEnabledUnchecked,
	eGuiSkinGfx_CheckBoxEnabledChecked,
	eGuiSkinGfx_CheckBoxDisabledUnchecked,
	eGuiSkinGfx_CheckBoxDisabledChecked,
	eGuiSkinGfx_TextBoxBackground,
	eGuiSkinGfx_TextBoxSelectedTextBack,
	eGuiSkinGfx_TextBoxMarker,
	eGuiSkinGfx_ListBoxBackground,
	eGuiSkinGfx_ComboBoxButtonIcon,
	eGuiSkinGfx_ComboBoxBorderRight,
	eGuiSkinGfx_ComboBoxBorderLeft,
	eGuiSkinGfx_ComboBoxBorderUp,
	eGuiSkinGfx_ComboBoxBorderDown,
	eGuiSkinGfx_ComboBoxCornerLU,
	eGuiSkinGfx_ComboBoxCornerRU,
	eGuiSkinGfx_ComboBoxCornerRD,
	eGuiSkinGfx_ComboBoxCornerLD,
	eGuiSkinGfx_ComboBoxBackground,
	eGuiSkinGfx_SliderHandleBorderRight,
	eGuiSkinGfx_SliderHandleBorderLeft,
	eGuiSkinGfx_SliderHandleBorderUp,
	eGuiSkinGfx_SliderHandleBorderDown,
	eGuiSkinGfx_SliderHandleCornerLU,
	eGuiSkinGfx_SliderHandleCornerRU,
	eGuiSkinGfx_SliderHandleCornerRD,
	eGuiSkinGfx_SliderHandleCornerLD,
	eGuiSkinGfx_SliderHandleBackground,
	eGuiSkinGfx_SliderHandleHori							= 55,
	eGuiSkinGfx_SliderHandleVert							= 56,
	eGuiSkinGfx_SliderVertArrowUp							= 49,
	eGuiSkinGfx_SliderVertArrowDown							= 50,
	eGuiSkinGfx_SliderVertBackground							= 51,
	eGuiSkinGfx_SliderHoriArrowUp							= 52,
	eGuiSkinGfx_SliderHoriArrowDown							= 53,
	eGuiSkinGfx_SliderHoriBackground							= 54,
	eGuiSkinGfx_ButtonUpBorderRight,
	eGuiSkinGfx_ButtonUpBorderLeft,
	eGuiSkinGfx_ButtonUpBorderUp,
	eGuiSkinGfx_ButtonUpBorderDown,
	eGuiSkinGfx_ButtonUpCornerLU,
	eGuiSkinGfx_ButtonUpCornerRU,
	eGuiSkinGfx_ButtonUpCornerRD,
	eGuiSkinGfx_ButtonUpCornerLD,
	eGuiSkinGfx_ButtonUpBackground,
	eGuiSkinGfx_ButtonDownBorderRight,
	eGuiSkinGfx_ButtonDownBorderLeft,
	eGuiSkinGfx_ButtonDownBorderUp,
	eGuiSkinGfx_ButtonDownBorderDown,
	eGuiSkinGfx_ButtonDownCornerLU,
	eGuiSkinGfx_ButtonDownCornerRU,
	eGuiSkinGfx_ButtonDownCornerRD,
	eGuiSkinGfx_ButtonDownCornerLD,
	eGuiSkinGfx_ButtonDownBackground,
	eGuiSkinGfx_MenuEnabledChecked,
	eGuiSkinGfx_MenuDisabledChecked,
	eGuiSkinGfx_MenuSeparatorLine,
	eGuiSkinGfx_MenuItemArrow,
	eGuiSkinGfx_TabLabelBorderRight,
	eGuiSkinGfx_TabLabelBorderLeft,
	eGuiSkinGfx_TabLabelBorderUp,
	eGuiSkinGfx_TabLabelBorderDown,
	eGuiSkinGfx_TabLabelCornerLU,
	eGuiSkinGfx_TabLabelCornerRU,
	eGuiSkinGfx_TabLabelCornerRD,
	eGuiSkinGfx_TabLabelCornerLD,
	eGuiSkinGfx_TabBorderRight,
	eGuiSkinGfx_TabBorderLeft,
	eGuiSkinGfx_TabBorderUp,
	eGuiSkinGfx_TabBorderDown,
	eGuiSkinGfx_TabCornerLU,
	eGuiSkinGfx_TabCornerRU,
	eGuiSkinGfx_TabCornerRD,
	eGuiSkinGfx_TabCornerLD,
	eGuiSkinGfx_TabLabelBackground,
	eGuiSkinGfx_TabLabelBackgroundActive,
	eGuiSkinGfx_TabBackground,
	eGuiSkinGfx_TabFrameArrowLeft,
	eGuiSkinGfx_TabFrameArrowRight,
	eGuiSkinGfx_GroupBorderLeft,
	eGuiSkinGfx_GroupBorderRight,
	eGuiSkinGfx_GroupBorderUp,
	eGuiSkinGfx_GroupBorderDown,
	eGuiSkinGfx_GroupCornerLU,
	eGuiSkinGfx_GroupCornerRU,
	eGuiSkinGfx_GroupCornerRD,
	eGuiSkinGfx_GroupCornerLD,
	eGuiSkinGfx_GroupBackground,
	eGuiSkinGfx_FilePickerUpButton,
	eGuiSkinGfx_FilePickerNewDirButton,
	eGuiSkinGfx_FilePickerIconGraphics,
	eGuiSkinGfx_FilePickerIconModels,
	eGuiSkinGfx_FilePickerIconSounds,
	eGuiSkinGfx_FilePickerIconText,
	eGuiSkinGfx_FilePickerIconOther,
	eGuiSkinGfx_FilePickerIconFolder,
	eGuiSkinGfx_TreeViewExpand,
	eGuiSkinGfx_TreeViewCollapse,
	eGuiSkinGfx_CollapsiblePaneCollapsed,
	eGuiSkinGfx_CollapsiblePaneExpanded,
	eGuiSkinGfx_LastEnum

}

enum eGuiMessage
{
	eGuiMessage_MouseMove,
	eGuiMessage_MouseDown,
	eGuiMessage_MouseUp,
	eGuiMessage_MouseDoubleClick,
	eGuiMessage_MouseEnter,
	eGuiMessage_MouseLeave,
	eGuiMessage_GotFocus,
	eGuiMessage_GotTabFocus,
	eGuiMessage_LostFocus							= 9,
	eGuiMessage_OnDraw							= 11,
	eGuiMessage_OnUpdate							= 13,
	eGuiMessage_ButtonPressed							= 14,
	eGuiMessage_TextChange							= 15,
	eGuiMessage_CheckChange							= 16,
	eGuiMessage_KeyPress							= 17,
	eGuiMessage_KeyRelease							= 18,
	eGuiMessage_GamepadInput							= 19,
	eGuiMessage_UIArrowPress							= 20,
	eGuiMessage_UIArrowRelease							= 21,
	eGuiMessage_UIButtonPress							= 22,
	eGuiMessage_UIButtonRelease							= 23,
	eGuiMessage_UIButtonDoublePress							= 24,
	eGuiMessage_GetUINavFocus							= 25,
	eGuiMessage_LoseUINavFocus							= 26,
	eGuiMessage_SliderMove							= 27,
	eGuiMessage_SliderRelease							= 28,
	eGuiMessage_RangeSliderMinMove							= 29,
	eGuiMessage_RangeSliderMinRelease							= 30,
	eGuiMessage_RangeSliderMaxMove							= 31,
	eGuiMessage_RangeSliderMaxRelease							= 32,
	eGuiMessage_RangeSliderMove							= 33,
	eGuiMessage_RangeSliderRelease							= 34,
	eGuiMessage_SelectionChange							= 35,
	eGuiMessage_SelectionDoubleClick							= 36,
	eGuiMessage_TextBoxEnter							= 37,
	eGuiMessage_TextBoxValueUp							= 38,
	eGuiMessage_TextBoxValueDown							= 39,
	eGuiMessage_WindowClose							= 40,
	eGuiMessage_LastEnum							= 41

}

enum eGuiSkinAttribute
{
	eGuiSkinAttribute_WindowLabelTextOffset,
	eGuiSkinAttribute_WindowButtonSize,
	eGuiSkinAttribute_WindowBordersOutside,
	eGuiSkinAttribute_ButtonPressedContentOffset,
	eGuiSkinAttribute_SliderButtonSize,
	eGuiSkinAttribute_SliderBarPadding,
	eGuiSkinAttribute_SliderBarThickness,
	eGuiSkinAttribute_ListBoxSliderWidth,
	eGuiSkinAttribute_ComboBoxButtonWidth,
	eGuiSkinAttribute_ComboBoxSliderWidth,
	eGuiSkinAttribute_ContextMenuItemArrowSize,
	eGuiSkinAttribute_ContextMenuItemCheckSize,
	eGuiSkinAttribute_ContextMenuItemHPadding,
	eGuiSkinAttribute_ContextMenuItemVPadding,
	eGuiSkinAttribute_ContextMenuItemSeparation,
	eGuiSkinAttribute_ContextMenuItemTextLeftPadding,
	eGuiSkinAttribute_ContextMenuItemTextRightPadding,
	eGuiSkinAttribute_ContextMenuSeparatorPadding,
	eGuiSkinAttribute_MainMenuItemTextPadding,
	eGuiSkinAttribute_MainMenuItemVPadding,
	eGuiSkinAttribute_MainMenuItemSeparation,
	eGuiSkinAttribute_MenuSeparatorPadding,
	eGuiSkinAttribute_MenuSeparatorHeight,
	eGuiSkinAttribute_DefaultFontHighlightColor,
	eGuiSkinAttribute_TabFrameButtonSize,
	eGuiSkinAttribute_TabFrameIconPadding,
	eGuiSkinAttribute_TabFrameTextLeftPadding,
	eGuiSkinAttribute_TabFrameTextRightPadding,
	eGuiSkinAttribute_TabFrameLabelInactiveOffset,
	eGuiSkinAttribute_TabFrameLabelActiveOffset,
	eGuiSkinAttribute_FirstTabOffset,
	eGuiSkinAttribute_TabSeparation,
	eGuiSkinAttribute_GroupHeaderOffset,
	eGuiSkinAttribute_GroupHeaderOverUpperBorder,
	eGuiSkinAttribute_LastEnum

}

enum eImGuiAction
{
	eImGuiAction_MouseRight,
	eImGuiAction_MouseLeft,
	eImGuiAction_Confirm,
	eImGuiAction_Cancel,
	eImGuiAction_Up,
	eImGuiAction_Down,
	eImGuiAction_Right,
	eImGuiAction_Left,
	eImGuiAction_ScrollUp,
	eImGuiAction_ScrollDown,
	eImGuiAction_LastEnum

}

enum eImGuiAlign
{
	eImGuiAlign_TopLeft,
	eImGuiAlign_BottomLeft,
	eImGuiAlign_CenterLeft,
	eImGuiAlign_TopRight,
	eImGuiAlign_BottomRight,
	eImGuiAlign_CenterRight,
	eImGuiAlign_CenterCenter,
	eImGuiAlign_TopCenter,
	eImGuiAlign_BottomCenter,
	eImGuiAlign_LastEnum

}

enum eImGuiWrap
{
	eImGuiWrap_None,
	eImGuiWrap_X,
	eImGuiWrap_Y,
	eImGuiWrap_XY,
	eImGuiWrap_LastEnum

}

enum eImGuiGfx
{
	eImGuiGfx_Image,
	eImGuiGfx_ImageAnimated,
	eImGuiGfx_Texture,
	eImGuiGfx_TextureAnimated,
	eImGuiGfx_Special,
	eImGuiGfx_LastEnum

}

enum eImGuiWrapMode
{
	eImGuiWrapMode_Wrap,
	eImGuiWrapMode_Mirror,
	eImGuiWrapMode_LastEnum

}

enum eImGuiVar
{
	eImGuiVar_Int,
	eImGuiVar_Float,
	eImGuiVar_Vector3f,
	eImGuiVar_Color,
	eImGuiVar_LastEnum

}

enum eImGuiStateVar
{
	eImGuiStateVar_Triggered,
	eImGuiStateVar_RepeatTimer,
	eImGuiStateVar_Value,
	eImGuiStateVar_ValueDefault,
	eImGuiStateVar_Checked,
	eImGuiStateVar_CheckedDefault,
	eImGuiStateVar_SelectedItem,
	eImGuiStateVar_SelectedItemDefault,
	eImGuiStateVar_LastEnum

}

enum eImGuiObjectType
{
	eImGuiObjectType_Gfx,
	eImGuiObjectType_Font,
	eImGuiObjectType_ClipAreaBegin,
	eImGuiObjectType_ClipAreaEnd,
	eImGuiObjectType_LastEnum

}

enum eImGuiLayout
{
	eImGuiLayout_XY,
	eImGuiLayout_X,
	eImGuiLayout_X_Tabbed,
	eImGuiLayout_Y,
	eImGuiLayout_LastEnum

}

enum eImGuiOffset
{
	eImGuiOffset_Root,
	eImGuiOffset_Group,
	eImGuiOffset_Layout

}

enum eImGuiWindowHeader
{
	eImGuiWindowHeader_Full,
	eImGuiWindowHeader_FitCaption

}

enum eImGuiGaugeOrientation
{
	eImGuiGaugeOrientation_Hori,
	eImGuiGaugeOrientation_Vert

}

enum eSoundEntryType
{
	eSoundEntryType_World							= 1,
	eSoundEntryType_WorldClean							= 2,
	eSoundEntryType_Gui							= 4,
	eSoundEntryType_GuiWorld							= 8,
	eSoundEntryType_Safe							= -2147483648,
	eSoundEntryType_WorldAll							= 3,
	eSoundEntryType_GuiAll							= 12,
	eSoundEntryType_AllExceptGui							= 11,
	eSoundEntryType_All							= 2147483647

}

enum eSoundEntryDataType
{
	eSoundEntryDataType_Channel,
	eSoundEntryDataType_Event

}

enum eSoundMaxPlaybacksBehaviour
{
	eSoundMaxPlaybacksBehaviour_StealOldest,
	eSoundMaxPlaybacksBehaviour_StealNewest,
	eSoundMaxPlaybacksBehaviour_StealQuietest,
	eSoundMaxPlaybacksBehaviour_JustFail,
	eSoundMaxPlaybacksBehaviour_JustFailIfQuietest,
	eSoundMaxPlaybacksBehaviour_LastEnum

}

enum eSoundReverbPreset
{
	eSoundReverbPreset_Off,
	eSoundReverbPreset_Generic,
	eSoundReverbPreset_PaddedCell,
	eSoundReverbPreset_Room,
	eSoundReverbPreset_BathRoom,
	eSoundReverbPreset_LivingRoom,
	eSoundReverbPreset_StoneRoom,
	eSoundReverbPreset_Auditorium,
	eSoundReverbPreset_ConcertHall,
	eSoundReverbPreset_Cave,
	eSoundReverbPreset_Arena,
	eSoundReverbPreset_Hangar,
	eSoundReverbPreset_CarpettedHallway,
	eSoundReverbPreset_Hallway,
	eSoundReverbPreset_StoneCorridor,
	eSoundReverbPreset_Alley,
	eSoundReverbPreset_Forest,
	eSoundReverbPreset_City,
	eSoundReverbPreset_Mountains,
	eSoundReverbPreset_Quarry,
	eSoundReverbPreset_Plain,
	eSoundReverbPreset_ParkingLot,
	eSoundReverbPreset_SewerPipe,
	eSoundReverbPreset_Underwater,
	eSoundReverbPreset_ExtraRoomSmall							= 25,
	eSoundReverbPreset_ExtraRoomMedium							= 26,
	eSoundReverbPreset_ExtraRoomLarge							= 27,
	eSoundReverbPreset_ExtraMarbleLarge							= 28,
	eSoundReverbPreset_ExtraOpenAreas							= 29,
	eSoundReverbPreset_ExtraSewersBunkers							= 30,
	eSoundReverbPreset_ExtraDeath							= 31,
	eSoundReverbPreset_ExtraBridge							= 32,
	eSoundReverbPreset_ExtraTunnelLarge							= 33,
	eSoundReverbPreset_ExtraTunnelMedium							= 34,
	eSoundReverbPreset_ExtraTunnelSmall							= 35,
	eSoundReverbPreset_ExtraAlley							= 36,
	eSoundReverbPreset_ExtraCarparks							= 37,
	eSoundReverbPreset_ExtraReflectiveInt							= 38,
	eSoundReverbPreset_ExtraWarehouse							= 39,
	eSoundReverbPreset_ExtraWarehouseMassive							= 40,
	eSoundReverbPreset_ExtraCarpark							= 41,
	eSoundReverbPreset_LastEnum							= 42

}

enum ePlatform
{
	ePlatform_Win32,
	ePlatform_Linux,
	ePlatform_Mac,
	ePlatform_LastEnum							= 5

}

enum eSystemPath
{
	eSystemPath_Personal							= 1,
	eSystemPath_LastEnum							= 4

}

enum eMsgBoxType
{
	eMsgBoxType_Info,
	eMsgBoxType_Error,
	eMsgBoxType_Warning,
	eMsgBoxType_Default

}

enum eLogLabel
{
	eLogLabel_None,
	eLogLabel_Sound,
	eLogLabel_Physics,
	eLogLabel_Graphics							= 4,
	eLogLabel_Gui							= 8,
	eLogLabel_Input							= 16,
	eLogLabel_Resources							= 32,
	eLogLabel_AI							= 64,
	eLogLabel_Scene							= 128,
	eLogLabel_Script							= 256,
	eLogLabel_Game							= 512,
	eLogLabel_All							= -1

}

enum eFlagBit
{
	eFlagBit_0							= 1,
	eFlagBit_1							= 2,
	eFlagBit_2							= 4,
	eFlagBit_3							= 8,
	eFlagBit_4							= 16,
	eFlagBit_5							= 32,
	eFlagBit_6							= 64,
	eFlagBit_7							= 128,
	eFlagBit_8							= 256,
	eFlagBit_9							= 512,
	eFlagBit_10							= 1024,
	eFlagBit_11							= 2048,
	eFlagBit_12							= 4096,
	eFlagBit_13							= 8192,
	eFlagBit_14							= 16384,
	eFlagBit_15							= 32768,
	eFlagBit_16							= 65536,
	eFlagBit_17							= 131072,
	eFlagBit_18							= 262144,
	eFlagBit_19							= 524288,
	eFlagBit_20							= 1048576,
	eFlagBit_21							= 2097152,
	eFlagBit_22							= 4194304,
	eFlagBit_23							= 8388608,
	eFlagBit_24							= 16777216,
	eFlagBit_25							= 33554432,
	eFlagBit_26							= 67108864,
	eFlagBit_27							= 134217728,
	eFlagBit_28							= 268435456,
	eFlagBit_29							= 536870912,
	eFlagBit_30							= 1073741824,
	eFlagBit_31							= -2147483648,
	eFlagBit_None							= 0,
	eFlagBit_All							= -1

}

enum eXmlNodeType
{
	eXmlNodeType_Element,
	eXmlNodeType_LastEnum							= 2

}

enum eWorldStreamPriority
{
	eWorldStreamPriority_Paused,
	eWorldStreamPriority_Low,
	eWorldStreamPriority_Normal,
	eWorldStreamPriority_High,
	eWorldStreamPriority_VeryHigh,
	eWorldStreamPriority_LastEnum

}

enum eEventCompareType
{
	eEventCompareType_Equal,
	eEventCompareType_NotEqual,
	eEventCompareType_Greater,
	eEventCompareType_GreaterOrEqual,
	eEventCompareType_Lesser,
	eEventCompareType_LesserOrEqual,
	eEventCompareType_InsideInterval,
	eEventCompareType_InsideOrEqualInterval,
	eEventCompareType_LastEnum

}

enum eEventOpType
{
	eEventOpType_Set,
	eEventOpType_Add,
	eEventOpType_Mul,
	eEventOpType_Div,
	eEventOpType_LastEnum

}

enum eEventFactValue
{
	eEventFactValue_Int,
	eEventFactValue_Float,
	eEventFactValue_String,
	eEventFactValue_LastEnum

}

enum eAIFreePathFlag
{
	eAIFreePathFlag_SkipStatic							= 1,
	eAIFreePathFlag_SkipDynamic							= 2,
	eAIFreePathFlag_SkipVolatile							= 4

}

enum eNoiseType
{
	eNoiseType_Cosine,
	eNoiseType_Cubic,
	eNoiseType_Perlin,
	eNoiseType_LastEnum

}

enum eLuxEntityType
{
	eLuxEntityType_Prop,
	eLuxEntityType_Area,
	eLuxEntityType_LiquidArea,
	eLuxEntityType_ReverbArea,
	eLuxEntityType_Critter,
	eLuxEntityType_Agent,
	eLuxEntityType_Player,
	eLuxEntityType_LastEnum

}

enum eLuxEntityMessage
{
	eLuxEntityMessage_MoveToPos,
	eLuxEntityMessage_StuckCounterIsAtMax,
	eLuxEntityMessage_EndOfPath,
	eLuxEntityMessage_AnimationOver,
	eLuxEntityMessage_SoundHeard,
	eLuxEntityMessage_TurningDone,
	eLuxEntityMessage_StopTurning,
	eLuxEntityMessage_ProceduralAnimPause,
	eLuxEntityMessage_PlayerDetected,
	eLuxEntityMessage_PlayerUndetected,
	eLuxEntityMessage_PlayerDead,
	eLuxEntityMessage_AtTrackNode,
	eLuxEntityMessage_EndOfTrack,
	eLuxEntityMessage_AnimationMessageEvent,
	eLuxEntityMessage_TransformUpdated,
	eLuxEntityMessage_TakeDamage,
	eLuxEntityMessage_HitByProp,
	eLuxEntityMessage_SensesDeactivated,
	eLuxEntityMessage_NearDoor,
	eLuxEntityMessage_ForceToPosition,
	eLuxEntityMessage_LastEnum

}

enum eLuxDialogBranchEvent
{
	eLuxDialogBranchEvent_OutOfRange,
	eLuxDialogBranchEvent_PlayerNotLooking,
	eLuxDialogBranchEvent_Callback							= 7,
	eLuxDialogBranchEvent_SetVar							= 2,
	eLuxDialogBranchEvent_IncVar							= 3,
	eLuxDialogBranchEvent_VarEquals							= 4,
	eLuxDialogBranchEvent_VarLesser							= 5,
	eLuxDialogBranchEvent_VarGreater							= 6,
	eLuxDialogBranchEvent_LastEnum

}

enum eLuxDialogOptionCondition
{
	eLuxDialogOptionCondition_VarEqual,
	eLuxDialogOptionCondition_VarLesser,
	eLuxDialogOptionCondition_VarGreater,
	eLuxDialogOptionCondition_LastEnum

}

enum eLuxDialogOptionEvent
{
	eLuxDialogOptionEvent_SetVar,
	eLuxDialogOptionEvent_IncVar,
	eLuxDialogOptionEvent_LastEnum

}

enum eLuxEntityComponentType
{
	eLuxEntityComponentType_Pathfinder							= 1,
	eLuxEntityComponentType_CharMover							= 2,
	eLuxEntityComponentType_SoundListener							= 3,
	eLuxEntityComponentType_StateMachine							= 4,
	eLuxEntityComponentType_HeadTracker							= 5,
	eLuxEntityComponentType_ForceEmitter							= 6,
	eLuxEntityComponentType_BarkMachine							= 7,
	eLuxEntityComponentType_BackboneTail							= 8,
	eLuxEntityComponentType_LightSensor							= 9,
	eLuxEntityComponentType_User							= 0

}

enum eLuxGlobalVolumeType
{
	eLuxGlobalVolumeType_DebugHandler,
	eLuxGlobalVolumeType_UnderwaterEffect,
	eLuxGlobalFreqType_ScriptWorld,
	eLuxGlobalFreqType_ScriptWorldClean,
	eLuxGlobalFreqType_ScriptGuiWorld,
	eLuxGlobalFreqType_ScriptGui,
	eLuxGlobalVolumeType_Effect,
	eLuxGlobalVolumeType_Menu,
	eLuxGlobalVolumeType_LastEnum

}

enum eLuxGlobalFreqType
{
	eLuxGlobalFreqType_DebugHandler,
	eLuxGlobalFreqType_UnderwaterEffect,
	eLuxGlobalVolumeType_ScriptWorld,
	eLuxGlobalVolumeType_ScriptWorldClean,
	eLuxGlobalVolumeType_ScriptGuiWorld,
	eLuxGlobalVolumeType_ScriptGui,
	eLuxGlobalFreqType_Effect,
	eLuxGlobalFreqType_Menu,
	eLuxGlobalFreqType_LastEnum

}

enum eLuxSetSubmapPosition
{
	eLuxSetSubmapPosition_CopyGlobalPosition,
	eLuxSetSubmapPosition_KeepLocalPosition,
	eLuxSetSubmapPosition_MoveToStartPos,
	eLuxSetSubmapPosition_LastEnum

}

enum eLuxLightConnectionType
{
	eLuxLightConnectionType_Add,
	eLuxLightConnectionType_Mul,
	eLuxLightConnectionType_LastEnum

}

enum eLuxVoiceSourceFreqencyFlag
{
	eLuxVoiceSourceFreqencyFlag_None,
	eLuxVoiceSourceFreqencyFlag_LowPass,
	eLuxVoiceSourceFreqencyFlag_HighPass,
	eLuxVoiceSourceFreqencyFlag_HighAndLowPass,
	eLuxVoiceSourceFreqencyFlag_LastEnum

}

enum eLuxCharMoveDirection
{
	eLuxCharMoveDirection_Forward,
	eLuxCharMoveDirection_Backward,
	eLuxCharMoveDirection_Right,
	eLuxCharMoveDirection_Left

}

enum eLuxKeyboardLayoutType
{
	eLuxKeyboardLayoutType_NoText,
	eLuxKeyboardLayoutType_TextTranslate,
	eLuxKeyboardLayoutType_TextSymbol

}


	float cMath_Sin(float afX);
	float cMath_Cos(float afX);
	float cMath_Tan(float afX);
	float cMath_ASin(float afX);
	float cMath_ACos(float afX);
	float cMath_ATan(float afX);
	float cMath_ATan2(float afY,  float afX);
	float cMath_Log(float afX);
	float cMath_Pow(float afX,  float afExp);
	float cMath_Sqrt(float afX);
	int cMath_RandRectl(int alMin,  int alMax);
	float cMath_RandRectf(float alMin,  float alMax);
	cVector2f cMath_RandRectVector2f(const cVector2f &in avMin, const cVector2f &in avMax);
	cVector3f cMath_RandRectVector3f(const cVector3f &in avMin, const cVector3f &in avMax);
	cColor cMath_RandRectColor(const cColor &in aMin, const cColor &in aMax);
	void cMath_Randomize(int alSeed);
	float cMath_FastRandomFloat(int alSeed);
	cVector2f cMath_RandomCircleEdgePoint(float afRadius);
	int cMath_GetBit(int alBitNum);
	void cMath_SetBitFlag(int&out alFlagNum,  int alBit,  bool abSet);
	bool cMath_GetBitFlag(int alFlagNum,  int alBit);
	cVector3f cMath_ExpandAABBMin(const cVector3f&in avBaseMin,  const cVector3f&in avAddMin);
	cVector3f cMath_ExpandAABBMax(const cVector3f&in avBaseMax,  const cVector3f&in avAddMax);
	bool cMath_CheckRectIntersection(const cRect2l&in aRect1,  const cRect2l&in aRect2);
	bool cMath_CheckRectIntersection(const cRect2f&in aRect1,  const cRect2f&in aRect2);
	bool cMath_CheckRectIntersection(const cVector2l&in avMin1,  const cVector2l&in avMax1,  const cVector2l&in avMin2,  const cVector2l&in avMax2);
	bool cMath_CheckRectIntersection(const cVector2f&in avMin1,  const cVector2f&in avMax1,  const cVector2f&in avMin2,  const cVector2f&in avMax2);
	bool cMath_CheckPointInRectIntersection(const cVector2f&in avPoint,  const cRect2f&in aRect);
	bool cMath_CheckRectFit(const cRect2l&in aRectSrc,  const cRect2l&in aRectDest);
	bool cMath_CheckRectFit(const cRect2f&in aRectSrc,  const cRect2f&in aRectDest);
	cRect2f cMath_GetClipRect(const cRect2f&in aRectSrc, const cRect2f&in aRectDest);
	bool cMath_CheckPointInSphereIntersection(const cVector3f&in avPoint,  const cVector3f&in avSpherePos,  float afSphereRadius);
	bool cMath_CheckSphereIntersection(const cVector3f&in avPosA,  float afRadiusA, const cVector3f&in avPosB,  float afRadiusB);
	bool cMath_CheckAABBIntersection(	const cVector3f&in avMin1, const cVector3f&in avMax1,  const cVector3f&in avMin2, const cVector3f&in avMax2);
	bool cMath_CheckAABBInside(const cVector3f&in avInsideMin,  const cVector3f&in avInsideMax,  const cVector3f&in avOutsideMin, const cVector3f&in avOutsideMax);
	bool cMath_CheckPointInAABBIntersection(const cVector3f&in avPoint,  const cVector3f&in avMin, const cVector3f&in avMax);
	bool cMath_CheckBVIntersection(cBoundingVolume@+ aBV1, cBoundingVolume@+ aBV2);
	bool cMath_CheckPointInBVIntersection(const cVector3f&in avPoint,  cBoundingVolume@+ aBV);
	bool cMath_GetNormalizedClipRectFromBV(	cVector3f &out avDestMin,  cVector3f &out avDestMax,  cBoundingVolume@+ aBV,  cFrustum@+ aFrustum);
	cRect2l cMath_GetClipRectFromNormalizedMinMax(const cVector3f&in avMin,  const cVector3f&in avMax,  const cVector2l &in avScreenSize);
	void cMath_GetClipRectFromBV(	cRect2l &out aDestRect,  cBoundingVolume@+ aBV,  cFrustum@+ apFrustum,  const cVector2l &in avScreenSize);
	cRect2l cMath_GetClipRectFromSphere(const cVector3f&in avPosition,  float afRadius,  cFrustum@+ apFrustum,  const cVector2l &in avScreenSize,  bool abPositionIsScreenSpace);
	bool cMath_CheckSphereLineIntersection(const cVector3f&in avSpherePos,  float afSphereRadius,  const cVector3f&in avLineStart,  const cVector3f&in avLineEnd,  float&out afT1,  cVector3f&out afIntersection1,  float&out afT2,  cVector3f&out avIntersection2);
	bool cMath_CheckAABBLineIntersection(	const cVector3f&in avMin, const cVector3f&in avMax,  const cVector3f &in avLineStart,  const cVector3f&in avLineEnd,  cVector3f&out avIntersectionPos,  float&out afT);
	bool cMath_CheckAABBSphereCollision(const cVector3f&in avMin, const cVector3f&in avMax,  const cVector3f&in avCenter,  float afRadius);
	int cMath_RoundToInt(float afVal);
	cVector2l cMath_RoundToInt(const cVector2f&in avX);
	cVector3l cMath_RoundToInt(const cVector3f&in avX);
	float cMath_Round(float afVal);
	float cMath_RoundFloatToDecimals(float afVal,  int alPrecision);
	float cMath_GetFraction(float afVal);
	float cMath_Modulus(float afDividend,  float afDivisor);
	float cMath_ToRad(float afAngle);
	float cMath_ToDeg(float afAngle);
	int cMath_Log2ToInt(int alX);
	int cMath_Pow2(int alX);
	bool cMath_IsPow2(int alX);
	float cMath_Wrap(float afX,  float afMin,  float afMax);
	float cMath_Clamp(float afX,  float afMin,  float afMax);
	int cMath_Clamp(int alX,  int alMin,  int alMax);
	float cMath_Max(float afX, float afY);
	float cMath_Min(float afX, float afY);
	int cMath_Max(int alX, int alY);
	int cMath_Min(int alX, int alY);
	float cMath_Abs(float afX);
	int cMath_Abs(int alX);
	float cMath_Sign(float afX);
	int cMath_Sign(int alX);
	float cMath_GetAngleDistance(float afAngle1,  float afAngle2,  float afMaxAngle);
	float cMath_GetAngleDistanceRad(float afAngle1,  float afAngle2);
	float cMath_GetAngleDistanceDeg(float afAngle1,  float afAngle2);
	cVector2f cMath_GetAngleDistanceVector2f(const cVector2f&in avAngle1,  const cVector2f&in avAngle2,  float afMaxAngle);
	cVector2f cMath_GetAngleDistanceVector2fRad(const cVector2f&in avAngle1,  const cVector2f&in avAngle2);
	cVector2f cMath_GetAngleDistanceVector2fDeg(const cVector2f&in avAngle1,  const cVector2f&in avAngle2);
	cVector3f cMath_GetAngleDistanceVector3f(const cVector3f&in avAngle1,  const cVector3f&in avAngle2,  float afMaxAngle);
	cVector3f cMath_GetAngleDistanceVector3fRad(const cVector3f&in avAngle1,  const cVector3f&in avAngle2);
	cVector3f cMath_GetAngleDistanceVector3fDeg(const cVector3f&in avAngle1,  const cVector3f&in avAngle2);
	float cMath_TurnAngle(float afAngle, float afFinalAngle, float afSpeed, float afMaxAngle);
	float cMath_TurnAngleRad(float afAngle, float afFinalAngle, float afSpeed);
	float cMath_TurnAngleDeg(float afAngle, float afFinalAngle, float afSpeed);
	float cMath_InterpolateLinear(float afA, float afB, float afT);
	float cMath_InterpolateCosine(float afA, float afB, float afT);
	float cMath_InterpolateSigmoid(float afA, float afB, float afT);
	float cMath_InterpolateCubic(float afX0,  float afX1,  float afX2,  float afX3,  float afT);
	float cMath_InterpolateHermite(float afX0,  float afX1,  float afX2,  float afX3,  float afT,  float afTension,  float afBias);
	float cMath_GetCorrectSignOfSpeed(float afCurrent,  float afDest,  float afSpeed);
	float cMath_IncreaseTo(float afX,  float afAdd,  float afDest);
	float cMath_SigmoidCurve(float afX);
	float cMath_Easing(eEasing aType,  float afT,  float afMin=0,  float afMax=1);
	float cMath_Vector2Dist(const cVector2f &in avPosA, const cVector2f &in avPosB);
	float cMath_Vector2DistXY(const cVector3f &in avPosA, const cVector3f &in avPosB);
	float cMath_Vector2DistXZ(const cVector3f &in avPosA, const cVector3f &in avPosB);
	float cMath_Vector2DistYZ(const cVector3f &in avPosA, const cVector3f &in avPosB);
	float cMath_Vector2DistSqr(const cVector2f &in avPosA, const cVector2f &in avPosB);
	float cMath_Vector2DistSqrXY(const cVector3f &in avPosA, const cVector3f &in avPosB);
	float cMath_Vector2DistSqrXZ(const cVector3f &in avPosA, const cVector3f &in avPosB);
	float cMath_Vector2DistSqrYZ(const cVector3f &in avPosA, const cVector3f &in avPosB);
	float cMath_Vector2Dot(const cVector2f &in avPosA, const cVector2f &in avPosB);
	cVector2f cMath_Vector2IncreaseTo(const cVector2f&in avX,  const cVector2f&in avAdd,  const cVector2f&in avDest);
	float cMath_GetAngleFromPoints2D(const cVector2f &in aStartPos,  const cVector2f &in avGoalPos);
	cVector2f cMath_GetVectorFromAngle2D(float afAngle,  float afLength);
	void cMath_GetAngleFromVector(const cVector2f &in avVec,  float &out afAngle,  float &out afLength);
	cVector2f cMath_ProjectVector2D(const cVector2f &in avSrcVec,  const cVector2f &in avDestVec);
	cVector2f cMath_Vector2CatmullRom(const cVector2f &in avP0,  const cVector2f &in avP1,  const cVector2f &in avP2,  const cVector2f &in avP3,  float afFract);
	cVector2f cMath_Vector2Floor(const cVector2f &in avVec);
	cVector2f cMath_Vector2Ceil(const cVector2f &in avVec);
	cVector2f cMath_Vector2Abs(const cVector2f &in avVec);
	cVector2f cMath_Vector2Min(const cVector2f &in avVecA,  const cVector2f &in avVecB);
	cVector2f cMath_Vector2Max(const cVector2f &in avVecA,  const cVector2f &in avVecB);
	cVector2f cMath_Vector2Normalize(const cVector2f &in avVec);
	cVector2f cMath_Vector2ToRad(const cVector2f &in avVec);
	cVector2f cMath_Vector2ToDeg(const cVector2f &in avVec);
	cVector2f cMath_Vector2Rotate(const cVector2f &in avVec,  float afAngle);
	float cMath_Vector2MinElement(const cVector2f &in avVec);
	float cMath_Vector2MaxElement(const cVector2f &in avVec, 	);
	cVector3f cMath_Vector3MaxLength(const cVector3f &in avVec,  float afMaxLength);
	cVector3f cMath_Vector3MinLength(const cVector3f &in avVec,  float afMinLength);
	cVector3f cMath_Vector3ClampLength(const cVector3f &in avVec, float afMinLength,  float afMaxLength);
	cVector3f cMath_Vector3ToRad(const cVector3f &in avVec);
	cVector3f cMath_Vector3ToDeg(const cVector3f &in avVec);
	cVector3f cMath_Vector3AngleDistance(const cVector3f &in avAngles1,  const cVector3f &in avAngles2,  float afMaxAngle);
	cVector3f cMath_Vector3AngleDistanceRad(const cVector3f &in avAngles1,  const cVector3f &in avAngles2);
	cVector3f cMath_Vector3AngleDistanceDeg(const cVector3f &in avAngles1,  const cVector3f &in avAngles2);
	cVector3f cMath_Vector3Floor(const cVector3f &in avVec);
	cVector3f cMath_Vector3Ceil(const cVector3f &in avVec);
	cVector3f cMath_Vector3Abs(const cVector3f &in avVec);
	cVector3f cMath_Vector3Min(const cVector3f &in avVecA,  const cVector3f &in avVecB);
	cVector3f cMath_Vector3Max(const cVector3f &in avVecA,  const cVector3f &in avVecB);
	float cMath_Vector3MinElement(const cVector3f &in avVec);
	float cMath_Vector3MaxElement(const cVector3f &in avVec);
	cVector3f cMath_Vector3Normalize(const cVector3f &in avVec);
	float cMath_Vector3DistSqr(const cVector3f &in avStartPos,  const cVector3f &in avEndPos);
	float cMath_Vector3Dist(const cVector3f &in avStartPos,  const cVector3f &in avEndPos);
	cVector3f cMath_GetAngleFromPoints3D(const cVector3f &in avStartPos,  const cVector3f &in avGoalPos);
	cVector3f cMath_Vector3Cross(const cVector3f&in avVecA, const cVector3f&in avVecB);
	float cMath_Vector3Dot(const cVector3f&in avVecA, const cVector3f&in avVecB);
	cVector3f cMath_Vector3Project(const cVector3f &in avSrcVec,  const cVector3f &in avDestVec);
	cVector3f cMath_Vector3ProjectOnPlane(const cVector3f &in avSrcVec,  const cVector3f &in avPlaneNormal);
	cVector3f cMath_Vector3Reflect(const cVector3f &in avVec,  const cVector3f &in avNormal);
	float cMath_Vector3Angle(const cVector3f&in avVecA, const cVector3f&in avVecB);
	cVector3f cMath_Vector3UnProject(const cVector3f&in avVec,  const cRect2f &in aScreenRect,  const cMatrixf&in a_mtxViewProj);
	void cMath_Vector3ClampToLength(cVector3f&in avVec,  float afMaxLength);
	cVector3f cMath_Vector3IncreaseTo(const cVector3f&in avX,  const cVector3f&in avAdd,  const cVector3f&in avDest);
	void cMath_Vector3OrthonormalizeBasis(const cVector3f&in avSrcRight,  const cVector3f&in avSrcUp,  const cVector3f&in avSrcForward,  cVector3f&out avDstRight,  cVector3f&out avDstUp,  cVector3f&out avDstForward);
	cVector3f cMath_Vector3SphereSurfacePoint(const cVector2f&in avSeed,  float afRadius);
	cVector3f cMath_Vector3CatmullRom(const cVector3f&in avP0,  const cVector3f&in avP1,  const cVector3f&in avP2,  const cVector3f&in avP3,  float afFract);
	cVector2f cMath_GetSphericalCoordsFromPoint3D(const cVector3f&in avSphCenter,  const cVector3f&in avPoint);
	cVector3f cMath_GetPoint3DFromSphericalCoords(const cVector3f&in avSphCenter,  float afSphRadius,  const cVector2f&in avSphCoords);
	float cMath_PlaneDot(const cPlanef&in aPlaneA,  const cPlanef&in aPlaneB);
	bool cMath_PlaneParallel(const cPlanef&in aPlaneA,  const cPlanef&in aPlaneB);
	cPlanef cMath_TransformPlane(const cMatrixf &in a_mtxTransform,  const cPlanef&in aPlane);
	float cMath_PlaneToPointDist(const cPlanef&in aPlane,  const cVector3f&in avVec);
	bool cMath_PlaneIntersectionPoint(const cPlanef&in aP1,  const cPlanef&in aP2,  const cPlanef&in aP3,  cVector3f&in avPoint);
	bool cMath_CheckPlaneLineIntersection(const cPlanef&in aPlane,  const cVector3f &in avLineStart,  const cVector3f &in avLineEnd,  cVector3f&out avIntersectionPos,  float&out afT);
	bool cMath_CheckPlaneSphereCollision(const cPlanef&in aPlane,  const cVector3f &in avCenter,  float afRadius);
	bool cMath_CheckPlaneAABBCollision(const cPlanef&in aPlane,  const cVector3f &in avMin,  const cVector3f &in avMax,  const cVector3f &in avSphereCenter, float afSphereRadius);
	bool cMath_CheckPlaneAABBCollision(const cPlanef&in aPlane,  const cVector3f &in avMin,  const cVector3f &in avMax);
	bool cMath_CheckPlaneBVCollision(const cPlanef&in aPlane,  cBoundingVolume@+ aBV);
	cQuaternion cMath_QuaternionLerp(float afT, const cQuaternion&in aqA,  const cQuaternion&in aqB);
	cQuaternion cMath_QuaternionNlerp(float afT, const cQuaternion&in aqA,  const cQuaternion&in aqB);
	cQuaternion cMath_QuaternionSlerp(float afT, const cQuaternion&in aqA,  const cQuaternion&in aqB, bool abShortestPath);
	float cMath_QuaternionDot(const cQuaternion&in aqA, const cQuaternion&in aqB);
	cQuaternion cMath_QuaternionMul(const cQuaternion&in aqA, const cQuaternion&in aqB);
	cQuaternion cMath_QuaternionMatrix(const cMatrixf &in a_mtxA);
	cQuaternion cMath_QuaternionEuler(const cVector3f&in avEuler,  eEulerRotationOrder aOrder);
	cQuaternion cMath_QuaternionNormalize(const cQuaternion&in aqA);
	cQuaternion cMath_QuaternionConjugate(const cQuaternion&in aqA);
	cQuaternion cMath_QuaternionInverse(const cQuaternion&in aqA);
	cMatrixf cMath_MatrixSlerp(float afT, const cMatrixf&in a_mtxA,  const cMatrixf&in a_mtxB,  bool abShortestPath);
	cMatrixf cMath_MatrixMul(const cMatrixf &in a_mtxA, const cMatrixf &in a_mtxB);
	cVector3f cMath_MatrixMul(const cMatrixf &in a_mtxA, const cVector3f &in avB);
	cVector3f cMath_MatrixMul3x3(const cMatrixf &in a_mtxA, const cVector3f &in avB);
	cVector3f cMath_MatrixMulDivideW(const cMatrixf &in a_mtxA, const cVector3f &in avB);
	cMatrixf cMath_MatrixMulScalar(const cMatrixf &in a_mtxA,  float afB);
	cMatrixf cMath_MatrixRotateXYZ(const cVector3f&in avRot);
	cMatrixf cMath_MatrixRotateXZY(const cVector3f&in avRot);
	cMatrixf cMath_MatrixRotateYXZ(const cVector3f&in avRot);
	cMatrixf cMath_MatrixRotateYZX(const cVector3f&in avRot);
	cMatrixf cMath_MatrixRotateZXY(const cVector3f&in avRot);
	cMatrixf cMath_MatrixRotateZYX(const cVector3f&in avRot);
	cMatrixf cMath_MatrixRotateX(float afAngle);
	cMatrixf cMath_MatrixRotateY(float afAngle);
	cMatrixf cMath_MatrixRotateZ(float afAngle);
	cMatrixf cMath_MatrixScale(const cVector3f&in avScale);
	cMatrixf cMath_MatrixTranslate(const cVector3f&in avTrans);
	cMatrixf cMath_MatrixQuaternion(const cQuaternion &in aqRot);
	cMatrixf cMath_MatrixInverse(const cMatrixf &in a_mtxA);
	cMatrixf cMath_MatrixPlaneMirror(const cPlanef &in aPlane);
	cVector3f cMath_MatrixToEulerAngles(const cMatrixf &in a_mtxA);
	cVector3f cMath_MatrixToEulerAnglesMultiSolution(const cMatrixf &in a_mtxA,  cVector3f &out avSolution1,  cVector3f &out avSolution2);
	cVector3f cMath_MatrixEulerAngleDistance(const cMatrixf &in a_mtxA,  const cMatrixf &in a_mtxB);
	cMatrixf cMath_MatrixUnitVectors(const cVector3f&in avRight,  const cVector3f&in avUp,  const cVector3f&in avForward,  const cVector3f&in avTranslate);
	cMatrixf cMath_ProjectionMatrixObliqueNearClipPlane(const cMatrixf &in a_mtxProjMatrix,  const cPlanef&in aClipPlane);
	cMatrixf cMath_MatrixPerspectiveProjection(float afNearClipPlane,  float afFarClipPlane,  float afFOV,  float afAspect,  bool abInfFarPlane);
	cMatrixf cMath_MatrixOrthographicProjection(float afNearClipPlane,  float afFarClipPlane,  const cVector2f&in avViewSize);
	cColor cMath_HSBToRGB(const cVector3f &in avHSB);
	cVector3f cMath_RGBToHSB(const cColor &in aX);
	cColor cMath_HexToRGB(const tString &in asHex);
	tString cMath_RGBToHex(const cColor &in aRGB);
	cColor cMath_HexWToRGB(const tWString &in asHex);
	tWString cMath_RGBToHexW(const cColor &in aRGB);
	tWString cString_To16Char(const tString &in asString);
	tString cString_To8Char(const tWString &in awsString);
	tString cString_S16BitToUTF8(const tWString&in awsString);
	tWString cString_Get16BitFromArray(const tString &in asArray);
	tString cString_ToString(float afX,  int alNumOfDecimals=-1,  bool abRemoveZeros=false);
	tString cString_ToString(int alX,  int alPaddingZeros);
	tWString cString_ToStringW(float afX,  int alNumOfDecimals=-1,  bool abRemoveZeros=false);
	tWString cString_ToStringW(int alX,  int alPaddingZeros);
	float cString_ToFloat(const tString&in asStr,  float afDefault);
	int cString_ToInt(const tString&in asStr,  int alDefault);
	bool cString_ToBool(const tString&in asStr,  bool abDefault);
	cVector2l cString_ToVector2l(const tString&in asStr,  const cVector2l&in avDefault);
	cVector2f cString_ToVector2f(const tString&in asStr,  const cVector2f&in avDefault);
	cVector3l cString_ToVector3l(const tString&in asStr,  const cVector3l&in avDefault);
	cVector3f cString_ToVector3f(const tString&in asStr,  const cVector3f&in avDefault);
	cVector4f cString_ToVector4f(const tString&in asStr,  const cVector4f&in avDefault);
	cColor cString_ToColor(const tString&in asStr,  const cColor&in aDefault);
	cMatrixf cString_ToMatrixf(const tString&in asStr,  const cMatrixf&in a_mtxDefault);
	tString cString_Sub(const tString&in asString, int alStart,  int alCount=-1);
	tWString cString_SubW(const tWString&in asString, int alStart,  int alCount=-1);
	tString cString_ToLowerCase(const tString&in aString);
	tWString cString_ToLowerCaseW(const tWString&in aString);
	tString cString_ToUpperCase(const tString&in aString);
	tWString cString_ToUpperCaseW(const tWString&in aString);
	tString cString_ReplaceCharTo(const tString&in aString,  const tString&in asOldChar, const tString&in asNewChar);
	tWString cString_ReplaceCharToW(const tWString&in aString,  const tWString&in asOldChar, const tWString&in asNewChar);
	tString cString_ReplaceStringTo(const tString&in aString,  const tString&in asOldString, const tString&in asNewString);
	tWString cString_ReplaceStringToW(const tWString&in aString,  const tWString&in asOldString, const tWString&in asNewString);
	tString cString_GetLastChar(const tString&in aString);
	tWString cString_GetLastCharW(const tWString&in aString);
	int cString_GetFirstCharPos(const tString&in aString,  int8 alChar);
	int cString_GetLastCharPos(const tString&in aString,  int8 alChar);
	int cString_GetFirstStringPos(const tString&in aString,  const tString&in aChar);
	int cString_GetFirstStringPosW(const tWString&in aString,  const tWString&in aChar);
	int cString_GetLastStringPos(const tString&in aString,  const tString&in aChar);
	int cString_GetLastStringPosW(const tWString&in aString,  const tWString&in aChar);
	int cString_CountCharsInString(const tString&in aString,  const tString&in aChar);
	int cString_CountCharsInStringW(const tWString&in aString,  const tWString&in aChar);
	uint cString_GetHash(const tString&in asStr);
	uint cString_GetHashW(const tWString&in asStr);
	uint64 cString_GetHash64(const tString&in asStr);
	uint64 cString_GetHash64W(const tWString&in asStr);
	tString cString_GetNumericSuffix(const tString&in asStr);
	tWString cString_GetNumericSuffixW(const tWString&in asStr);
	int cString_GetNumericSuffixInt(const tString&in aString,  int alDefault=0);
	int cString_GetNumericSuffixIntW(const tWString&in aString,  int alDefault=0);
	float cString_GetNumericSuffixFloat(const tString&in aString,  float afDefault=0);
	float cString_GetNumericSuffixFloatW(const tWString&in aString,  float afDefault=0);
	tWString cString_GetDecodedString(const tString&in asStr);
	void cString_GetStringVec(const tString&in asData,  array<tString> &inout avOutStrings,  const tString&in asSepp);
	void cString_GetFloatVec(const tString&in asData,  array<float> &inout avOutFloats,  const tString&in asSepp);
	void cString_GetIntVec(const tString&in asData,  array<int> &inout avOutInts,  const tString&in asSepp);
	bool cString_CheckWildcardStrings(const tString&in asStr,  const tString&in asWildcardStr,  array<tString> &in avSubStringArray);
	tString cString_GetFileExt(const tString&in aString);
	tWString cString_GetFileExtW(const tWString&in aString);
	tString cString_SetFileExt(const tString&in aString, const tString&in aExt);
	tWString cString_SetFileExtW(const tWString&in aString, const tWString&in aExt);
	tString cString_GetFileName(const tString&in aString);
	tWString cString_GetFileNameW(const tWString&in aString);
	tString cString_GetFilePath(const tString&in aString);
	tWString cString_GetFilePathW(const tWString&in aString);
	tString cString_SetFilePath(const tString&in aString, const tString&in aPath);
	tWString cString_SetFilePathW(const tWString&in aString, const tWString&in aPath);
	tString cString_GetFilePathTopFolder(const tString&in aString);
	tWString cString_GetFilePathTopFolderW(const tWString&in aString);
	tString cString_AddSlashAtEnd(const tString&in asPath);
	tWString cString_AddSlashAtEndW(const tWString&in asPath);
	tString cString_RemoveSlashAtEnd(const tString&in asPath);
	tWString cString_RemoveSlashAtEndW(const tWString&in asPath);
	uint H32(const tString&in  asStr);
	uint64 H64(const tString&in asStr);
	void Log(const tString&in asString);
	void LogNewLine(const tString&in asString);
	void Warning(const tString&in asString);
	void Error(const tString&in asString);
	void FatalError(const tString&in asString);
	void Log(uint aLabel,  const tString&in asString);
	void Warning(uint aLabel,  int alWarningLevel,  const tString&in asString);
	void Error(uint aLabel, const tString&in asString);
	void Log(const tString&in asString,  uint aLabel);
	void Warning(const tString&in asString,  uint aLabel,  int alWarningLevel);
	void Error(const tString&in asString,  uint aLabel);
	uint cSystem_GetFileSize(const tWString&in asFileName);
	bool cSystem_FileExists(const tWString&in asFileName);
	void cSystem_RemoveFile(const tWString&in asFileName);
	bool cSystem_CloneFile(const tWString&in asSrcFileName, const tWString&in asDestFileName, 	bool abFailIfExists);
	bool cSystem_CreateFolder(const tWString&in asPath);
	bool cSystem_RemoveFolder(const tWString&in asPath,  bool abDeleteAllFiles,  bool abDeleteAllSubFolders);
	bool cSystem_FolderExists(const tWString&in asPath);
	tWString cSystem_GetFullFilePath(const tWString&in asFilePath);
	cDate cSystem_FileModifiedDate(const tWString&in asFilePath);
	cDate cSystem_FileCreationDate(const tWString&in asFilePath);
	void cSystem_FindFilesInDir(array<tWString> &inout avStrings,  const tWString&in asDir,  const tWString&in asMask,  bool abAddHidden);
	void cSystem_FindFoldersInDir(array<tWString> &inout avtStrings,  const tWString&in asDir,  bool abAddHidden,  bool abAddUpFolder);
	tWString cSystem_GetWorkingDir();
	const tString& cSystem_GetPlatformName();
	bool cSystem_HasWindowFocus(const tWString &in asWindowCaption);
	uint cSystem_GetApplicationTime();
	void cSystem_Sleep(uint alMilliSecs);
	void cSystem_Wrapper_CreateMessageBox(eMsgBoxType aType,  const tWString&in asCaption,  const tWString&in asMessage);
	cDate cSystem_GetDate();
	void cSystem_CopyTextToClipboard(const tWString &in asText);
	tWString cSystem_LoadTextFromClipboard();
	tWString cSystem_GetSystemSpecialPath(eSystemPath aPathType);
	uint cSystem_GetSystemAvailableDrives();
	void cSystem_GetAvailableVideoDrivers(array<tString> &inout avDrivers);
	void cSystem_GetAvailableVideoModes(array<cVector2l> &inout avScreenSizes,  array<int> &inout avBpps,  array<int> &inout avMinRefreshRates,  int alMinBpp,  int alMinRefreshRate,  bool abRemoveDuplicates);
	void cSystem_ProfileStart(const tString&in asName);
	void cSystem_ProfileEnd(const tString&in asName);
	void cEngine_Exit();
	void cEngine_ResetLogicTimer();
	void cEngine_SetUpdatesPerSec(int alUpdatesPerSec);
	int cEngine_GetUpdatesPerSec();
	float cEngine_GetStepSize();
	float cEngine_GetFPS();
	float cEngine_GetAvgFrameTimeInMS();
	void cEngine_SetFPSUpdateRate(float afSec);
	float cEngine_GetFPSUpdateRate();
	float cEngine_GetFrameTime();
	double cEngine_GetGameTime();
	void cEngine_SetLimitFPS(bool abX);
	bool cEngine_GetLimitFPS();
	void cEngine_SetWaitIfAppOutOfFocus(bool abX);
	bool cEngine_GetWaitIfAppOutOfFocus();
	void cEngine_SetUpdaterPaused(const tString&in asContainer,  const tString&in asUpdate,  bool abPaused);
	void cEngine_SetAllUpdatersPaused(const tString&in asContainer,  bool abPaused);
	void cEngine_SetGlobalUpdaterPaused(const tString&in asUpdate,  bool abPaused);
	void cEngine_SetAllGlobalUpdatersPaused(bool abPaused);
	uint cEngine_GetPerFrameUpdateSteps();
	void cEngine_SetSceneRenderFlags(uint alFlags);
	uint cEngine_GetSceneRenderFlags();
	float cEngine_GetAvgLogicFrameTimeMS();
	float cEngine_GetAvgVariableFrameTimeMS();
	float cEngine_GetAvgRenderFrameTimeMS();
	float cEngine_GetMinMS();
	float cEngine_GetMaxMS();
	void cEngine_GetFPSMinMax(float &out afMin,  float &out afMax);
	void cEngine_GetFrameTimeMinMax(float &out afMin,  float &out afMax);
	void cScene_Reset();
	cViewport@ cScene_CreateViewport(cCamera @apCamera,  cWorld @apWorld,  bool abAddLast);
	void cScene_DestroyViewport(cViewport@ apViewPort);
	bool cScene_ViewportExists(cViewport@ apViewPort);
	void cScene_SetCurrentListener(cViewport@ apViewPort);
	cCamera@ cScene_CreateCamera(eCameraMoveMode aMoveMode);
	void cScene_DestroyCamera(cCamera@ apCam);
	cWorld@ cScene_LoadWorld(const tString&in asFile,  int aFlags);
	cWorld@ cScene_CreateWorld(const tString&in asName);
	void cScene_DestroyWorld(cWorld@ apWorld);
	void cScene_WorldExists(cWorld@ apWorld);
	void cScene_FadeGradingTexture(cWorld@ apWorld,  iTexture@ apGrading,  float afTime);
	cSubMeshEntity@ cScene_ToSubMeshEntity(iEntity3D@ apEntity);
	cMeshEntity@ cScene_ToMeshEntity(iEntity3D@ apEntity);
	cBillboard@ cScene_ToBillboard(iEntity3D@ apEntity);
	cBeam@ cScene_ToBeam(iEntity3D@ apEntity);
	iRopeEntity@ cScene_ToRopeEntity(iEntity3D@ apEntity);
	cRopeEntityBillboard@ cScene_ToRopeEntityBillboard(iEntity3D@ apEntity);
	cRopeEntity3D@ cScene_ToRopeEntity3D(iEntity3D@ apEntity);
	cSoundEntity@ cScene_ToSoundEntity(iEntity3D@ apEntity);
	cLensFlare@ cScene_ToLensFlare(iEntity3D@ apEntity);
	cForceField@ cScene_ToForceField(iEntity3D@ apEntity);
	cLightBox@ cScene_ToLightBox(iLight@ apLight);
	cLightPoint@ cScene_ToLightPoint(iLight@ apLight);
	cLightSpot@ cScene_ToLightSpot(iLight@ apLight);
	cLightDirectional@ cScene_ToLightDirectional(iLight@ apLight);
	cAction@ cInput_CreateAction(const tString&in asName,  int alId);
	iSubAction@ cInput_InputToSubAction();
	void cInput_DestroyAction(cAction @apAction);
	void cInput_Update(float afX);
	bool cInput_CheckForInput();
	bool cInput_IsTriggered(const tString&in asName);
	bool cInput_IsTriggered(int alId);
	bool cInput_WasTriggered(const tString&in asName);
	bool cInput_WasTriggered(int alId);
	bool cInput_BecameTriggered(const tString&in asName);
	bool cInput_BecameTriggered(int alId);
	bool cInput_DoubleTriggered(const tString&in asName,  float afLimit);
	bool cInput_DoubleTriggered(int alId,  float afLimit);
	iKeyboard@ cInput_GetKeyboard();
	iMouse@ cInput_GetMouse();
	iEyeTracker@ cInput_GetEyeTracker();
	cAction@ cInput_GetAction(const tString&in asName);
	cAction@ cInput_GetAction(int alId);
	void cInput_ResetActionsToCurrentState();
	bool cResources_AddResourceDir(const tWString &in asDir,  bool abAddSubDirectories,  const tString &in asMask);
	void cResources_ClearResourceDirs();
	bool cResources_AddLanguageFile(const tString &in asFilePath,  bool abAddResourceDirs);
	void cResources_ClearTranslations();
	const tWString& cResources_Translate(const tString&in asCat,  const tString&in asName);
	bool cResources_LoadResourceDirsFile(const tString &in asFile);
	iXmlDocument@ cResources_LoadXmlDocument(const tString&in asFile);
	void cResources_DestroyXmlDocument(iXmlDocument@ apDoc);
	iTexture@ cResources_CreateTexture1D(const tString&in asName,  bool abUseMipMaps);
	iTexture@ cResources_CreateTexture2D(const tString&in asName,  bool abUseMipMaps);
	iTexture@ cResources_CreateTexture3D(const tString&in asName,  bool abUseMipMaps);
	iTexture@ cResources_CreateTextureCubeMap(const tString&in asName,  bool abUseMipMaps);
	void cResources_DestroyTexture(iTexture @apTexture);
	cMaterial@ cResources_CreateMaterial(const tString&in asName);
	void cResources_DestroyMaterial(cMaterial @apMaterial);
	void cResources_SetMaterialTextureSizeDownScaleLevel(int alLevel);
	int cResources_GetMaterialTextureSizeDownScaleLevel();
	void cResources_SetMaterialTextureFilter(int alFilter);
	int cResources_GetMaterialTextureFilter();
	void cResources_SetMaterialTextureAnisotropy(float afX);
	float cResources_GetMaterialTextureAnisotropy();
	tString cResources_GetMaterialPhysicsName(const tString&in asName);
	iGpuShader@ cResources_CreateGpuShader(const tString&in asName,  int alType,  cPrepParserVarContainer @apVarCont);
	iGpuShader@ cResources_CreateGpuShader(const tString&in asName,  int alType);
	void cResources_DestroyGpuShader(iGpuShader @apShader);
	cMesh@ cResources_CreateMesh(const tString&in asName);
	void cResources_DestroyMesh(cMesh@ apMesh);
	cSoundEntityData@ cResources_CreateSoundEntityData(const tString&in asName);
	void cResources_PreloadSoundEntityData(const tString&in asName, bool abNonBlockingLoad);
	void cResources_DestroySoundEntityData(cSoundEntityData @apData);
	iSoundData@ cResources_CreateSoundData(const tString&in asName,  bool abStream,  bool abLooping,  bool ab3,  bool abNonBlockingLoad);
	void cResources_DestroySoundData(iSoundData@ apData);
	void cResources_DestroyUnusedSoundData(int alMaxToKeep);
	iFontData@ cResources_CreateFontData(const tString&in asName);
	void cResources_DestroyFontData(iFontData @apData);
	cFrameSubImage@ cResources_CreateImage(const tString&in asName);
	void cResources_DestroyImage(cFrameSubImage @apData);
	iVideoStream@ cResources_CreateVideo(const tString&in asName);
	void cResources_DestroyVideo(iVideoStream @apVideo);
	void cResources_PreloadParticleSystem(const tString&in asDataName);
	void cResources_DestroyUnusedParticleSystems(int alMaxToKeep);
	iPhysicsWorld@ cPhysics_CreateWorld(bool abAddSurfaceData);
	void cPhysics_DestroyWorld(iPhysicsWorld@ apWorld);
	void cPhysics_SetImpactDuration(float afX);
	float cPhysics_GetImpactDuration();
	void cPhysics_SetMaxImpacts(int alX);
	int cPhysics_GetMaxImpacts();
	iPhysicsBody@ cPhysics_ToBody(iEntity3D@ apEntity);
	iPhysicsJointBall@ cPhysics_ToJointBall(iPhysicsJoint@ apJoint);
	iPhysicsJointHinge@ cPhysics_ToJointHinge(iPhysicsJoint@ apJoint);
	iPhysicsJointSlider@ cPhysics_ToJointSlider(iPhysicsJoint@ apJoint);
	iLowLevelGraphics@ cGraphics_GetLowLevel();
	iRenderer@ cGraphics_GetRenderer(eRenderer aType);
	void cGraphics_ReloadRendererData();
	iFrameBuffer@ cGraphics_CreateFrameBuffer(const tString&in asName);
	void cGraphics_DestroyFrameBuffer(iFrameBuffer@ apFrameBuffer);
	iFrameBuffer@ cGraphics_GetTempFrameBuffer(const cVector2l&in avSize,  ePixelFormat aPixelFormat,  int alIndex);
	iDepthStencilBuffer@ cGraphics_CreateDepthStencilBuffer(const cVector2l&in avSize,  int alDepthBits,  int alStencilBits,  bool abLookForMatchingFirst);
	iDepthStencilBuffer@ cGraphics_FindDepthStencilBuffer(const cVector2l&in avSize,  int alMinDepthBits,  int alMinStencilBits);
	void cGraphics_DestoroyDepthStencilBuffer(iDepthStencilBuffer@ apBuffer);
	iTexture@ cGraphics_CreateTexture(const tString &in asName, eTextureType aType,  eTextureUsage aUsage);
	void cGraphics_DestroyTexture(iTexture@ apTexture);
	cPostEffectComposite@ cGraphics_CreatePostEffectComposite();
	void cGraphics_DestroyPostEffectComposite(cPostEffectComposite@ apComposite);
	cHeightMap@ cGraphics_CreateHeightMap();
	cHeightMap@ cGraphics_CreateHeightMapResizedCopy(cHeightMap @apHeightMap,  const cVector2l&in avSize);
	cHeightMap@ cGraphics_LoadHeightMapRaw(const tString&in asFileName,  const cVector2l&in avSize);
	cHeightMap@ cGraphics_LoadHeightMapPackedRGB(const tString&in asFileName);
	void cGraphics_DestroyHeightMap(cHeightMap@ apHeightMap);
	iGpuProgram@ cGraphics_CreateGpuProgram(const tString&in asName);
	iGpuProgram@ cGraphics_CreateGpuProgramFromShaders(const tString&in asName,  const tString&in asVtxShader, const tString&in asFragShader,  cPrepParserVarContainer @apVarContainer);
	void cGraphics_DestroyGpuProgram(iGpuProgram@ apProgram);
	iMaterialType@ cGraphics_GetMaterialType(const tString&in asName);
	void cGraphics_ReloadMaterials();
	cPostEffect_ToneMapping@ cGraphics_CreatePostEffect_ToneMapping();
	cPostEffect_ImageTrail@ cGraphics_CreatePostEffect_ImageTrail();
	cPostEffect_ChromaticAberration@ cGraphics_CreatePostEffect_ChromaticAberration();
	cPostEffect_RadialBlur@ cGraphics_CreatePostEffect_RadialBlur();
	cPostEffect_VideoDistortion@ cGraphics_CreatePostEffect_VideoDistortion();
	cPostEffect_ImageFadeFX@ cGraphics_CreatePostEffect_ImageFadeFX();
	void cGraphics_DestroyPostEffect(iPostEffect@ apPostEffect);
	iSoundEventProject@ cSound_GetEventProject(const tString&in asName);
	iSoundEventData@ cSound_GetEventData(const tString&in asInternalPath,  bool abLoadData, bool abNonBlockingLoad);
	iSoundEvent@ cSound_CreateEvent(iSoundEventData@ apData,  bool abNonBlockingLoad);
	void cSound_DestroyEvent(iSoundEvent@ apEvent);
	void cSound_PreloadProject(const tString&in asName,  bool abNonBlockingLoad);
	void cSound_PreloadGroup(const tString&in asInternalPath,  bool abNonBlockingLoad,  bool abSubGroups);
	void cSound_DestroyUnusedData(int alMaxAmount,  int alMaxAge,  bool abRemoveUnusedProjects,  bool abRemovePreloaded);
	uint cSound_GetEventSystemMemoryUsed();
	cSoundEntry@ cSound_Play(	const tString&in asName, bool abLoop, float afVolume, const cVector3f&in avPos,  float afMinDist, float afMaxDist,  eSoundEntryType aEntryType,  bool abRelative,  bool ab3D,  int alPriorityModifier,  bool abStream,  bool abNonBlockedLoad);
	cSoundEntry@ cSound_Play3D(const tString&in asName, bool abLoop, float afVolume, const cVector3f&in avPos,  float afMinDist, float afMaxDist,  eSoundEntryType aEntryType,  bool abRelative,  int alPriorityModifier,  bool abStream,  bool abNonBlockedLoad);
	cSoundEntry@ cSound_PlayGuiStream(	const tString&in asFileName, bool abLoop, float afVolume, const cVector3f&in avPos,  eSoundEntryType aEntryType);
	cSoundEntry@ cSound_PlayGui(const tString&in asName, bool abLoop, float afVolume, const cVector3f&in avPos,  eSoundEntryType aEntryType);
	cSoundEntry@ cSound_PlaySoundEntityGui(const tString&in asName, bool abLoop, float afVolume,  eSoundEntryType aEntryType,  const cVector3f&in avPos);
	cSoundEntry@ cSound_PlaySoundEvent(const tString&in asInternalPath, float afVolume, const cVector3f&in avPos, const cVector3f&in avOrientation,  bool abNonBlockLoad);
	cSoundEntry@ cSound_GetEntry(const tString&in asName);
	void cSound_SetSilent(bool abX);
	bool cSound_GetSilent();
	bool cSound_Stop(const tString&in asName,  bool abPlayEnd);
	void cSound_StopAll(uint mTypes,  bool abPlayEnd);
	void cSound_PauseAll(uint mTypes);
	void cSound_ResumeAll(uint mTypes);
	void cSound_FadeOutAll(uint mTypes, float afFadeSpeed,  bool abDisableStop);
	bool cSound_IsPlaying(const tString&in asName);
	bool cSound_IsValid(cSoundEntry @apEntry,  int alID);
	int cSound_SetGlobalVolume(float afVolume,  uint mAffectedTypes,  int alId);
	int cSound_SetGlobalSpeed(float afSpeed, uint mAffectedTypes,  int alId);
	int cSound_FadeGlobalVolume(float afDestVolume,  float afSpeed, uint mAffectedTypes,  int alId,  bool abDestroyIdAtDest);
	int cSound_FadeGlobalSpeed(float afDestSpeed,  float afSpeed, uint mAffectedTypes,  int alId,  bool abDestroyIdAtDest);
	void cSound_FadeLowPassFilter(float afDestCutOff,  float afDestResonance,  float afTime,  uint mAffectedTypes);
	void cSound_FadeHighPassFilter(float afDestCutOff,  float afDestResonance,  float afTime,  uint mAffectedTypes);
	float cSound_GetGlobalVolume(eSoundEntryType aType);
	float cSound_GetGlobalSpeed(eSoundEntryType aType);
	float cSound_GetGlobalVolumeFromId(int alId);
	float cSound_GetGlobalSpeedFromId(int alId);
	bool cSound_CheckSoundIsBlocked(const cVector3f&in avSoundPosition);
	void cSound_SetEventCategory_World(const tString&in asCat);
	void cSound_SetEventCategory_WorldClean(const tString&in asCat);
	void cSound_SetEventCategory_Gui(const tString&in asCat);
	const tString& cSound_GetEventCategory_World();
	const tString& cSound_GetEventCategory_WorldClean();
	const tString& cSound_GetEventCategory_Gui();
	bool cSound_PlayMusic(const tString&in asFileName, float afVolume,  float afVolumeFadeStepSize,  float afFreq,  float afFreqFadeStepSize,  bool abLoop,  bool abResume);
	void cSound_StopMusic(float afFadeStepSize);
	void cSound_PauseMusic();
	void cSound_ResumeMusic();
	void cSound_FadeMusicVolumeMul(float afDest,  float afSpeed);
	void cSound_SetMusicVolumeMul(float afMul);
	float cSound_GetMusicVolumeMul();
	cGuiSkin@ cGui_CreateSkin(const tString&in asFile);
	cGuiSet@ cGui_CreateSet(const tString&in asName,  cGuiSkin @apSkin);
	cGuiSet@ cGui_GetSetFromName(const tString&in asName);
	void cGui_SetFocus(cGuiSet@ apSet);
	void cGui_SetFocusByName(const tString&in asSetName);
	cGuiSet@ cGui_GetFocusedSet();
	void cGui_DestroySet(cGuiSet @apSet);
	cGuiGfxElement@ cGui_CreateGfxFilledRect(const cColor&in aColor,  eGuiMaterial aMaterial);
	cGuiGfxElement@ cGui_CreateGfxImage(const tString &in asFile, eGuiMaterial aMaterial);
	cGuiGfxElement@ cGui_CreateGfxImage(const tString &in asFile, eGuiMaterial aMaterial,  const cColor&in aColor);
	cGuiGfxElement@ cGui_CreateGfxTexture(const tString &in asFile, eGuiMaterial aMaterial,  eTextureType aTextureType);
	cGuiGfxElement@ cGui_CreateGfxTexture(const tString &in asFile, eGuiMaterial aMaterial,  eTextureType aTextureType,  const cColor&in aColor,  bool abMipMaps);
	cGuiGfxElement@ cGui_CreateGfxTexture(iTexture @apTexture,  bool abAutoDestroyTexture,  eGuiMaterial aMaterial);
	cGuiGfxElement@ cGui_CreateGfxTexture(iTexture @apTexture,  bool abAutoDestroyTexture,  eGuiMaterial aMaterial,  const cColor&in aColor,  const cVector2f&in avStartUV,  const cVector2f&in avEndUV);
	cGuiGfxElement@ cGui_CreateGfxImageBuffer(const tString &in asFile, eGuiMaterial aMaterial,  bool abCreateAnimation,  const cColor&in aColor);
	void cGui_DestroyGfx(cGuiGfxElement@ apGfx);
	cImGui@ cGui_CreateImGui(const tString&in asName,  cGuiSet @apSet);
	void cGui_DestroyImGui(cImGui@ apImGui);
	void cGui_GetImGuiStateVarString(eImGuiStateVar aVar);
	void cGui_GetImGuiIdFromName(const tString& in asName);
	cEventDatabase@ cAI_CreateEventDatabase(const tString&in asName);
	void cAI_DestroyEventDatabase(cEventDatabase @apDB);
	float cGenerate_FractalNoise1D(float afX,  const cFractalNoiseParams&in aParams);
	float cGenerate_FractalNoise2D(const cVector2f&in avPos,  const cFractalNoiseParams&in aParams);
	float cGenerate_FractalNoise3D(const cVector3f&in avPos,  const cFractalNoiseParams&in aParams);
	float cGenerate_GetNoiseCosine1D(float afX);
	float cGenerate_GetNoiseCosine2D(const cVector2f&in avPos);
	float cGenerate_GetNoiseCubic1D(float afX);
	float cGenerate_GetNoiseCubic2D(const cVector2f&in avPos);
	float cGenerate_GetNoisePerlin1D(float afX);
	float cGenerate_GetNoisePerlin2D(const cVector2f&in avPos);
	float cGenerate_GetNoisePerlin3D(const cVector3f&in avPos);
	void cScript_SetGlobalVarString(const tString &in asName,  const tString &in asVar);
	void cScript_SetGlobalVarBool(const tString &in asName,  bool abX);
	void cScript_SetGlobalVarInt(const tString &in asName,  int alX);
	void cScript_SetGlobalVarID(const tString &in asName,  tID alX);
	void cScript_SetGlobalVarFloat(const tString &in asName,  float afX);
	void cScript_SetGlobalVarVector2f(const tString &in asName,  const cVector2f&in avX);
	void cScript_SetGlobalVarVector3f(const tString &in asName,  const cVector3f&in avX);
	void cScript_SetGlobalVarVector4f(const tString &in asName,  const cVector4f&in avX);
	void cScript_SetGlobalVarMatrix(const tString &in asName,  const cMatrixf&in a_mtxX);
	void cScript_SetGlobalVarColor(const tString &in asName,  const cColor&in aX);
	tString cScript_GetGlobalVarString(const tString &in asName);
	bool cScript_GetGlobalVarBool(const tString &in asName);
	int cScript_GetGlobalVarInt(const tString &in asName);
	tID cScript_GetGlobalVarID(const tString &in asName);
	float cScript_GetGlobalVarFloat(const tString &in asName);
	cVector2f cScript_GetGlobalVarVector2f(const tString &in asName);
	cVector3f cScript_GetGlobalVarVector3f(const tString &in asName);
	cVector4f cScript_GetGlobalVarVector4f(const tString &in asName);
	cMatrixf cScript_GetGlobalVarMatrix(const tString &in asName);
	cColor cScript_GetGlobalVarColor(const tString &in asName);
	void cScript_SetGlobalArgString(int alIdx,  const tString &in asVar);
	void cScript_SetGlobalArgBool(int alIdx,  bool abX);
	void cScript_SetGlobalArgInt(int alIdx,  int alX);
	void cScript_SetGlobalArgID(int alIdx,  tID alX);
	void cScript_SetGlobalArgFloat(int alIdx,  float afX);
	void cScript_SetGlobalArgVector2f(int alIdx,  const cVector2f&in avX);
	void cScript_SetGlobalArgVector3f(int alIdx,  const cVector3f&in avX);
	void cScript_SetGlobalArgVector4f(int alIdx,  const cVector4f&in avX);
	void cScript_SetGlobalArgMatrix(int alIdx,  const cMatrixf&in a_mtxX);
	void cScript_SetGlobalArgColor(int alIdx,  const cColor&in aX);
	tString cScript_GetGlobalArgString(int alIdx);
	bool cScript_GetGlobalArgBool(int alIdx);
	int cScript_GetGlobalArgInt(int alIdx);
	tID cScript_GetGlobalArgID(int alIdx);
	float cScript_GetGlobalArgFloat(int alIdx);
	cVector2f cScript_GetGlobalArgVector2f(int alIdx);
	cVector3f cScript_GetGlobalArgVector3f(int alIdx);
	cVector4f cScript_GetGlobalArgVector4f(int alIdx);
	cMatrixf cScript_GetGlobalArgMatrix(int alIdx);
	cColor cScript_GetGlobalArgColor(int alIdx);
	void cScript_SetGlobalReturnString(const tString &in asVar);
	void cScript_SetGlobalReturnBool(bool abX);
	void cScript_SetGlobalReturnInt(int alX);
	void cScript_SetGlobalReturnID(tID alX);
	void cScript_SetGlobalReturnFloat(float afX);
	void cScript_SetGlobalReturnVector2f(const cVector2f&in avX);
	void cScript_SetGlobalReturnVector3f(const cVector3f&in avX);
	void cScript_SetGlobalReturnVector4f(const cVector4f&in avX);
	void cScript_SetGlobalReturnMatrix(const cMatrixf&in a_mtxX);
	void cScript_SetGlobalReturnColor(const cColor&in aX);
	const tString& cScript_GetGlobalReturnString();
	bool cScript_GetGlobalReturnBool();
	int cScript_GetGlobalReturnInt();
	tID cScript_GetGlobalReturnID();
	float cScript_GetGlobalReturnFloat();
	cVector2f cScript_GetGlobalReturnVector2f();
	cVector3f cScript_GetGlobalReturnVector3f();
	cVector4f cScript_GetGlobalReturnVector4f();
	cMatrixf cScript_GetGlobalReturnMatrix();
	cColor cScript_GetGlobalReturnColor();
	bool cScript_RunGlobalFunc(const tString&in asObjName,  const tString&in asClassName,  const tString&in asFuncName);
	cLuxPathfinder@ cLux_CreateEntityComponent_Pathfinder(iLuxEntity @apEntity);
	cLuxCharMover@ cLux_CreateEntityComponent_CharMover(iLuxEntity @apEntity,  iCharacterBody @apCharBody);
	cLuxStateMachine@ cLux_CreateEntityComponent_StateMachine(iLuxEntity @apEntity);
	cLuxSoundListener@ cLux_CreateEntityComponent_SoundListener(iLuxEntity @apEntity);
	cLuxHeadTracker@ cLux_CreateEntityComponent_HeadTracker(iLuxEntity @apEntity);
	cLuxForceEmitter@ cLux_CreateEntityComponent_ForceEmitter(iLuxEntity @apEntity);
	cLuxBarkMachine@ cLux_CreateEntityComponent_BarkMachine(iLuxEntity @apEntity);
	cLuxBackboneTail@ cLux_CreateEntityComponent_BackboneTail(iLuxEntity @apEntity);
	cLuxLightSensor@ cLux_CreateEntityComponent_LightSensor(iLuxEntity @apEntity);
	cLuxEdgeGlow@ cLux_CreateEntityComponent_EdgeGlow(iLuxEntity @apEntity);
	void cLux_AddDebugMessage(const tString&in asText,  bool abCheckForDuplicates);
	void cLux_AddDebugMessage(const tString&in asText);
	void cLux_AddTodoMessage(const tString&in asText,  bool abCheckForDuplicates);
	void cLux_AddTodoMessage(const tString&in asText);
	bool cLux_DebugModeOn();
	bool cLux_ScriptDebugOn();
	bool cLux_TestModeOn();
	float cLux_DrawDebugText(const tString&in asText,  float afY,  float afSize=14,  cColor aColor=cColor, 1, 1,  bool abAddNewLine=true);
	void cLux_SetDebugInfoWindowText(const tString&in asText);
	bool cLux_GetGodModeActivated();
	bool cLux_GetSaveConfigAtExit();
	iScrUserModule_Interface@ cLux_GetUserModuleFromID(int alID);
	iScrUserModule_Interface@ cLux_GetUserModuleFromName(const tString&in asName);
	cLuxPlayer@ cLux_GetPlayer();
	cLuxInputHandler@ cLux_GetInputHandler();
	cLuxEffectHandler@ cLux_GetEffectHandler();
	cLuxMusicHandler@ cLux_GetMusicHandler();
	cLuxVoiceHandler@ cLux_GetVoiceHandler();
	cLuxDialogHandler@ cLux_GetDialogHandler();
	cLuxEventDatabaseHandler@ cLux_GetEventDatabaseHandler();
	cLuxSoundscapeHandler@ cLux_GetSoundscapeHandler();
	cLuxSaveHandler@ cLux_GetSaveHandler();
	cLuxGuiHandler@ cLux_GetGuiHandler();
	iLuxAchievementHandler@ cLux_GetAchievementHandler();
	iLuxRichPresenceHandler@ cLux_GetRichPresenceHandler();
	iLuxUsersHandler@ cLux_GetUsersHandler();
	iLuxHeroStatsHandler@ cLux_GetHeroStatsHandler();
	const tString& cLux_GetMainMenuFile();
	const tString& cLux_GetCurrentLanguage();
	void cLux_AddModule(const tString&in asName,  const tString&in asScriptFile,  const tString&in asScriptClass,  int alId,  bool abIsGlobal,  const tString&in sContainer,  bool abUseInputCallbacks);
	void cLux_AddPropType(const tString&in asName,  const tString&in asScriptFile, const tString&in asScriptClass,  bool abForceFullGameSave);
	void cLux_AddCritterType(const tString&in asName,  const tString&in asScriptFile, const tString&in asScriptClass,  bool abForceFullGameSave);
	void cLux_AddAreaType(const tString&in asName,  const tString&in asScriptFile,  const tString&in asScriptClass,  bool abForceFullGameSave);
	void cLux_AddLiquidAreaType(const tString&in asName,  const tString&in asScriptFile,  const tString&in asScriptClass,  bool abForceFullGameSave);
	cGuiSet@ cLux_GetGameHudSet();
	const cVector2f& cLux_GetHudVirtualCenterSize();
	const cVector2f& cLux_GetHudVirtualSize();
	const cVector2f& cLux_GetHudVirtualOffset();
	const cVector3f& cLux_GetHudVirtualStartPos();
	const cVector2f& cLux_GetHudVirtualCenterScreenSize();
	const cVector3f& cLux_GetHudVirtualCenterScreenStartPos();
	iFontData@ cLux_GetDefaultFont();
	double cLux_GetGameTime();
	bool cLux_GetSupportExplorationMode();
	void cLux_SetExplorationModeActive(bool abX);
	bool cLux_GetExplorationModeActive();
	iEntity3D@ cLux_ID_Entity3D(tID aID);
	cMeshEntity@ cLux_ID_MeshEntity(tID aID);
	cSubMeshEntity@ cLux_ID_SubMeshEntity(tID aID);
	iLight@ cLux_ID_Light(tID aID);
	cLightMaskBox@ cLux_ID_LightMaskBox(tID aID);
	cBillboard@ cLux_ID_Billboard(tID aID);
	cBillboardGroup@ cLux_ID_BillboardGroup(tID aID);
	cLensFlare@ cLux_ID_LensFlare(tID aID);
	cBeam@ cLux_ID_Beam(tID aID);
	cParticleSystem@ cLux_ID_ParticleSystem(tID aID);
	cGuiSetEntity@ cLux_ID_GuiSetEntity(tID aID);
	iRopeEntity@ cLux_ID_RopeEntity(tID aID);
	cClothEntity@ cLux_ID_ClothEntity(tID aID);
	cFogArea@ cLux_ID_FogArea(tID aID);
	cExposureArea@ cLux_ID_ExposureArea(tID aID);
	cForceField@ cLux_ID_ForceField(tID aID);
	cSoundEntity@ cLux_ID_SoundEntity(tID aID);
	iPhysicsBody@ cLux_ID_Body(tID aID);
	iPhysicsJoint@ cLux_ID_Joint(tID aID);
	iCharacterBody@ cLux_ID_CharacterBody(tID aID);
	iLuxEntity@ cLux_ID_Entity(tID aID);
	cLuxProp@ cLux_ID_Prop(tID aID);
	cLuxArea@ cLux_ID_Area(tID aID);
	cLuxLiquidArea@ cLux_ID_LiquidArea(tID aID);
	cLuxSoundscapeArea@ cLux_ID_ReverbArea(tID aID);
	cLuxCritter@ cLux_ID_Critter(tID aID);
	cLuxAgent@ cLux_ID_Agent(tID aID);
	cImGui@ cLux_GetCurrentImGui();
	cImGui@ cLux_GetGameHudImGui();
	void cLux_SetImGuiInputFocus(cImGui@ apImGui,  bool abShowMouse);
	cImGui@ cLux_GetInputFocusImGui();
	cImGui@ cLux_GetPrevInputFocusImGui();
	void cLux_StartMap(const tString&in asMapName);
	void cLux_ChangeMap(const tString&in asMapName,  const tString&in asStartPos,  const tString&in asTransferArea,  const tString&in asStartSound,  const tString&in asEndSound);
	void cLux_StartNewGame();
	void cLux_Continue();
	bool cLux_CanContinue();
	void cLux_Exit();
	void cLux_SetGamePaused(bool abX);
	bool cLux_GetGamePaused();
	void cLux_PreloadMap(const tString&in asMapName,  eWorldStreamPriority aPrio = eWorldStreamPriority_Normal);
	void cLux_DeloadMap(const tString&in asTransferArea);
	cLuxMap@ cLux_GetCurrentMap();
	cLuxMap@ cLux_GetPreloadMap();
	bool cLux_MapIsLoaded();
	bool cLux_IsChangingMap();
	bool cLux_IsStreamingMap();
	bool cLux_IsReadyToChangeMap();
	bool cLux_MapChangeIsTransfer();
	void cLux_SetMapPreloadPriority(eWorldStreamPriority aPrio);
	bool cLux_IsPlayGoReady(int&out alETA);
	bool cLux_IsLoadingScreenVisible();
	void cLux_LoadScreenSetForceBackground(bool abX);
	void cLux_LoadScreenSetUseSmallIcon(bool abX);
	void cLux_LoadScreenShowLoadingIcon(float afTime);
	void cLux_LoadScreenSetBarPosAndSize(const cVector2f&in avPos,  const cVector2f&in avSize);
	void cLux_IncUnderwaterEffectUserCount();
	void cLux_DecUnderwaterEffectUserCount();
	bool cLux_HasUnderwaterEffectUsers();
	void cLux_SetUnderwaterEffectsActive(bool abX,  bool abUseStartAndEndEffects);
	bool cLux_GetUnderwaterEffectsActive();
	void cLux_SetupDefaultGlobalReverb(eSoundReverbPreset aType,  float afFadeTime);
	cViewport@ cLux_GetViewport();
	bool cLux_CheckLineOfSight(const cVector3f&in avStart,  const cVector3f&in avEnd,  bool abCheckOnlyShadowCasters,  bool abCheckOnlyStatic,  iLuxEntity@ apSkipEntity=null);
	bool cLux_GetClosestEntity(const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  int alIteractType,  bool abCheckLineOfSight,  cLuxClosestEntityData @apOutput);
	iPhysicsBody@ cLux_GetClosestBody(const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  float &out afDistance,  cVector3f &out avSurfaceNormal);
	bool cLux_GetClosestCharCollider(const cVector3f&in avStart, const cVector3f&in avDir,  float afRayLength,  bool abCheckDynamic,  cLuxClosestCharCollider @apOutput);
	float cLux_GetLightLevelAtPos(const cVector3f&in avPos,  iLight @apSkipLight,  float afRadiusAdd);
	void cLux_ShapeDamage(int aShape,  const cMatrixf&in a_mtxTransform,  const cVector3f&in avOrigin,  float afMinDamage,  float afMaxDamage,  float afForce,  float afMaxImpulse,  int alStrength,  float afHitSpeed,  int aDamageType,  bool abCheckEnemies,  bool abCheckPlayer,  bool abCheckProps,  bool abLethalForPlayer,  const tString&in asSource);
	void cLux_ShapeDamage(iCollideShape@ aShape,  const cMatrixf&in a_mtxTransform,  const cVector3f&in avOrigin,  float afMinDamage,  float afMaxDamage,  float afForce,  float afMaxImpulse,  int alStrength,  float afHitSpeed,  int aDamageType,  bool abCheckEnemies,  bool abCheckPlayer,  bool abCheckProps,  bool abLethalForPlayer,  const tString&in asSource);
	bool cLux_GetInteractionWhiteListActive();
	void cLux_SetInteractionWhiteListActive(bool abX,  bool abClearList);
	void cLux_AddEntityToInteractionWhiteList(iLuxEntity@ apEntity);
	void cLux_SendInputToGui(bool abX);
	iLuxEntity@ cLux_GetBodyEntity(iPhysicsBody @apBody);
	cLuxArea@ cLux_ToArea(iLuxEntity @apEntity);
	cLuxProp@ cLux_ToProp(iLuxEntity @apEntity);
	cLuxLiquidArea@ cLux_ToLiquidArea(iLuxEntity @apEntity);
	cLuxAgent@ cLux_ToAgent(iLuxEntity @apEntity);
	cLuxCritter@ cLux_ToCritter(iLuxEntity @apEntity);
	const tWString& cLux_Translate(const tString &in asCat,  const tString &in asEntry);
	bool cLux_HasTranslation(const tString &in asCat,  const tString &in asEntry);
	bool cLux_PlayGuiSoundData(	const tString&in asName,  eSoundEntryType aDestType,  float afVolMul,  bool abSkipPreviousRandom);
	bool cLux_PlayGuiSoundDataEx(const tString&in asName,  eSoundEntryType aDestType,  float afVolMul,  bool abSkipPreviousRandom,  cLuxSoundExtraData @apExtraData);
	void cLux_DrawSetToScreen(bool abClearScreen,  const cColor&in aCol,  cGuiSet@ apSet);
	void cLux_CleanupData();
	void cLux_GetTextCatAndEntryFromString(const tString&in asData,  tString &out asOutCat,  tString &out asOutEntry);
	float cLux_GetStringDuration(const tWString&in asStr);
	tWString cLux_ParseString(const tWString&in asInput);
	void cLux_ParseStringIntoScreenText(const tWString &in asInput,  cImGui @apImGui,  const cLuxScreenTextFormatParameters &aFormatParams,  												array<tWString> &out aOutLines,  array<cLuxScreenTextIcon@> &out aIconArray,  array<array<int>> &out aOutIconsPerLine,  float &out afMaxLineHeight,  float &out afDisplayTime,  bool abTriggeredByGamepad);
	void cLux_DrawScreenText(cImGui @apImGui,  float afTimeStep,  const cImGuiLabelData &in aLabel,  const cVector3f &in avPosition,  float afLineWidth,  float afLineSpacing,  const array<tWString> &in avTextLines,  const array<cLuxScreenTextIcon@> &in avIcons,  const array<array<int>> &in avIconsPerLine);
	void cLux_DrawHint(cImGui @apImGui,  float afTimeStep,  const cImGuiLabelData &in aLabel,  const cVector3f &in avPosition,  float afLineWidth,  float afLineSpacing,  const array<tWString> &in avTextLines,  const array<cLuxScreenTextIcon@> &in avIcons,  const array<array<int>> &in avIconsPerLine);
	void cLux_RenderBackgroundScreen(bool abDrawFullHUD);
	void cLux_PreloadSound(const tString &in asFile);
	void cLux_PreloadParticleSystem(const tString &in asFile);
	void cLux_PreloadEntity(const tString &in asFile);
	void cLux_PreloadMaterial(const tString &in asFile);
	void cLux_PreloadGuiGfx(const tString &in asFile,  eImGuiGfx aType);
	cGuiSet@ cLux_GetHelpGuiSet();
	cConfigFile@ cLux_GetUserConfig();
	bool cLux_ApplyUserConfig();
	bool cLux_HasConfigLoadError(tString&out asError);
	cConfigFile@ cLux_GetKeyConfig();
	cConfigFile@ cLux_GetGameConfig();
	tString cLux_GetDefaultGameLanguage();
	tString cLux_GetGameLanguageFolder();
	tWString cLux_GetCurrentUserProfilePath();
	tWString cLux_GetStringWFromDate(const cDate &in aDate);
	void cLux_OutputTextToFile(const tWString &in asPath,  const tString &in asText);
	void cLux_TruncateTextFile(const tWString &in asPath,  const tString &in asPattern,  int alTimes);
	void cLux_SaveScreenshotToFile(const tWString &in asPath,  const cVector2l &in avSize=cVector2l_MinusOne,  bool abKeepAspect=true,  float afBrightness=1.0f);
	tString cLux_CreateHTMLParagraph(const tString &in asContent);
	tString cLux_CreateHTMLImage(const tString &in asSrc,  const tString &in asTitle="",  const cVector2l &in avSize=cVector2l_MinusOne);
	tString cLux_CreateHTMLTag(const tString &in asTag,  const tString &in asContent="",  const tString &in asParams="");
	void cLux_RegisterEventListenerUserModule_AgentSetActive(const tString &in asModuleName);
	cLuxScriptImGui@ cLux_CreateScriptImGui(const tString &in asName,  bool abRegisterForDrawing,  bool abSkipResetOnRegistration=true);
	void cLux_RegisterCollisionRadius(int alX);
	void cLux_PreloadWebpage(const tString &in asX);
	void cLux_ResetShudderEffects(int alX);
	void cLux_DropPageFocus(const tString&in asX);
	void cLux_SetAreaOffline(int alX);
	/**
	 * Check if an entity exists in the level.
	 * 
	 * @param asName the name of the entity to search for.
	 * @return if entity exists.	
	**/
	bool Entity_Exists(const tString &in asName);
	/**
	 * Check if an entity exists in the level.
	 * 
	 * @param aID the id of the entity to search for.
	 * @return if entity exists.	
	**/
	bool Entity_Exists(tID aID);
	/**
	 * Set if entity is active (visible and functioning) or not.
	 * 
	 * @param asName Name of the entity, Wildcard(s) * are supported	 * @param abActive true = entity becomes active - false = entity becomes inactive	
	**/
	void Entity_SetActive(const tString &in asName,  bool abActive);
	/**
	 * Get if an entity is active (visible and functioning) or not.
	 * 
	 * @param asName Name of the entity.
	 * @return if active or not.	
	**/
	bool Entity_IsActive(const tString &in asName);
	/**
	 * Sets if the player can interact with an entity or not.
	 * 
	 * @param asEntityName name of the entity, Wildcard(s) * are supported
	 * @param abX true = interaction disabled - false = interaction enabled.	
	**/
	void Entity_SetInteractionDisabled(const tString &in asEntityName,  bool abX);
	/**
	 * Change the max interaction distance of an entity from the default/entity configured distance.
	 * 
	 * @param asEntityName name of the entity, Wildcard(s) * are supported
	 * @param afDistance distance in meters that the entity can be interacted from.	
	**/
	void Entity_SetMaxInteractionDistance(const tString &in asEntityName,  float afDistance);
	/**
	 * Forces the entity to sleep (disabling Update/PostUpdate). Has no effect if it is already sleeping
	 * 
	 * @param asName Name of the entity, Wildcard(s) * are supported	
	**/
	void Entity_Sleep(const tString &in asName);
	/**
	 * Forces the entity to wake up (enabling Update/PostUpdate). Has no effect if it is already awake
	 * 
	 * @param asName Name of the entity, Wildcard(s) * are supported	
	**/
	void Entity_WakeUp(const tString &in asName);
	/**
	 * Check if an entity is asleep
	 * 
	 * @param asName Name of the entity.
	 * @return if sleeping or not.	
	**/
	bool Entity_IsSleeping(const tString &in asName);
	/**
	 * Sets if the entity should sleep automatically when it need no updating
	 * 
	 * @param asName Name of the entity, Wildcard(s) * are supported	 * @param abX true = Entity will sleep automatically - false = entity will not sleep automatically	
	**/
	void Entity_SetAutoSleep(const tString &in asName,  bool abX);
	/**
	 * Get if an entity automatically falls asleep when it isnt active
	 * 
	 * @param asName Name of the entity.
	 * @return if sleeping or not.	
	**/
	bool Entity_GetAutoSleep(const tString &in asName);
	/**
	 * Set if entity is an occluder
	 * 
	 * @param asName Name of the entity, Wildcard(s) * are supported	 * @param abOccluder true = object is occluder	
	**/
	void Entity_SetIsOccluder(const tString &in asName,  bool abOccluder);
	/**
	 * Get if an entity is an occluder
	 * 
	 * @param asName Name of the entity.
	 * @return if entity is an occluder	
	**/
	bool Entity_IsOccluder(const tString &in asName);
	/**
	 * Checks if the entity is being interacted with.
	 * 
	 * @param asName name of the entity.
	 * @return if the entity is being interacted with	
	**/
	bool Entity_IsInteractedWith(const tString &in asName);
	/**
	* Sets the value of an entity string variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the string variable.
	* @param asX new value for the variable.
	
	**/
	void Entity_SetVarString(const tString&in asEntityName,  const tString&in asVarName,  const tString&in asX);
	/**
	* Sets the value of an entity boolean variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the boolean variable.
	* @param abX new value for the variable.
	
	**/
	void Entity_SetVarBool(const tString&in asEntityName,  const tString&in asVarName,  bool abX);
	/**
	* Sets the value of an entity integer variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the integer variable.
	* @param alX new value for the variable.
	
	**/
	void Entity_SetVarInt(const tString&in asEntityName,  const tString&in asVarName,  int alX);
	/**
	* Sets the value of an entity variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the string variable.
	* @param afX new value for the variable.
	
	**/
	void Entity_SetVarFloat(const tString&in asEntityName,  const tString&in asVarName,  float afX);
	/**
	* Sets the value of an entity vector2f variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the vector2f variable.
	* @param avX new value for the variable.
	
	**/
	void Entity_SetVarVector2f(const tString&in asEntityName,  const tString&in asVarName,  const cVector2f&in avX);
	/**
	* Sets the value of an entity vector3f variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the vector3f variable.
	* @param avX new value for the variable.
	
	**/
	void Entity_SetVarVector3f(const tString&in asEntityName,  const tString&in asVarName,  const cVector3f&in avX);
	/**
	* Sets the value of an entity color variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the color variable.
	* @param aX new value for the variable.
	
	**/
	void Entity_SetVarColor(const tString&in asEntityName,  const tString&in asVarName,  const cColor&in aX);
	/**
	* Add a value to the current value of an entity integer variable. Wildcard(s) * are supported for EntityName.	* 
	* @param asEntityName name of the entity.
	* @param asVarName name of the integer variable.
	* @param alX value to be added to variable.
	
	**/
	void Entity_IncVarInt(const tString&in asEntityName,  const tString&in asVarName,  int alX);
	/**
	* Add a value to the current value of an entity float variable. Wildcard(s) * are supported for EntityName.	* @param asEntityName name of the entity.
	* @param asVarName name of the float variable.
	* @param afX value to be added to variable.
	
	**/
	void Entity_IncVarFloat(const tString&in asEntityName,  const tString&in asVarName,  float afX);
	/**
	* Add a value to the current value of an entity vector2f variable. Wildcard(s) * are supported for EntityName.	* @param asEntityName name of the entity.
	* @param asVarName name of the vector2f variable.
	* @param avX value to be added to variable.
	
	**/
	void Entity_IncVarVector2f(const tString&in asEntityName,  const tString&in asVarName,  const cVector2f&in avX);
	/**
	* Add a value to the current value of an entity vector3f variable. Wildcard(s) * are supported for EntityName.	* @param asEntityName name of the entity.
	* @param asVarName name of the vector3f variable.
	* @param avX value to be added to variable.
	
	**/
	void Entity_IncVarVector3f(const tString&in asEntityName,  const tString&in asVarName,  const cVector3f&in avX);
	/**
	* Get value of an entity string variable.	* @param asEntityName name of the entity.
	* @param asVarName name of the string variable.
	
	**/
	tString Entity_GetVarString(const tString&in asEntityName,  const tString&in asVarName);
	/**
	* Get value of an entity boolean variable.	* @param asEntityName name of the entity.
	* @param asVarName name of the boolean variable.
	
	**/
	bool Entity_GetVarBool(const tString&in asEntityName,  const tString&in asVarName);
	/**
	* Get value of an entity integer variable.	* @param asEntityName name of the entity.
	* @param asVarName name of the vector3f variable.
	
	**/
	int Entity_GetVarInt(const tString&in asEntityName,  const tString&in asVarName);
	/**
	* Get value of an entity float variable.	* @param asEntityName name of the entity.
	* @param asVarName name of the float variable.
	
	**/
	float Entity_GetVarFloat(const tString&in asEntityName,  const tString&in asVarName);
	/**
	* Get value of an entity vector2f variable.	* @param asEntityName name of the entity.
	* @param asVarName name of the vector2f variable.
	
	**/
	cVector2f Entity_GetVarVector2f(const tString&in asEntityName,  const tString&in asVarName);
	/**
	* Get value of an entity vector3f variable.	* @param asEntityName name of the entity.
	* @param asVarName name of the vector3f variable.
	
	**/
	cVector3f Entity_GetVarVector3f(const tString&in asEntityName,  const tString&in asVarName);
	/**
	* Get value of an entity color variable.	* @param asEntityName name of the entity.
	* @param asVarName name of the color variable.
	
	**/
	cColor Entity_GetVarColor(const tString&in asEntityName,  const tString&in asVarName);
	/**
	* Add a callback for when entities (objects, areas etc) collide and/or collides with the player.
	* 
	* Collision include "uncolliding" (objects just stopped colliding) as well.
	* Wildcard(s) * can be used in names to check for collisions.
	* 
	* @param asParentName always "player" for player collisions, else first entity name.
	* @param asChildName name of the entity or second entity to check for collision.
	* @param asFunction name of the callback function when something collides/uncollides.
	* @return .
	* 
	* Syntax for callback function: bool FunctionName(const tString &in asParent, const tString &in asChild, int alState).
	*   - asParent Name of the parent entity in the collision.
	*   - asChild Name of the child entity in the collision.
	*	- alState 1 = colliding, -1 = was colliding in previous frame, not anymore.
	*   Return false = callback is removed, true = callback can trigger again.
	
	**/
	bool Entity_AddCollideCallback(const tString &in asParentName,  const tString &in asChildName,  const tString &in asFunction);
	/**
	* Remove a callback for when entities (objects, areas etc) collide and/or collide with the player.
	* 
	* Wildcard(s) * can be used in names.
	* 
	* @param asParentName always "player" for player callbacks, else first entity name.
	* @param asChildName name of the entity or second entity.	* @return .
	
	**/
	bool Entity_RemoveCollideCallback(const tString &in asParentName,  const tString &in asChildName);
	/**
	* Checks for collision between two specific entities. Wildcard(s) * are NOT supported!
	* 
	* @param asEntityA first entity.
	* @param asEntityB second entity.	
	**/
	bool Entity_GetCollide(const tString &in asEntityA,  const tString &in asEntityB);
	/**
	* Turn off or on character collision for all the bodies in the given entity.
	* 
	* @param asEntityName name of the entity. Wildcard(s) * are supported.
	* @param abActive true = collision on, false = collision off.	
	**/
	void Entity_SetCollideCharacter(const tString &in asEntityName,  bool abActive);
	/**
	* Turn off or on collision for all the bodies in the given entity.
	* 
	* @param asEntityName name of the entity. Wildcard(s) * are supported.
	* @param abActive true = collision on, false = collision off.	
	**/
	void Entity_SetCollide(const tString &in asEntityName,  bool abActive);
	/**
	* Activates or deactivates the effects on a entity.
	* 
	* @param asEntityName name of the entity. Wildcard(s) * are supported.
	* @param abActive true = activates effects - false = deactivates effects.
	* @param abFadeAndPlaySounds if effects should fade in/out and sounds play.	
	**/
	void Entity_SetEffectsActive(const tString &in asEntityName,  bool abActive,  bool abFadeAndPlaySounds);
	/**
	* Sets whether the entity is drawn in reflections or not, and the real world or not.
	* 
	* @param asEntityName name of the prop. Wildcard(s) * are supported.
	* @param abVisibleInReflection whether the entity is drawn in reflections
	* @param abVisibleInWorld whether the entity is drawn in the real world	
	**/
	void Entity_SetReflectionVisibility(const tString &in asEntityName,  bool abVisibleInReflection,  bool abVisibleInWorld);
	/**
	* Sets the base color of the effects
	* 
	* @param asEntityName name of the prop. Wildcard(s) * are supported.
	* @param aColor the color all effects will be multiplied with	
	**/
	void Entity_SetEffectBaseColor(const tString &in asEntityName, const cColor&in aColor);
	/**
	* Fades the base color of the effects
	* 
	* @param asEntityName name of the prop. Wildcard(s) * are supported.
	* @param aColor the color all effects will be faded to
	* @param afTime time the fade takes.	
	**/
	void Entity_FadeEffectBaseColor(const tString &in asEntityName, const cColor&in aColor,  float afTime);
	/**
	* Set the color mul of the entity
	* 
	* @param asEntityName name of the entity. Wildcard(s) * are supported.
	* @param aColor color to set color mul to	
	**/
	void Entity_SetColorMul(const tString &in asEntityName,  const cColor&in aColor);
	/**
	* Adds force to the entity.
	* 
	* @param asEntityName name of the entity. Wildcard(s) * are supported.
	* @param avForce force to add.
	* @param abLocalSpace true = force is added relative to the rotation of the entity - false = force is added in world space
	* @param abOnlyMainBody true = force is added only to the main body of the entity - false = force is added to all bodies in the entity	
	**/
	void Entity_AddForce(const tString &in asEntityName,  const cVector3f &in avForce,  bool abLocalSpace,  bool abOnlyMainBody);
	/**
	* Adds force to the entity away from another entity.
	* 
	* @param asEntityName name of the entity to add force to. Wildcard(s) * are supported.
	* @param asForceEntityName name of the entity to push away from.
	* @param afForce force magnitude, negative attracts the entity to the force entity.
	* @param abOnlyMainBody true = force is added only to the main body of the entity - false = force is added to all bodies in the entity	
	**/
	void Entity_AddForceFromEntity(const tString &in asEntityName,  const tString &in asForceEntityName,  float afForce,  bool abOnlyMainBody);
	/**
	* Adds an impulse to the entity.
	* 
	* @param asEntityName name of the entity. Wildcard(s) * are supported.
	* @param avImpulse impulse to add.
	* @param abLocalSpace true = impulse is added relative to the rotation of the entity - false = impulse is added in world space
	* @param abOnlyMainBody true = impulse is added only to the main body of the entity - false = impulse is added to all bodies in the entity	
	**/
	void Entity_AddImpulse(const tString &in asEntityName,  const cVector3f &in avImpulse,  bool abLocalSpace,  bool abOnlyMainBody);
	/**
	* Adds an impulse to the entity away from another entity.
	* 
	* @param asEntityName name of the entity to add impulse to. Wildcard(s) * are supported.
	* @param asImpulseEntityName name of the entity to push away from.
	* @param afImpulse impulse magnitude, negative attracts the entity to the impulse entity.
	* @param abOnlyMainBody true = impulse is added only to the main body of the entity - false = impulse is added to all bodies in the entity	
	**/
	void Entity_AddImpulseFromEntity(const tString &in asEntityName,  const tString &in asImpulseEntityName,  float afImpulse,  bool abOnlyMainBody);
	/**
	* Adds torque to an entity to provide some angular velocity
	* 
	* @param asEntityName name of the entity to add impulse to. Wildcard(s) * are supported.
	* @param avTorque provide a vector3 for the desired direction
	* @param abLocalSpace use local space for the entity
	* @param abOnlyMainBody true = impulse is added only to the main body of the entity - false = impulse is added to all bodies in the entity	
	**/
	void Entity_AddTorque(const tString &in asEntityName,  const cVector3f &in avTorque,  bool abLocalSpace,  bool abOnlyMainBody);
	/**
	 * Attaches the entity to another entity. If already attached, it will be removed before attaching to new
	 * 
	 * @param asName the name of the entity to be attached to another, Wildcard(s) * are supported
	 * @param asParentName The entity to attach to.
	 * @param asParentBodyName the local (as it is in ent file) of the body. Use  for just using the main body.
	 * @param abUseRotation if the attached entity should be rotated along witht the parent.
	 * @param abSnapToParent if the attached entity should snap to the center of the body, or if it should use its relative world position as offset
	 * @param abLocked if the attached object should be locked to the parent - fixes precision issues	
	**/
	bool Entity_AttachToEntity(const tString &in asName,  const tString &in asParentName,  const tString &in asParentBodyName,  bool abUseRotation,  bool abSnapToParent=false,  bool abLocked=false);
	/**
	 * Attaches the entity to another entity. If already attached, it will be removed before attaching to new
	 * 
	 * @param asName the name of the entity to be attached to another, Wildcard(s) * are supported
	 * @param asParentName The entity to attach to.
	 * @param asParentSocketName the socket setup in the mesh or model editor. this is attached to a bone in the skeleton
	 * @param abUseRotation if the attached entity should be rotated along witht the parent.
	 * @param abSnapToParent if the attached entity should snap to the center of the socket, or if it should use its relative world position as offset	
	**/
	bool Entity_AttachToSocket(const tString &in asName,  const tString &in asParentName,  const tString &in asParentSocketName,  bool abUseRotation,  bool abSnapToParent=true);
	/**
	 * Removes an attachment to another entity if the entity(ies) has one.
	 * 
	 * @param asName the name of the entity to be no longer attached to another, Wildcard(s) * are supported	
	**/
	bool Entity_RemoveEntityAttachment(const tString &in asName);
	/**
	 * Creates an entity at another entity.
	 * 
	 * @param asNewEntityName the name of the entity to be created.
	 * @param asEntityFile the .ent file of the entity to be created.
	 * @param asTargetEntityName the target entity.
	 * @param abFullGameSave if ALL properties should be saved for the created entity.	
	**/
	iLuxEntity@ Entity_CreateAtEntity(const tString &in asNewEntityName,  const tString &in asEntityFile,  const tString &in asTargetEntityName,  bool abFullGameSave);
	/**
	 * Creates an entity at another entity with extra options.
	 * 
	 * @param asNewEntityName the name of the entity to be created.
	 * @param asEntityFile the .ent file of the entity to be created.
	 * @param asTargetEntityName the target entity.
	 * @param abFullGameSave if ALL properties should be saved for the created entity.
	 * @param avScale the scale of the created entity, where cVector3f(1, 1, 1) is the default size.
	 * @param avOffsetPosition an offset from the target object's position.
	 * @param avOffsetRotation an offset from the target object's rotation.
	 * @param abLocalOffset true = offset position and rotation are relative to the target object's rotation, false = offset position and rotation are relative to the world.
	 * @return new iLuxEntity object.
	
	**/
	iLuxEntity@ Entity_CreateAtEntityExt(const tString &in asNewEntityName,  const tString &in asEntityFile,  const tString &in asTargetEntityName,  bool abFullGameSave, 								  const cVector3f &in avScale,  const cVector3f &in avOffsetPosition,  const cVector3f &in avOffsetRotation,  bool abLocalOffset);
	/**
	 * Destroys an entity of a given name. 
	 * 
	 * @param asName the name of the entity to be destroyed, can contain wildcards to destroy multiple entities.	
	**/
	void Entity_Destroy(const tString &in asName);
	/**
	 * Plays an animation on the entity
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimation name of the animation to play.
	 * @param afFadeTime time to fade in animation.
	 * @param abLoop if the animation should loop.
	 * @param abPlayTransition If a transition animation (given such exist) should be be played before.
	 * @param asCallback (optional) name of callback function.
	 * 
	 * Syntax for callback function: void Func(const tString &in asEntityName, const tString &in asAnimName)	
	**/
	void Entity_PlayAnimation(const tString &in asEntityName,  const tString &in asAnimation,  float afFadeTime=0.1f,  bool abLoop=false,  bool abPlayTransition=true,  const tString &in asCallback = "");
	/**
	 * Stops any currently playing animation on the specified entity.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.	
	**/
	void Entity_StopAnimation(const tString &in asEntityName);
	/**
	 * Pause or unpause an animation on the specified entity.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimationName name of the animation.
	 * @param abPaused true to pause, false to resume	
	**/
	void Entity_SetAnimationPaused(const tString &in asEntityName,  const tString &in asAnimationName,  bool abPaused = true);
	/**
	 * Sets the relative time position of a specific animation.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimationName name of the animation.
	 * @param afTimePos a value between 0 and 1, where 0 is the start of the animation and 1 is the end.	
	**/
	void Entity_SetAnimationRelativeTimePosition(const tString &in asEntityName,  const tString &in asAnimationName,  float afTimePos);
	/**
	 * Sets a callback for the message events in the currently playing animation.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asCallbackFunc the callback function. Syntx void Func(const tString &in asEntityName, const tString &in asAnimName, int alMessageEventID) (last arg is for future usage)
	 * @param abAutoRemove If the callback is removed once triggered.	 
	**/
	void Entity_SetAnimationMessageEventCallback(const tString &in asEntityName,  const tString &in asCallbackFunc,  bool abAutoRemove);
	/**
	 * Plays a procedural animation on the entity
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimation name of the animation to play.
	 * @param afLength time it takes to play the animation (can be negative to play it in reverse!)
	 * @param abLoop if the animation should loop.
	 * @param afAmountFadeTime time to fade in animation.
	 * @param afSpeedFadeTime time to fade in the speed of the animation (use this for looping animations to avoid skipping).	 
	**/
	void Entity_PlayProcAnimation(const tString &in asEntityName,  const tString &in asAnimation,  float afLength,  							  bool abLoop=false,  float afAmountFadeTime=0.1,  float afSpeedFadeTime = -1.0f);
	/**
	 * Stops a procedural animation on the specified entity.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimation name of the entity. Wildcard(s) * are supported.
	 * @param afFadeTime the time it takes to fade out.	 
	**/
	void Entity_StopProcAnimation(const tString &in asEntityName,  const tString &in asAnimation,  float afFadeTime=0.1f);
	/**
	 * Pause or unpause a procedural animation on the specified entity.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimationName name of the animation.
	 * @param abPaused true to pause, false to resume	 
	**/
	void Entity_SetProcAnimationPaused(const tString &in asEntityName,  const tString &in asAnimationName,  bool abPaused = true);
	/**
	 * Sets the speed of a proc animation.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimationName name of the animation.
	 * @param afSpeed speed to set.	 
	**/
	void Entity_SetProcAnimationSpeed(const tString &in asEntityName,  const tString &in asAnimationName,  float afSpeed);
	/**
	 * Fade the speed of a proc animation.
	 * 
	 * @param asEntityName name of the entity. Wildcard(s) * are supported.
	 * @param asAnimationName name of the animation.
	 * @param afSpeed target speed (measured in full loops per second).
	 * @param afTime time to fade over.	 
	**/
	void Entity_FadeProcAnimationSpeed(const tString &in asEntityName,  const tString &in asAnimationName,  float afSpeed,  float afTime);
	/**
	 * Sets the callback for when the player looks at or turns away from a specific entity.
	 * 
	 * @param asEntityName the name of the entity to get the callback. Wildcard(s) * are supported.
	 * @param asCallback the name of the callback function. If set to  will remove a previously set callback
	 * @param abRemoveWhenLookedAt if the callback should be removed after it has been called.
	 * @param abCheckCenterOfScreen if the entity counts as looked at only when at the center of the screen.
	 * @param abCheckRayIntersection if the entity counts as looked at only if there is a clear line of sight to it. Note that this can return false negatives, especially when not checking center of screen.
	 * @param afMaxDistance max distance at which the entity must be for the callback to be triggered.
	 * @param afCallbackDelay time the player needs to look at the entity for the entity to trigger (in seconds).
	 * 
	 * Syntax for callback function: void FunctionName(const tString &in asEntityName, int alState). alState is 1 if the player looks at the entity and -1 if the player stops looking.	 
	**/
	void Entity_SetPlayerLookAtCallback(const tString &in asEntityName,  const tString &in asCallback,  bool abRemoveWhenLookedAt = true,  									bool abCheckCenterOfScreen = true,  bool abCheckRayIntersection = true,  float afMaxDistance = -1,  float afCallbackDelay = 0);
	/**
	 * Sets the callback for when the player interacts with a specific entity.
	 * 
	 * @param asEntityName the name of the entity to get the callback. Wildcard(s) * are supported.
	 * @param asCallback the name of the callback function.
	 * @param abRemoveWhenInteracted if the callback should be removed after it has been called.
	 * 
	 * Syntax for callback function: void FunctionName(string &in asEntityName).	 
	**/
	void Entity_SetPlayerInteractCallback(const tString &in asEntityName,  const tString &in asCallback,  bool abRemoveWhenInteracted);
	/**
	 * Sets the callback for when the connection state changes on an entity
	 * 
	 * @param asEntityName the name of the entity to get the callback. Wildcard(s) * are supported.
	 * @param asCallback the name of the callback function.
	 * 
	 * Syntax for callback function: void FunctionName(string &in asEntityName, int alState).	 
	**/
	void Entity_SetConnectionStateChangeCallback(const tString &in asEntityName,  const tString &in asCallback);
	/**
	 * Creates a connection between two entities.
	 * 
	 * @param asName name of the connection.
	 * @param asMainEntity the entity to add the connection to. Wildcard(s) * are supported.
	 * @param asConnectEntity the entity to connect to the main entity.
	 * @param abInvertStateSent if the state changes should be sent inverted.
	 * @param alStatesUsed states sent by main entity, 0 = all states, 1 = only max, -1 = only min.	 
	**/
	void Entity_Connect(const tString &in asName,  const tString &in asMainEntity,  const tString &in asConnectEntity,  				    bool abInvertStateSent,  int alStatesUsed);
	/**
	 * Removes a specific connection on an entity.
	 * 
	 * @param asName name of the connection to remove.
	 * @param asMainEntity the entity to remove the connection from. Wildcard(s) * are supported.	 
	**/
	void Entity_RemoveConnection(const tString &in asName,  const tString &in asMainEntity);
	/**
	 * Removes all connections on an entity.
	 * 
	 * @param asMainEntity the entity to remove all connections on. Wildcard(s) * are supported.	 
	**/
	void Entity_RemoveAllConnections(const tString &in asMainEntity);
	/**
	 * Places the specified entity at another entity. Optionally aligning its rotation with the target entity.
	 * 
	 * @param asEntityName name of the entity.
	 * @param asTargetEntity entity to place at.
	 * @param avOffset world offset from the target entity to place at.
	 * @param abAlignRotation if true the entity will be given the same rotation as the target entity.
	 * @param abUseEntFileCenter if true the entity's center specified in the ent file will be used for placement (only works for props).	 
	**/
	void Entity_PlaceAtEntity(const tString &in asEntityName,  const tString &in asTargetEntity,  					      const cVector3f &in avOffset = cVector3f_Zero,  bool abAlignRotation = false, 						  bool abUseEntFileCenter=false);
	/**
	 * Returns the offset from centre specified in the .ent file. Only works for props.
	 *  @param asEntityName name of the entity.
	 * @return the offset	 
	**/
	cVector3f Entity_GetBodyOffset(const tString &in asEntityName);
	/**
	 * Returns true if the object is within the player's field of view. This does not take into account line of sight.
	 * 
	 * @param asEntity name of the entity to check.
	 * 
	 * @return true if the entity is in the player's field of view.	 
	**/
	bool Entity_IsInPlayerFOV(const tString &in asEntity);
	/**
	 * Returns true if the specified entity is in front of the other entity.
	 * The function assumes the entity's z-axis points forward. Anything less than 90 
	 * degrees offset from the forward vector counts as "in front".
	 * 
	 * @param asTargetEntity name of the entity to check if in front of the other.
	 * @param asForwardEntity name of entity which forward vector and position will be checked against.
	 * 
	 * @return bool true if the target entity is in front.	 
	**/
	bool Entity_EntityIsInFront(const tString &in asTargetEntity,  const tString &in asForwardEntity);
	/**
	 * Returns true if the player is in front of the specified entity.
	 * The function assumes the entity's z-axis points forward. Anything less than 90 
	 * degrees offset from the forward vector counts as "in front".
	 * 
	 * @param asName name of the entity to check if in front of the other.
	 * 
	 * @return true if the target entity is in front.	 
	**/
	bool Entity_PlayerIsInFront(const tString &in asName);
	/**
	 * Calls OnInteract on the specified entity. 
	 * 
	 * @param asName name of the entity.
	 * @param asBodyName name of the body to interact with if "" then it's the main body.
	 * @param avFocusBodyOffset focus point on the body.
	 * @param asData optional data needed for interaction.
	 * 
	 * @return true if the position is in front of the entity.	 
	**/
	void Entity_CallEntityInteract(const tString &in asName,  const tString &in asBodyName = "",  const cVector3f &in avFocusBodyOffset = cVector3f_Zero,  const tString &in asData = "");
	/**
	 * Gets the direction and distance between two entities
	 * 
	 * @param asEntityA entity to calculate delta from
	 * @param asEntityB entity to caluclate delta to
	 * 
	 * @return delta between the entities, delta = direction * distance = entity_b_pos - entity_a_pos	 
	**/
	cVector3f Entity_GetDeltaToEntity(const tString &in asEntityA,  const tString &in asEntityB);
	/**
	 * Preloads an entity
	 * 
	 * @param asEntityFile name of the entity file to preload	 
	**/
	void Entity_Preload(const tString &in asEntityFile);
	/**
	 * Preloads a material
	 * 
	 * @param asFile material file to preload	 
	**/
	void Material_Preload(const tString &in asFile);
	/**
	 * Sets the health of a prop
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * supported.
	 * @param afHealth health to set.	 
	**/
	void Prop_SetHealth(const tString &in asPropName,  float afHealth);
	/**
	 * Adds health to a prop.
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * supported.
	 * @param afHealth health to add, can be negative to reduce health.	 
	**/
	void Prop_AddHealth(const tString &in asPropName,  float afHealth);
	/**
	 * Gets the health of a prop.
	 * 
	 * @param asPropName name of the prop.
	 * @return the health of the specified prop.	 
	**/
	float Prop_GetHealth(const tString &in asPropName);
	void Prop_DisableCollisionUntilOutsidePlayer(const tString &in asPropName);
	/**
	 * Sets if a prop should be transfered
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * supported.
	 * @param abX should transfer be allowed	 
	**/
	void Prop_SetAllowMapTransfer(const tString &in asPropName,  bool abX);
	/**
	 * Activates or deactivates a entity and fades the mesh in or out.
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.
	 * @param abActive true = activates prop - false = deactivates prop.
	 * @param afFadeTime time to fade over.
	 
	**/
	void Prop_SetActiveAndFade(const tString &in asPropName,  bool abActive,  float afFadeTime);
	/**
	 * Attaches a prop mesh (any other data is skipped) to a Prop
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.
	 * @param asAttachName the internal name of the attached prop
	 * @param asAttachFile the entity file of the prop to attach
	 * @param avPosOffset the postion offset for the attached prop
	 * @param avRotOffset the rotational offset for the attached prop	 
	**/
	void Prop_AddAttachedProp(tString&in asPropName,  tString&in asAttachName,  tString&in asAttachFile,  cVector3f &in avPosOffset ,  cVector3f &in avRotOffset);
	/**
	 * Removes an attached prop from a prop
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.
	 * @param asAttachName the internal name of the attached prop	 
	**/
	void Prop_RemoveAttachedProp(tString&in asPropName,  tString&in asAttachName);
	/**
	 * Sets the physics of the object to static or dynamic
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.
	 * @param abX true = static physics - false = dynamic physics	 
	**/
	void Prop_SetStaticPhysics(const tString &in asPropName,  bool abX);
	/**
	 * Rotates a prop to a target speed.
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.
	 * @param afAcc acceleration to target speed
	 * @param afGoalSpeed target speed
	 * @param avAxis axis to rotate around
	 * @param abResetSpeed if the speed should be reset before beginning rotation.
	 * @param asOffsetEntity name of entity to rotate around. If left as "",
	 * the prop will rotate around its own axis.	 
	**/
	void Prop_RotateToSpeed(const tString &in asPropName,  float afAcc,  float afGoalSpeed,  const cVector3f &in avAxis,  							bool abResetSpeed,  const tString &in asOffsetEntity);
	/**
	 * Rotates a prop to a target speed. Using the up vector of offset entity as axis.
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.
	 * @param afAcc acceleration to target speed
	 * @param afGoalSpeed target speed
	 * @param abResetSpeed if the speed should be reset before beginning rotation.
	 * @param asOffsetEntity name of entity to rotate around along the entity up axis. 
	 * If left as , the prop will rotate around its own up axis.	 
	**/
	void Prop_RotateToSpeed(const tString &in asPropName,  float afAcc,  float afGoalSpeed,  bool abResetSpeed,  const tString &in asOffsetEntity);
	/**
	 * Moves the specified prop to the current position of the target entity.
	 * 
	 * @param asName name of prop to move.
	 * @param asTargetEntity name of the entity to move the prop to.
	 * @param afAcceleration acceleration in m/s^2
	 * @param afMaxSpeed the maximum speed of movement.
	 * @param afSlowDownDist the distance at which movement slows down.
	 * @param abResetSpeed if all static movement for the prop should be stopped before starting this movement.
	 * @param asCallback callback when movement is done: void asCallback(const tString& in asPropName)	 
	**/
	void Prop_MoveLinearTo(const tString &in asName,  const tString &in asTargetEntity,  float afAcceleration,  						   float afMaxSpeed,  float afSlowDownDist,  bool abResetSpeed,  const tString&in asCallback="");
	/**
	 * Aligns the rotation of the specified prop to the current rotation of the target entity.
	 * 
	 * @param asName name of prop to move.
	 * @param asTargetEntity name of the entity to align with.
	 * @param afAcceleration acceleration of rotation.
	 * @param afMaxSpeed the maximum speed of movement.
	 * @param afSlowDownDist the distance at which movement slows down.
	 * @param abResetSpeed if all static movement for the prop should be stopped before starting this movement.
	 * @param asCallback callback when movement is done: void asCallback(const tString& in asPropName)	 
	**/
	void Prop_AlignRotation(const tString &in asName,  const tString &in asTargetEntity,  float afAcceleration,  						   float afMaxSpeed,  float afSlowDownDist,  bool abResetSpeed,  const tString&in asCallback="");
	/**
	 * Stops the static movement of a prop.
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.	 
	**/
	void Prop_StopMovement(const tString &in asPropName);
	/**
	 * Clear out all velocity on a prop.
	 * 
	 * @param asPropName name of the prop. Wildcard(s) * are supported.	 
	**/
	void Prop_ClearVelocity(const tString &in asPropName);
	/**
	 * Sets the lit state of a lamp.
	 * 
	 * @param asName name of the lamp.
	 * @param abLit lit state to set.
	 * @param abEffects if the change should activate effects associated with it. 
	 * If false, the change will not be apparent to the player.	 
	**/
	void Lamp_SetLit(const tString& in asName,  bool abLit,  bool abEffects);
	/**
	 * Gets the lit state of a lamp.
	 * 
	 * @param asName name of the lamp.
	 * @return if the lamp is lit.	 
	**/
	bool Lamp_GetLit(const tString& in asName);
	/**
	 * Activates or deactivates flicker on the specified lamp(s)
	 * 
	 * @param asName name of the lamp, wildcards (*) supported.
	 * @param abActive flicker state to set.	 
	**/
	void Lamp_SetFlickerActive(const tString& in asName,  bool abActive);
	/**
	 * Sets the properties of the flicker of a lamp.
	 * 
	 * @param asName name of the lamp, wildcards (*) supported.
	 * @param afMinOnTime The minimum time the lamp will be turned on when flickering.
	 * @param afMaxOnTime The maximum time the lamp will be turned on when flickering.
	 * @param afMinOffTime The minimum time the lamp will be turned off when flickering.
	 * @param afMaxOffTime The maximum time the lamp will be turned off when flickering.
	 * @param abFade if the lamp should fade on or off, and use any effects associated 
	 * with setting the lit state of the lamp. Default = false.
	 * @param asOnSound sound to play when turned on. Default = .
	 * @param asOffSound sound to play when turned off. Default = .
	 * @param asOnPS particle system to create when turned on. Default = .
	 * @param asOffPS sparticle system to create when turned off. Default = .	 
	**/
	void Lamp_SetupFlicker(const tString& in asName,  float afMinOnTime,  float afMaxOnTime,  float afMinOffTime,  float afMaxOffTime,  bool abFade = false, 					  const tString &in asOnSound = "",  const tString &in asOffSound = "",  const tString &in asOnPS = "",  const tString &in asOffPS = "");
	/**
	 * Sets the door to a specific open state instantly.
	 * 
	 * @param asName name of the door, wildcards (*) supported.
	 * @param afOpenAmount 0 = closed, 1 = completely open.	 
	**/
	void SwingDoor_SetOpenAmount(const tString& in asName,  float afOpenAmount);
	/**
	 * Locks or unlocks a SwingDoor
	 * 
	 * @param asName name of the door, wildcards (*) supported.
	 * @param abLocked true = lock door, false = unlock door.
	 * @param abEffects if the change should activate effects associated with it. 
	 * If false, the change will not be apparent to the player.	 
	**/
	void SwingDoor_SetLocked(const tString& in asName,  bool abLocked,  bool abEffects);
	/**
	 * Blocks or unblocks a SwingDoor. A blocked door can still be opened slightly.
	 * 
	 * @param asName name of the door, wildcards (*) supported.
	 * @param abBlocked true = block door, false = unblock door.
	 * @param abEffects if the change should activate effects associated with it.
	 * If false, the change will not be apparent to the player.	 
	**/
	void SwingDoor_SetBlocked(const tString& in asName,  bool abBlocked,  bool abEffects);
	/**
	 * Sets the close state of a SwingDoor.
	 * 
	 * @param asName name of the door, wildcards (*) supported.
	 * @param abClosed true = close - false = open
	 * @param abEffects if the change should activate effects associated with it. 
	 * If false, the change will not be apparent to the player.	 
	**/
	void SwingDoor_SetClosed(const tString& in asName,  bool abClosed,  bool abEffects);
	/**
	 * Disables or enables the automatic close functionality of a door.
	 * If enabled, the door will not lose any force pushing it toward its closed position.
	 * 
	 * @param asName name of the door, wildcards (*) supported.
	 * @param abDisableAutoClose true = disable - false = enable	 
	**/
	void SwingDoor_SetDisableAutoClose(const tString& in asName,  bool abDisableAutoClose);
	/**
	 * Checks if door is locked.
	 * 
	 * @param asName name of the door.
	 * @return true if the door is locked.	 
	**/
	bool SwingDoor_GetLocked(const tString& in asName);
	/**
	 * Checks if door is blocked.
	 * 
	 * @param asName name of the door.
	 * @return true if the door is blocked.	 
	**/
	bool SwingDoor_GetBlocked(const tString& in asName);
	/**
	 * Checks if door is closed.
	 * 
	 * @param asName name of the door.
	 * @return true if the door is closed.	 
	**/
	bool SwingDoor_GetClosed(const tString& in asName);
	/**
	 * Checks the state of the door.
	 * 
	 * @param asName name of the door.
	 * @return -1 = angle is close to 0, 1 = angle is 70% or higher of max, 
	 * 0 = inbetween -1 and 1.	 
	**/
	int SwingDoor_GetState(const tString& in asName);
	/**
	 * Get open amount of a door
	 * 
	 * @param asName name of the door.
	 * @return open amount of door 	 
	**/
	float SwingDoor_GetOpenAmount(const tString& in asName);
	void SwingDoor_AddDoorBodyImpulse(const tString& in asName,  float afImpulseAmount);
	/**
	 * Returns true if door is closed.
	 * 
	 * @param asName name of the door.	 
	**/
	bool PhysicsSlideDoor_GetClosed(const tString& in asName);
	/**
	 * Returns the open amount of the door
	 * 
	 * @param asName name of the door.	 
	**/
	float PhysicsSlideDoor_GetOpenAmount(const tString& in asName);
	/**
	 * Automove physics slide door to a state.
	 * 
	 * @param asName name of the door.
	 * @param alState -1=closed, 1= open	 
	**/
	void PhysicsSlideDoor_AutoMoveToState(const tString& in asName,  int alState);
	/**
	 * Sets the physics slide door as locked or unlocked
	 * 
	 * @param asName name of the door.
	 * @param abLocked true = lock the door - false = unlock the door
	 * @param abEffects true = use effects - false = do not use effects.
	 
	**/
	void PhysicsSlideDoor_SetLocked(const tString& in asName,  bool abLocked,  bool abEffects);
	/**
	 * Sets the close state of a SlideDoor. Simplified version of SlideDoor_SetOpenAmount.
	 * 
	 * @param asName name of the door.
	 * @param abClosed true = close - false = open
	 * @param abInstant if the door should slide to the correct state or just have the 
	 * new position set instantly.
	 
	**/
	void SlideDoor_SetClosed(const tString& in asName,  bool abClosed,  bool abInstant = false);
	/**
	 * Moves a SlideDoor to a specific open amount.
	 * 
	 * @param asName name of the door.
	 * @param afOpenAmount the open amount to set
	 * @param abInstant if the door should slide to the correct state or just have the 
	 * new position set instantly.	 
	**/
	void SlideDoor_SetOpenAmount(const tString& in asName,  float afOpenAmount,  bool abInstant = false);
	/**
	 * Gets the open amount of a SlideDoor, 0 being completely closed and 1 being completely open.
	 * 
	 * @param asName name of the door.
	 * @return open amount of the door.	 
	**/
	float SlideDoor_GetOpenAmount(const tString& in asName);
	/**
	 * Sets if the agents should be able to open the slide door.
	 * 
	 * @param asName name of the door.
	 * @param abX if possible to open or not.	 
	**/
	void SlideDoor_SetOpenableByAgent(const tString& in asName,  bool abX);
	/**
	 * Sets the slide amount of a Slide prop, 0 being at it' min position and 1 being at its max.
	 * 
	 * @param asName name of the prop.
	 * @param afAmount the slide amount to set.	 
	**/
	void Slide_SetSlideAmount(const tString& in asName,  float afAmount);
	/**
	 * Gets the slide amount of a Slide prop, 0 being at it' min position and 1 being at its max.
	 * 
	 * @param asName name of the prop.
	 * 
	 * @return the slide amount.	 
	**/
	float Slide_GetSlideAmount(const tString& in asName);
	/**
	 * Gets the velocity of the slide joint.
	 * 
	 * @param asName name of the prop.
	 * 
	 * @return the vel of the slide joint.	 
	**/
	cVector3f Slide_GetSlideVel(const tString& in asName);
	/**
	 * Auto moves the slide prop to a specific amount?
	 * 
	 * @param asName name of the prop.
	 * @param afAmount the slide amount to set.	 
	**/
	void Slide_AutoMoveTo(const tString& in asName,  float afAmount);
	/**
	 * Locks/Unlocks a slide prop.
	 * 
	 * @param asName name of the prop.
	 * @param abLocked if the slide prop should be locked or not.
	 * @param abEffects if sounds and any other effects associated with locking/unlocking should be activated	 
	**/
	void Slide_SetLocked(const tString& in asName,  bool abLocked,  bool abEffects);
	/**
	 * Get if the slide prop is locked.
	 * 
	 * @param asName name of the prop.	 
	**/
	bool Slide_GetLocked(const tString& in asName);
	/**
	 * Gets the state of the wheel
	 * 
	 * @param asName name of wheel.
	 * @return -1 = min, 0 = middle, 1 = max	 
	**/
	int Wheel_GetState(const tString& in asName);
	/**
	 * Sets the angle of a wheel.
	 * 
	 * @param asName name of wheel.
	 * @param afAngle angle to set in radians.
	 * @param abAutoMove if the wheel should move to the angle automatically.	 
	**/
	void Wheel_SetAngle(const tString& in asName,  float afAngle,  bool abAutoMove);
	/**
	 * Gets the angle of a wheel.
	 * 
	 * @param asName name of wheel.
	 * @return angle in radians	 
	**/
	float Wheel_GetCurrentAngle(const tString& in asName);
	/**
	 * Sets the stuck state of a wheel.
	 * 
	 * @param asName name of wheel.
	 * @param alState stuck state where -1 = stuck at min, 1 = stuck at max and 0 = not stuck.
	 * @param abEffects if the change should activate effects associated with it. If false, 
	 * the change will not be apparent to the player.	 
	**/
	void Wheel_SetStuckState(const tString& in asName,  int alState,  bool abEffects);
	/**
	 * Sets if player interaction will disable the stuck state of a wheel.
	 * 
	 * @param asName name of wheel.
	 * @param abX true = interaction disables stuck state - false = interaction has no 
	 * effect on stuck state.	 
	**/
	void Wheel_SetInteractionDisablesStuck(const tString& in asName,  bool abX);
	/**
	 * Gets the state of the lever
	 * 
	 * @param asName name of lever.
	 * @return int -1 = min, 0 = middle, 1 = max	 
	**/
	int Lever_GetState(const tString& in asName);
	/**
	 * Sets if player interaction will disable the stuck state of a lever.
	 * 
	 * @param asName name of lever.
	 * @param abX true = interaction disables stuck state - false = interaction has no 
	 * effect on stuck state.	 
	**/
	void Lever_SetInteractionDisablesStuck(const tString& in asName,  bool abX);
	/**
	 * Sets the stuck state of a lever.
	 * 
	 * @param asName name of lever.
	 * @param alState stuck state where -1 = stuck at min, 1 = stuck at max and 0 = not stuck.
	 * @param abEffects if the change should activate effects associated with it. If false, 
	 * the change will not be apparent to the player.	 
	**/
	void Lever_SetStuckState(const tString& in asName,  int alState,  bool abEffects);
	/**
	 * Enables or disables the auto move property of the lever.
	 * 
	 * @param asName name of lever.
	 * @param abAutoMove if true, auto move will be enabled.	 
	**/
	void Lever_SetAutoMoveEnabled(const tString& in asName,  bool abAutoMove);
	/**
	 * Sets the auto move target of the lever.
	 * 
	 * @param asName name of lever.
	 * @param alTarget -1 = min, 0 = middle, 1 = max 	 
	**/
	void Lever_SetAutoMoveTarget(const tString& in asName,  int alTarget);
	/**
	 * Switches a button on/off.
	 * 
	 * @param asName name of button.
	 * @param abState true = on - false = off.
	 * @param abEffects if the change should activate effects associated with it. If false, 
	 * the change will not be apparent to the player.	 
	**/
	void Button_SetSwitchedOn(const tString& in asName,  bool abState,  bool abEffects);
	/**
	 * Returns true if button is currently switched on.
	 * 
	 * @param asName name of button.
	 * 
	 * @return if the button is switched on.	 
	**/
	bool Button_IsSwitchedOn(const tString& in asName);
	/**
	 * Sets if the button can be switched on by the player or not
	 * 
	 * @param asName name of button.
	 * @param abState true = can be switched on - false = can't be switched on.	 
	**/
	void Button_SetCanBeSwitchedOn(const tString& in asName,  bool abState);
	/**
	 * Sets if the button can be switched off by the player or not
	 * 
	 * @param asName name of button.
	 * @param abState true = can be switched off - false = can't be switched off.	 
	**/
	void Button_SetCanBeSwitchedOff(const tString& in asName,  bool abState);
	/**
	 * Sets the button's locked state
	 * 
	 * @param asName name of button.
	 * @param abState true = locked, false = unlocked.
	 * @param abUseEffects if color should fade in or be set instantly.	 
	**/
	void Button_SetLocked(const tString& in asName,  bool abState,  bool abUseEffects = true);
	/**
	 * Sets the buttons disabled state
	 * 
	 * @param asName name of button.
	 * @param abState true = disabled, false = not disabled
	 * @param abUseEffects if color should fade in or be set instantly.	 
	**/
	void Button_SetDisabled(const tString& in asName,  bool abState,  bool abUseEffects = true);
	/**
	 * Checks if the button is locked.
	 * 
	 * @param asName name of button.
	 * 
	 * @return true = locked, false = unlocked.	 
	**/
	bool Button_IsLocked(const tString& in asName);
	/**
	 * Checks if the button is disabled (will not light up or respond to presses).
	 * 
	 * @param asName name of button.
	 * 
	 * @return true = disabled, false = enabled.	 
	**/
	bool Button_IsDisabled(const tString& in asName);
	/**
	 * Makes the button blink in accordance to how it is set up in the ent file.
	 * 
	 * @param asName name of button.	 
	**/
	void Button_Blink(const tString& in asName);
	/**
	 * Switches a button on/off.
	 * 
	 * @param asName name of button.
	 * @param abState true = on - false = off.
	 * @param abEffects if the change should activate effects associated with it. If false, 
	 * the change will not be apparent to the player.	 
	**/
	void MovingButton_SetSwitchedOn(const tString& in asName,  bool abState,  bool abEffects);
	/**
	 * Sets if the moving button can be switched on by the player or not
	 * 
	 * @param asName name of button.
	 * @param abState true = can be switched on - false = can't be switched on.	 
	**/
	void MovingButton_SetCanBeSwitchedOn(const tString& in asName,  bool abState);
	/**
	 * Sets if the moving button can be switched off by the player or not
	 * 
	 * @param asName name of button.
	 * @param abState true = can be switched off - false = can't be switched off.	 
	**/
	void MovingButton_SetCanBeSwitchedOff(const tString& in asName,  bool abState);
	/**
	 * Returns the state of the button, on/off.
	 * 
	 * @param asName name of button.
	 * @return true = on - false = off.	 
	**/
	bool MovingButton_IsSwitchedOn(const tString& in asName);
	/**
	 * Sets the time it should take for the button to return to its off state.
	 * 
	 * @param asName name of button.
	 * @param afTime time to return to off state.	 
	**/
	void MovingButton_SetReturnToOffTime(const tString& in asName,  float afTime);
	/**
	 * Sets the MovingButtons locked state
	 * 
	 * @param asName name of MovingButton.
	 * @param abState true = locked, false = unlocked.
	 * @param abUseEffects if color should fade in or be set instantly.	 
	**/
	void MovingButton_SetLocked(const tString& in asName,  bool abState,  bool abUseEffects = true);
	/**
	 * Sets the MovingButtons disabled state
	 * 
	 * @param asName name of MovingButton.
	 * @param abState true = disabled, false = not disabled
	 * @param abUseEffects if color should fade in or be set instantly.	
	**/
	void MovingButton_SetDisabled(const tString& in asName,  bool abState,  bool abUseEffects = true);
	/**
	 * Checks if the MovingButton is locked.
	 * 
	 * @param asName name of MovingButton.
	 * 
	 * @return true = locked, false = unlocked.	
	**/
	bool MovingButton_IsLocked(const tString& in asName);
	/**
	 * Checks if the MovingButton is disabled (will not light up or respond to presses).
	 * 
	 * @param asName name of MovingButton.
	 * 
	 * @return true = disabled, false = enabled.	
	**/
	bool MovingButton_IsDisabled(const tString& in asName);
	/**
	 * Makes the MovingButton blink in accordance to how it is set up in the ent file.
	 * 
	 * @param asName name of MovingButton.	
	**/
	void MovingButton_Blink(const tString& in asName);
	/**
	 * Returns the current state of the MovingButton
	 * 
	 * @param asName name of MovingButton.	
	**/
	float MovingButton_GetStateAmount(const tString& in asName);
	/**
	 * Sets the lock state of a level door
	 * 
	 * @param asName name of level door.
	 * @param abState true = locked - false = unlocked.	
	**/
	void LevelDoor_SetLocked(const tString& in asName,  bool abState);
	/**
	 * Gets the lock state of a level door
	 * 
	 * @param asName name of level door.
	 * @return true = locked - false = unlocked.	
	**/
	bool LevelDoor_GetLocked(const tString& in asName);
	/**
	 * Sets the state of the move object. This makes it move to a certain postion between 
	 * min or max pos (or outside of that is <0 or >1).
	 * 
	 * @param asName name of move object
	 * @param afState true = locked - false = unlocked.	
	**/
	void MoveObject_SetState(const tString& in asName,  float afState);
	/**
	 * Sets the state of the move object. This makes it move to a certain postion between 
	 * min or max pos (or outside of that is <0 or >1).
	 * 
	 * This will also set the speeed and acc at which the movement occurs.
	 * 
	 * @param asName name of move object
	 * @param afState true = locked - false = unlocked.
	 * @param afAcc the acceleration of the movement
	 * @param afMaxSpeed the max speed.
	 * @param afSlowdownDist the distance from the state postion that it will start slowing to a halt.
	 * @param abResetSpeed if the previous speed should be reset.	
	**/
	void MoveObject_SetStateExt(const tString& in asName,  float afState,  float afAcc,  float afMaxSpeed,  float afSlowdownDist,  bool abResetSpeed);
	/**
	 * Sets the state of the needle object in meter. Which then makes the needle move to the specified state.
	 * 
	 * @param asName name of meter object
	 * @param afState percentage of where the needle should be. 0-1 (min pos - max pos).
	 * @param abFadeToState if true then the needle will fade to state instead of skipping to it.	
	**/
	void Meter_SetState(const tString& in asName,  float afState,  bool abFadeToState = true);
	/**
	 * Sets the shake multiplier of the needle object in meter. 
	 * 
	 * @param asName name of meter object
	 * @param afShakeMul the shaking multiplier. capped at 10.	
	**/
	void Meter_SetShakeMul(const tString& in asName,  float afShakeMul);
	/**
	 * Sets the speed multiplier of the needle object in meter. 
	 * 
	 * @param asName name of meter object
	 * @param afSpeedMul the speed multiplier.	
	**/
	void Meter_SetSpeedMul(const tString& in asName,  float afSpeedMul);
	/**
	 * Set if the terminal should allow interaction from player
	 * 
	 * @param asName name of terminal. Wildcards are allowed.
	 * @param abX if interactions are allowed or not	
	**/
	void Terminal_SetAllowInteraction(const tString& in asName,  bool abX);
	/**
	 * Set if the terminal should visible. If off, the offline color is used.
	 * 
	 * @param asName name of terminal. Wildcards are allowed.
	 * @param abX if the GUI should be active or not.
	 * @param afFadeTime time the GUI will be fading in/out (in seconds).
	
	**/
	void Terminal_SetGuiActive(const tString& in asName,  bool abX,  float afFadeTime=0.0f);
	/**
	 * Get if the terminal GUI is active.
	 * 
	 * @param asName name of terminal.	
	**/
	bool Terminal_IsGuiActive(const tString& in asName);
	/**
	 * Set the terminal's GUI method
	 * 
	 * @param asName name of terminal.
	 * @param asCallback terminal update method, prototype 	void OnGUI(const tString &in asEntityName, float afTimeStep)	
	**/
	void Terminal_SetOnGuiFunction(const tString& in asName,  const tString& in asCallback);
	/**
	 * Set the terminal's Enter callback
	 * 
	 * @param asName name of terminal.
	 * @param asCallback Callback called when entering terminal.
	 * Syntax for callback function: void FuncName(const tString&in asEntityName)	
	**/
	void Terminal_SetEnterCallback(const tString& in asName,  const tString& in asCallback);
	/**
	 * Set the terminal's Leave callback
	 * 
	 * @param asName name of terminal.
	 * @param asCallback Callback called when leaving terminal.
	 * Syntax for callback function: void FuncName(const tString&in asEntityName)	
	**/
	void Terminal_SetLeaveCallback(const tString& in asName,  const tString& in asCallback);
	/**
	 * Set if the terminal should update when not visible. Use sparingly.
	 * 
	 * @param asName name of terminal.
	 * @param abX if it should update when not visible.	
	**/
	void Terminal_SetUpdateWhenOutOfView(const tString& in asName,  bool abX);
	/**
	 * Forces the terminal to update its cache. Used to stop drastic changes to the look of a 
	 * GUI from popping into view when the terminal switches from cache to normal rendering.
	 * 
	 * @param asName name of terminal.	
	**/
	void Terminal_ForceCacheUpdate(const tString& in asName);
	/**
	 * Sets the FPS of the terminal when not in focus.
	 * 
	 * @param asName name of terminal.
	 * @param afFPS times/second to update the terminal when not in focus.	
	**/
	void Terminal_SetFPSWhenIdle(const tString& in asName,  float afFPS);
	void Terminal_SetShowMouse(const tString& in asPropName,  bool abShow);
	int Terminal_GetImGuiStateInt(const tString&in asPropName,  const tString&in asVarName,  int alDefault=0);
	bool Terminal_GetImGuiStateBool(const tString&in asPropName,  const tString&in asVarName,  bool alDefault=false);
	float Terminal_GetImGuiStateFloat(const tString&in asPropName,  const tString&in asVarName,  float afDefault=0.0f);
	cVector3f Terminal_GetImGuiStateVector3f(const tString&in asPropName,  const tString&in asVarName,  const cVector3f&in avDefault);
	cColor Terminal_GetImGuiStateColor(const tString&in asPropName,  const tString&in asVarName,  const cColor&in aDefault);
	void Terminal_SetImGuiStateInt(const tString&in asPropName,  const tString&in asVarName,  int alVal);
	void Terminal_SetImGuiStateBool(const tString&in asPropName,  const tString&in asVarName,  bool abVal);
	void Terminal_SetImGuiStateFloat(const tString&in asPropName,  const tString&in asVarName,  float afVal);
	void Terminal_SetImGuiStateVector3f(const tString&in asPropName,  const tString&in asVarName,  const cVector3f&in avVal);
	void Terminal_SetImGuiStateColor(const tString&in asPropName,  const tString&in asVarName,  const cColor&in aVal);
	void Terminal_IncImGuiStateInt(const tString&in asPropName,  const tString&in asVarName,  int alVal);
	void Terminal_IncImGuiStateFloat(const tString&in asPropName,  const tString&in asVarName,  float afVal);
	void Terminal_IncImGuiStateVector3f(const tString&in asPropName,  const tString&in asVarName,  const cVector3f&in avVal);
	void Terminal_IncImGuiStateColor(const tString&in asPropName,  const tString&in asVarName,  const cColor&in aVal);
	void Terminal_FadeImGuiStateFloat(const tString&in asPropName,  const tString&in asVarName,  float afGoalVal,  float afTime,  								  eEasing aType=eEasing_QuadInOut,   bool abReplaceIfExist=true);
	void Terminal_FadeImGuiStateVector3f(const tString&in asPropName,  const tString&in asVarName,  cVector3f avGoalVal,  float afTime,  								  eEasing aType=eEasing_QuadInOut,   bool abReplaceIfExist=true);
	void Terminal_FadeImGuiStateColor(const tString&in asPropName,  const tString&in asVarName,  cColor aGoalVal,  float afTime,  								  eEasing aType=eEasing_QuadInOut,   bool abReplaceIfExist=true);
	void Terminal_StopImGuiFade(const tString&in asPropName,  const tString&in asVarName);
	/**
	 * Sets the forcemul of a grab prop.
	 * 
	 * @param asName name of grab prop
	 * @param afForceMul the new forcemul	
	**/
	void Grab_SetForceMul(const tString& in asName,  float afForceMul);
	/**
	 * Sets the close callback of a readable prop.
	 * 
	 * @param asName name of readable prop
	 * @param asCallback the callback function
	 * 
	 * Syntax for callback function: void FuncName(const tString &in asEntity).	
	**/
	void Readable_SetCloseCallback(const tString &in asName,  const tString &in asCallback);
	/**
	 * Sets the open entity file of the readable prop
	 * 
	 * @param asName name of readable prop
	 * @param asEntityFile the new entity file name	
	**/
	void Readable_SetOpenEntityFile(const tString &in asName,  const tString &in asEntityFile);
	/**
	 * Sets if a tool should be hidden automatically after getting picked up and being displayed for a brief moment
	 * 
	 * @param asName name of the tool
	 * @param abX if it should autohide	
	**/
	void Tool_SetAutoHideAfterPickup(const tString &in asName,  bool abX);
	/**
	 * Sets if a tool should have the highlight effect when looked at.
	 * 
	 * @param asName name of the tool
	 * @param abX if it shoudl get highlighted	
	**/
	void Tool_SetHighlightActive(const tString &in asName,  bool abX);
	/**
	 * Adds the specified tool to the player's inventory. Similar to calling the entity interact on the tool entity, but with more control.
	 * 
	 * @param asName the name of the tool entity to pickup.
	 * @param abEquipTool if the tool should be equipped immediately. If the tool has AutoHide active it will still autohide after a while.
	 * @param abCallback if the tool's pickup callback should be executed.	
	**/
	void Tool_PickUp(const tString &in asName,  bool abEquipTool,  bool abCallback);
	/**
	 * Returns the hand animation prefix specified for the tool.
	 * 
	 * @param asName the name of the tool entity.
	 * @return the tool's hand animation prefix.	
	**/
	tString Tool_GetHandAnimationSuffix(const tString &in asName);
	/**
	 * Sets the energy level of an energy source
	 * 
	 * @param asName the name of the energy source.
	 * @param afX the energy amount	
	**/
	void EnergySource_SetEnergy(const tString &in asName,  float afX);
	/**
	 * Creates a particle system at entity.
	 * 
	 * @param asPSName name of the particle system entity to be created.
	 * @param asPSFile .ps file to create particle system from.
	 * @param asEntity entity to create particle system at. Can be "player".
	 * @param abAttach whether the particle system should be attached to the entity it is created at.
	 * 
	 * @return cParticleSystem, the created particle system or null if the function fails.	
	**/
	cParticleSystem@ ParticleSystem_CreateAtEntity(const tString &in asPSName,  const tString &in asPSFile,  const tString &in asEntity,  bool abAttach);
	/**
	 * Creates a particle system at entity with extra options.
	 * 
	 * @param asPSName name of the particle system entity to be created.
	 * @param asPSFile .ps file to create particle system from.
	 * @param asEntity entity to create particle system at. Can be "player".
	 * @param abAttach whether the particle system should be attached to the entity it is created at.
	 * @param acColor color of the particle system.
	 * @param afBrightness brightness of the particle system.
	 * @param abFadeAtDistance if the particles should fade depending on distance from the player.
	 * @param afFadeMinEnd when the player is closer than this, the particles are invisible.
	 * @param afFadeMinStart distance to the player where the particles will start fading if the player gets closer.
	 * @param afFadeMaxStart distance to the player where the particles will start fading if the player gets further away.
	 * @param afFadeMaxEnd when the player is further away than this, the particles are invisible.
	 * 
	 * @return the created particle system or null if the function fails.	
	**/
	cParticleSystem@ ParticleSystem_CreateAtEntityExt(const tString &in asPSName,  const tString &in asPSFile,  const tString &in asEntity,  bool abAttach,  									 const cColor &in acColor,  float afBrightness = 1.0f,  bool abFadeAtDistance = false,  									 float afFadeMinEnd = 1.0f,  float afFadeMinStart = 2.0f,  float afFadeMaxStart = 100.0f,  float afFadeMaxEnd = 110.0f);
	/**
	 * Destroy a particle system. Can contain wildcards.
	 * 
	 * @param asPSName name of the particle system entity to be destroyed.	
	**/
	void ParticleSystem_Destroy(const tString &in asPSName);
	/**
	 * Sets the visibility of a particle system.
	 * 
	 * @param asPSName name of the particle system. Can contain wildcards.
	 * @param abVisible if is should be set to visible or not.	
	**/
	void ParticleSystem_SetVisible(const tString &in asPSName,  bool abVisible);
	/**
	 * Sets the color of a particle system.
	 * 
	 * @param asPSName name of the particle system. Can contain wildcards.
	 * @param acColor the color to set	
	**/
	void ParticleSystem_SetColor(const tString &in asPSName,  const cColor &in acColor);
	/**
	 * Sets the brightness of a particle system.
	 * 
	 * @param asPSName name of the particle system. Can contain wildcards.
	 * @param afBrightness the color to set	
	**/
	void ParticleSystem_SetBrightness(const tString &in asPSName,  float afBrightness);
	/**
	 * Activates or deactivates a particle system.
	 * 
	 * @param asPSName name of the particle system. Can contain wildcards.
	 * @param abActive if is should be set to active.	
	**/
	void ParticleSystem_SetActive(const tString &in asPSName,  bool abActive);
	/**
	 * Attaches a particle system to an entity.
	 * 
	 * @param asPSName name of the particle system, can contain wildcards(*).
	 * @param asEntityName name of the entity to attach the particle system to.	
	**/
	void ParticleSystem_AttachToEntity(const tString &in asPSName,  const tString &in asEntityName);
	/**
	 * Returns true or false if a given particle system exists
	 * 
	 * @param asPSName name of the particle system. Can contain wildcards.	
	**/
	bool ParticleSystem_Exists(const tString &in asPSName);
	/**
	 * Preload particle system data
	 * 
	 * @param asFile file to preload	
	**/
	void ParticleSystem_Preload(const tString &in asFile);
	/**
	 * Fades one or more lights to a specified color and radius.
	 * 
	 * @param asLightName name of light. Can contain wildcards.
	 * @param acColor color to fade to.
	 * @param afRadius radius to fade to, if lower than 0, the current radius will be used.
	 * @param afTime time to fade over.	
	**/
	void Light_FadeTo(const tString &in asLightName,  const cColor &in acColor,  float afRadius,  float afTime);
	/**
	 * Sets the visibility of one or more lights
	 * 
	 * @param asLightName name of light. Can contain wildcards.
	 * @param abVisible if light should be visible.	
	**/
	void Light_SetVisible(const tString &in asLightName,  bool abVisible);
	/**
	 * Sets the brightness of one or more lights
	 * 
	 * @param asLightName name of light. Can contain wildcards.
	 * @param afBrightness the brightness to set.	
	**/
	void Light_SetBrightness(const tString &in asLightName,  float afBrightness);
	/**
	 * Sets the shadow bias for one or more lights
	 * 
	 * @param asLightName name of light. Can contain wildcards.
	 * @param afBias bias mul
	 * @param afSlopeBias slope bias mul	
	**/
	void Light_SetShadowBiasMul(const tString &in asLightName,  float afBias,  float afSlopeBias);
	/**
	 * Sets if a cheaper version of gobo rendering should be used
	 * 
	 * @param asLightName name of light. Can contain wildcards.
	 * @param abX if cheap version should be used, off by default
	
	**/
	void Light_SetCheapGobo(const tString &in asLightName,  bool abX);
	/**
	 * Gets the brightness of a light
	 * 
	 * @param asLightName name of light.
	 * @return the brightness of the light	
	**/
	float Light_GetBrightness(const tString &in asLightName);
	/**
	 * Activates or deactivates the flicker of one or more lights
	 * 
	 * @param asLightName name of light. Can contain wildcards.
	 * @param abX if flicker should be active.	
	**/
	void Light_SetFlickerActive(const tString &in asLightName,  bool abX);
	/**
	 * Sets the casts shadow. Used only by spotlights (for now).
	 * 
	 * @param asLightName name of the light. Can contain wildcards.
	 * @param abX if light should cast shadows.	
	**/
	void Light_SetCastShadows(const tString &in asLightName,  bool abX);
	/**
	 * Fades in the specified set on all probes belonging to it. This also fades out the currently active set for these probes.
	 * 
	 * @param asSet set to fade in.
	 * @param afTime how long it should take until the fade is done.	
	**/
	void IrradianceSet_FadeIn(const tString &in asSet,  float afTime);
	/**
	 * Fades in the specified set on a specific probe. This also fades out the currently active set for these probes.
	 * 
	 * @param asProbe the probe to fade in the set on. Wildcards (*) supported.
	 * @param asSet set to fade in.
	 * @param afTime how long it should take until the fade is done.	
	**/
	void IrradianceSet_FadeInSingleProbe(const tString &in asProbe,  const tString &in asSet,  float afTime);
	/**
	 * Sets if a billboard should be rendered or not.
	 * 
	 * @param asBillboardName name of billboard. Can contain wildcards.
	 * @param abVisible if the billboard should be visible or not.	
	**/
	void Billboard_SetVisible(const tString &in asBillboardName,  bool abVisible);
	/**
	 * Sets the minimum range of a billboard, getting closer will cause the billboard to fade out
	 * 
	 * @param asBillboardName name of billboard. Can contain wildcards.
	 * @param afRangeStart distance the object should start to fade, -1 = no fade
	 * @param afRangeEnd distance the object fade is complete, -1 = no fade	
	**/
	void Billboard_SetRangeMin(const tString &in asBillboardName,  float afRangeStart,  float afRangeEnd);
	/**
	 * Sets the max range of a billboard, getting far away will cause the billboard to fade out
	 * 
	 * @param asBillboardName name of billboard. Can contain wildcards.
	 * @param afRangeStart distance the object should start to fade, -1 = no fade
	 * @param afRangeEnd distance the object fade is complete, -1 = no fade	
	**/
	void Billboard_SetRangeMax(const tString &in asBillboardName,  float afRangeStart,  float afRangeEnd);
	/**
	 * Sets the brightness of a billboard
	 * 
	 * @param asBillboardName name of billboard. Can contain wildcards.
	 * @param afBrightness new brightness	
	**/
	void Billboard_SetBrightness(const tString &in asBillboardName,  float afBrightness);
	/**
	 * Sets whether the billboard is drawn in reflections or not, and the real world or not.
	 * 
	 * @param asBillboardName name of billboard. Can contain wildcards.
	 * @param abVisibleInReflection whether the entity is drawn in reflections
	 * @param abVisibleInWorld whether the entity is drawn in the real world	
	**/
	void Billboard_SetReflectionVisibility(const tString &in asBillboardName,  bool abVisibleInReflection,  bool abVisibleInWorld);
	/**
	 * Sets if a lens flare should be rendered or not.
	 * 
	 * @param asLensFlareName name of lens flare. Can contain wildcards.
	 * @param abVisible if the lens flare should be visible or not.	
	**/
	void LensFlare_SetVisible(const tString &in asLensFlareName,  bool abVisible);
	void FogArea_SetVisible(const tString &in asFogAreaName,  bool abActive);
	void FogArea_SetVisibleInReflection(const tString &in asFogAreaName,  bool abActive);
	/**
	 * Creates an array of particle systems with a given name.
	 * 
	 * @param asName name of particle systems. May contain * as wildcards.
	 * @param avOutParticles reference to array that will be filled with particle systems.	
	**/
	bool Map_GetParticleSystemArray(const tString &in asName,  array<cParticleSystem@> &inout avOutParticles);
	/**
	 * Creates an array of lights with a given name.
	 * 
	 * @param asName name of lights. May contain * as wildcards.
	 * @param avOutLights reference to array that will be filled with lights.
	 * @return array of lights found.	
	**/
	bool Map_GetLightArray(const tString &in asName,  array<iLight@> &inout avOutLights);
	/**
	 * Creates an array of billboards with a given name.
	 * 
	 * @param asName name of billboards. May contain * as wildcards.
	 * @param avOutBillboards reference to array that will be filled with billboards.
	 * @return array of billboards found.	
	**/
	bool Map_GetBillboardArray(const tString &in asName,  array<cBillboard@> &inout avOutBillboards);
	/**
	 * Creates an array of lens flares with a given name.
	 * 
	 * @param asName name of lens flares. May contain * as wildcards.
	 * @param avOutLensFlares reference to array that will be filled with lens flares.
	 * @return array of lens flares found.	
	**/
	bool Map_GetLensFlareArray(const tString &in asName,  array<cLensFlare@> &inout avOutLensFlares);
	/**
	 * Creates an array of fog areas with a given name.
	 * 
	 * @param asName name of fog areas. May contain * as wildcards.
	 * @param avOutFogAreas reference to array that will be filled with fog areas.
	 * @return array of fog areas found.	
	**/
	bool Map_GetFogAreaArray(const tString &in asName,  array<cFogArea@> &inout avOutFogAreas);
	/**
	 * A function that gives you a point along a spline made up of four points. The spline is guaranteed to hit the second and third points.
	 * 
	 * @param avResult the resulting point on the spline.
	 * @param avP0 the first point.
	 * @param avP1 the second point.
	 * @param avP2 the third point.
	 * @param avP3 the fourth point.
	 * @param afFract the normalized distance along the spline to check. 0 is at the second point, 1 is at the third point. Should not go out of the range 0-1.	
	**/
	void Math_CatmullRom(cVector3f &out avResult,  const cVector3f &in avP0,  const cVector3f &in avP1,  						const cVector3f &in avP2,  const cVector3f &in avP3,  float afFract);
	tString String_SecondsToClockDisplay(float afSeconds,  bool abShowHours,  bool abShowMinutes,  bool abShowSeconds,  bool abShowHundredths);
	/**
	 * Adds force to the specified body.
	 * 
	 * @param asBodyName name of the body.
	 * @param avForce force to add.
	 * @param abLocalSpace if the force is in the body's local space.	
	**/
	void Body_AddForce(const tString &in asBodyName,  const cVector3f &in avForce,  bool abLocalSpace);
	/**
	 * Adds an impulse to the specified body.
	 * 
	 * @param asBodyName name of the body.
	 * @param avImpulse impulse to add.
	 * @param abLocalSpace if the impulse is in the body's local space.	
	**/
	void Body_AddImpulse(const tString &in asBodyName,  const cVector3f &in avImpulse,  bool abLocalSpace);
	/**
	 * Sets whether a body collides with other bodies or not.
	 * 
	 * @param asBodyName name of the body.
	 * @param abCollides if it should collide or not.	
	**/
	void Body_SetCollides(const tString &in asBodyName,  bool abCollides);
	/**
	 * Gets the name of the entity the body belongs to
	 * 
	 * @param asBodyName name of the body.
	 * 
	 * @return Name of the entity.	
	**/
	tString Body_GetEntityName(const tString &in asBodyName);
	/**
	 * Breaks the specified joint.
	 * 
	 * @param asJointName name of the joint.	
	**/
	void Joint_Break(const tString &in asJointName);
	/**
	 * Checks if the specified joint is broken.
	 * 
	 * @param asJointName name of the joint.
	 * 
	 * @return true if the joint is broken.	
	**/
	bool Joint_IsBroken(const tString &in asJointName);
	/**
	 * Sets if the joint should be breakable by force or not.
	 * 
	 * @param asJointName name of the joint.
	 * @param abBreakable true if the joint should be breakable, false if it shouldn't.	
	**/
	void Joint_SetBreakable(const tString &in asJointName,  bool abBreakable);
	/**
	 * Gets the force magnitude applied to the specified joint.
	 * 
	 * @param asJointName name of the joint.
	 * 
	 * @return force size	
	**/
	float Joint_GetForceSize(const tString &in asJointName);

	const cVector2l cVector2l_MinusOne;
	const cVector2f cVector2f_Zero;
	const cVector2f cVector2f_One;
	const cVector2f cVector2f_Right;
	const cVector2f cVector2f_Left;
	const cVector2f cVector2f_Up;
	const cVector2f cVector2f_Down;
	const cVector2f cVector2f_MinusOne;
	const cVector3f cVector3f_Zero;
	const cVector3f cVector3f_One;
	const cVector3f cVector3f_Right;
	const cVector3f cVector3f_Left;
	const cVector3f cVector3f_Up;
	const cVector3f cVector3f_Down;
	const cVector3f cVector3f_Forward;
	const cVector3f cVector3f_Back;
	const cVector3f cVector3f_MinusOne;
	const cVector4f cVector4f_Zero;
	const cVector4f cVector4f_One;
	const cVector4f cVector4f_MinusOne;
	const cMatrixf cMatrixf_Identity;
	const cMatrixf cMatrixf_Zero;
	const cQuaternion cQuaternion_Identity;
	const cColor cColor_Red;
	const cColor cColor_Green;
	const cColor cColor_Blue;
	const cColor cColor_White;
	const tID tID_Invalid;
	const float cMath_Pi;
	const float cMath_PiDiv2;
	const float cMath_PiDiv4;
	const float cMath_PiMul2;
	const float cMath_Epsilon;
	const float cMath_Sqrt2;
